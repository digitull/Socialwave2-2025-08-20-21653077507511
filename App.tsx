// Triggering a redeploy to fix a database connection issue.
// Triggering a redeploy to fix a database connection issue.
// TypeScript error check
import React, {
  useState,
  useEffect,
  useRef,
  useMemo,
  useCallback,
} from "react";

import { z } from "zod";
import copy from "copy-to-clipboard";
// import {
//   FacebookShareButton,
//   TwitterShareButton,
//   LinkedinShareButton,
//   FacebookIcon,
//   TwitterIcon,
//   LinkedinIcon,
// } from "react-share";

import { Line, Doughnut } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip as ChartTooltip,
  Legend,
  Filler,
  ArcElement,
} from "chart.js";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  ChartTooltip,
  Legend,
  Filler,
  ArcElement,
);

const TrendingTopicsSchemaForProp = z.array(
  z.object({
    id: z.string(),
    topic: z.string(),
    sentiment: z.string(),
    relevanceScore: z.number(),
    executiveSummary: z.string(),
    strategicAngle: z.string(),
    exampleHook: z.string(),
    samplePost: z.string(),
    historicalData: z.string(),
    contentFormatSuggestions: z.array(z.string()),
    sources: z
      .array(
        z.object({
          title: z.string(),
          url: z.string(),
          platform: z.string().optional(),
          credibility: z.string().optional(),
          publishedAt: z.string().optional(),
        }),
      )
      .optional(),
  }),
);
type TrendingTopicsDataForProp = z.infer<typeof TrendingTopicsSchemaForProp>;

function TrendingTopicsTab({
  topics,
  onFeedback,
  onGenerate,
  isGenerating,
  generatingParams,
  highlightedTopicId,
  cacheInfo,
}: {
  topics: TrendingTopicsDataForProp;
  onFeedback: (
    topic: any,
    feedbackType: "love" | "like" | "neutral" | "dislike",
  ) => void;
  onGenerate: (topic: any, format: string) => void;
  isGenerating: boolean;
  generatingParams: { topicId: string; format: string } | null;
  highlightedTopicId?: string | null;
  cacheInfo?: {
    lastUpdated?: string;
    isFromCache?: boolean;
  };
}) {
  const highlightedRef = useRef<HTMLDivElement>(null);
  const [showSearchHistory, setShowSearchHistory] = useState(false);

  const [postingTopic, setPostingTopic] = useState<string | null>(null);
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const { handleError } = useErrorHandler();

  // Query for saved insights to track which topics are saved
  const { data: savedInsights } = useQuery(
    ["savedInsights"],
    () => apiClient.listSavedInsights(),
    {
      staleTime: 60000, // 1 minute
    },
  );

  // Mutation for saving insights
  const saveMutation = useMutation(apiClient.saveTrendInsight, {
    onSuccess: () => {
      queryClient.invalidateQueries(["savedInsights"]);
      toast({
        title: "Insight saved",
        description: "This viral idea has been saved for later reference.",
      });
    },
    onError: (error: Error) => {
      handleError(error, "insight-save", {
        showToast: true,
        retryFn: () => saveMutation.mutate(saveMutation.variables!),
        fallbackMessage: "Failed to save insight. Please try again.",
      });
    },
  });

  // Mutation for removing saved insights
  const removeMutation = useMutation(apiClient.removeSavedInsight, {
    onSuccess: () => {
      queryClient.invalidateQueries(["savedInsights"]);
      toast({
        title: "Insight removed",
        description: "This viral idea has been removed from your saved list.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to remove insight",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Helper function to check if a topic is saved
  const isTopicSaved = (topicId: string) => {
    return (
      savedInsights?.some((insight) => {
        try {
          const parsedData = JSON.parse(insight.data as string) as any;
          return parsedData?.id === topicId;
        } catch (error) {
          void error;
          return false;
        }
      }) || false
    );
  };

  // Helper function to handle save/unsave
  const handleSaveToggle = (topic: any) => {
    const isSaved = isTopicSaved(topic.id);
    if (isSaved) {
      const savedInsight = savedInsights?.find((insight) => {
        try {
          const parsedData = JSON.parse(insight.data as string) as any;
          return parsedData?.id === topic.id;
        } catch (error) {
          void error;
          return false;
        }
      });
      if (savedInsight) {
        removeMutation.mutate({ id: savedInsight.id });
      }
    } else {
      saveMutation.mutate({
        data: topic,
        type: "trending",
        title: topic.topic || "Trending Topic",
      });
    }
  };

  // Query for search history
  const { data: searchHistory, isLoading: isLoadingHistory } = useQuery(
    ["trendSearchHistory"],
    () => apiClient.getTrendSearchHistory(),
    {
      staleTime: 60000, // 1 minute
    },
  );

  // Mutation for deleting search history item
  const deleteMutation = useMutation(apiClient.deleteTrendSearchHistory, {
    onSuccess: () => {
      queryClient.invalidateQueries(["trendSearchHistory"]);
      toast({
        title: "Search deleted",
        description: "Search history item removed.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to delete search",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Mutation for clearing all search history
  const clearAllMutation = useMutation(apiClient.clearAllTrendSearchHistory, {
    onSuccess: () => {
      queryClient.invalidateQueries(["trendSearchHistory"]);
      toast({
        title: "Search history cleared",
        description: "All search history has been removed.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to clear history",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Mutation for posting content immediately
  const postContentMutation = useMutation(apiClient.postContent, {
    onSuccess: () => {
      toast({ title: "Content posted successfully!" });
      queryClient.invalidateQueries(["analytics"]);
      setPostingTopic(null);
    },
    onError: (error: any) => {
      toast({
        title: "Failed to post content",
        description: error.message,
        variant: "destructive",
      });
      setPostingTopic(null);
    },
  });

  // Handler for "Post This" button
  const handlePostThis = async (topic: any) => {
    setPostingTopic(topic.topic);

    try {
      // Generate content from the trending topic
      const result = await apiClient.generateContentFromTrendingTopic({
        topic: topic,
        format: "Social Media Post",
      });

      // Get the generated content
      const generatedContent = await apiClient.getGeneratedContentById({
        contentId: result.contentId,
      });

      if (generatedContent) {
        // Post the generated content immediately
        postContentMutation.mutate({
          content: generatedContent.content,
          platform: "twitter",
          accountId: "",
        });
      } else {
        throw new Error("Generated content not found");
      }
    } catch (error) {
      void error;
      toast({
        title: "Failed to generate and post content",
        description: "Please try again later",
        variant: "destructive",
      });
      setPostingTopic(null);
    }
  };

  // Handler for "Schedule This" button
  const handleScheduleThis = () => {
    // TODO: Implement scheduling dialog for trending insights
    toast({
      title: "Scheduling Feature",
      description: "Scheduling functionality will be implemented soon",
    });
  };

  useEffect(() => {
    if (highlightedRef.current) {
      highlightedRef.current.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }, [highlightedTopicId]);

  console.log("[TrendingTopicsTab] Debug - topics data:", {
    topics,
    topicsLength: topics?.length,
    topicsType: typeof topics,
    isArray: Array.isArray(topics),
  });

  if (!topics || topics.length === 0) {
    return (
      <Card className="overflow-hidden mb-8">
        <CardHeader className="border-b bg-secondary/20">
          <div className="flex justify-between items-center">
            <CardTitle>Trending Insights</CardTitle>
            {/* Refresh now handled by unified refresh system */}
          </div>
          {cacheInfo && (
            <p className="text-sm text-muted-foreground mt-2">
              {cacheInfo.isFromCache ? "Cached data" : "Live data"}
              {cacheInfo.lastUpdated && (
                <>
                  {" "}
                  • Last updated:{" "}
                  {new Date(cacheInfo.lastUpdated).toLocaleString()}
                </>
              )}
            </p>
          )}
        </CardHeader>
        <CardContent className="p-6">
          <EmptyState
            icon={<BarChart3 className="h-12 w-12" />}
            title="No Trending Insights Found"
            description="Could not generate trending insights at this time. Please check back later or try adjusting your filters."
          />
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="lg:col-span-1 space-y-6 overflow-x-hidden">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg md:text-xl font-semibold">Trending Insights</h2>{" "}
        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowSearchHistory(!showSearchHistory)}
          >
            <Clock className="mr-2 h-4 w-4" />
            History
          </Button>
          {/* Refresh now handled by unified refresh system */}
        </div>
      </div>

      {cacheInfo && (
        <p className="text-sm text-muted-foreground mb-4">
          {cacheInfo.isFromCache ? "Cached data" : "Live data"}
          {cacheInfo.lastUpdated && (
            <>
              {" "}
              • Last updated: {new Date(cacheInfo.lastUpdated).toLocaleString()}
            </>
          )}
        </p>
      )}

      {showSearchHistory && (
        <Card className="mb-6">
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle className="text-base md:text-lg">
                Recent Searches
              </CardTitle>{" "}
              {searchHistory && searchHistory.length > 0 && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => clearAllMutation.mutate()}
                  disabled={clearAllMutation.isLoading}
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Clear All
                </Button>
              )}
            </div>
          </CardHeader>
          <CardContent>
            {isLoadingHistory ? (
              <div className="flex items-center justify-center p-4">
                <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                <span className="text-sm text-muted-foreground">
                  Loading history...
                </span>
              </div>
            ) : !searchHistory || searchHistory.length === 0 ? (
              <p className="text-sm text-muted-foreground text-center p-4">
                No search history yet. Your recent trend searches will appear
                here.
              </p>
            ) : (
              <div className="space-y-2">
                {searchHistory.map((search) => (
                  <div
                    key={search.id}
                    className="flex items-center justify-between p-3 rounded-lg border bg-muted/30 hover:bg-muted/50 transition-colors"
                  >
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        {search.query && (
                          <Badge variant="outline" className="text-xs">
                            {search.query}
                          </Badge>
                        )}
                        {search.region && (
                          <Badge variant="secondary" className="text-xs">
                            {search.region}
                          </Badge>
                        )}
                        {search.category && (
                          <Badge variant="secondary" className="text-xs">
                            {search.category}
                          </Badge>
                        )}
                      </div>
                      <p className="text-xs text-muted-foreground">
                        {new Date(search.createdAt).toLocaleString()}
                      </p>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => deleteMutation.mutate({ id: search.id })}
                      disabled={deleteMutation.isLoading}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      )}
      {topics.map((topic, index) => (
        <Card
          ref={topic.id === highlightedTopicId ? highlightedRef : null}
          key={index}
          className={`overflow-hidden ${
            topic.id === highlightedTopicId ? "ring-2 ring-primary" : ""
          }`}
        >
          <CardHeader className="border-b bg-secondary/20 p-4">
            <div className="flex justify-between items-start">
              <div>
                <CardTitle className="text-xl gradient-text">
                  {topic.topic}
                </CardTitle>
                <div className="flex items-center gap-2 mt-2">
                  <Badge
                    variant={
                      topic.sentiment.toLowerCase() === "positive"
                        ? "default"
                        : topic.sentiment.toLowerCase() === "negative"
                          ? "destructive"
                          : "secondary"
                    }
                  >
                    {topic.sentiment}
                  </Badge>
                  <Badge variant="outline">
                    Relevance: {topic.relevanceScore}/10
                  </Badge>
                </div>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-6 space-y-4">
            <div>
              <h4 className="font-semibold text-sm md:text-base mb-2 flex items-center">
                <Sparkles className="h-4 w-4 mr-2 text-primary" />
                Executive Summary
              </h4>
              <p className="text-xs md:text-sm text-muted-foreground ml-6 break-words">
                {" "}
                {topic.executiveSummary}
              </p>
            </div>
            <Separator />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-base mb-2">
                  Strategic Angle
                </h4>
                <p className="text-sm text-muted-foreground break-words">
                  {topic.strategicAngle}
                </p>
              </div>
              <div>
                <h4 className="font-semibold text-sm md:text-base mb-2">
                  Example Hook
                </h4>{" "}
                <p className="text-sm text-muted-foreground italic break-words">
                  "{topic.exampleHook}"
                </p>
              </div>
            </div>
            <Separator />
            <div>
              <h4 className="font-semibold text-sm md:text-base mb-2">
                Sample Post
              </h4>
              <div className="p-4 bg-muted/30 rounded-lg border border-muted/50">
                <p className="text-sm whitespace-pre-wrap break-words">
                  {topic.samplePost}
                </p>
              </div>
            </div>
            <Separator />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-base mb-2">
                  Historical Context
                </h4>
                <p className="text-sm text-muted-foreground break-words">
                  {topic.historicalData}
                </p>
              </div>
              <div>
                <h4 className="font-semibold text-base mb-2">
                  Suggested Content Formats (Click to generate)
                </h4>
                <div className="flex flex-wrap gap-2">
                  {topic.contentFormatSuggestions.map((format, i) => (
                    <Button
                      key={i}
                      variant="secondary"
                      size="sm"
                      className="h-auto"
                      onClick={() => onGenerate(topic, format)}
                      disabled={isGenerating}
                    >
                      {isGenerating &&
                      generatingParams?.topicId === topic.id &&
                      generatingParams?.format === format ? (
                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Sparkles className="h-4 w-4 mr-2" />
                      )}
                      {format}
                    </Button>
                  ))}
                </div>
              </div>
            </div>
            {topic.sources && topic.sources.length > 0 && (
              <>
                <Separator />
                <div>
                  <h4 className="font-semibold text-sm md:text-base mb-3 flex items-center">
                    <ExternalLink className="h-4 w-4 mr-2 text-primary" />
                    Sources & Citations
                  </h4>
                  <div className="space-y-3">
                    {topic.sources.map((source, i) => (
                      <div
                        key={i}
                        className="p-3 bg-muted/20 rounded-lg border border-muted/40"
                      >
                        <div className="flex items-start justify-between gap-3">
                          <div className="flex-1 min-w-0">
                            <a
                              href={source.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-primary hover:underline font-medium text-sm block truncate"
                              title={source.title}
                            >
                              {source.title}
                            </a>
                            <div className="flex items-center gap-2 mt-2 flex-wrap">
                              {source.platform && (
                                <Badge variant="secondary" className="text-xs">
                                  {source.platform}
                                </Badge>
                              )}
                              {source.credibility && (
                                <Badge
                                  variant={
                                    source.credibility
                                      .toLowerCase()
                                      .includes("high")
                                      ? "default"
                                      : source.credibility
                                            .toLowerCase()
                                            .includes("medium")
                                        ? "secondary"
                                        : "outline"
                                  }
                                  className="text-xs"
                                >
                                  {source.credibility} credibility
                                </Badge>
                              )}
                              {source.publishedAt && (
                                <span className="text-xs text-muted-foreground">
                                  {new Date(
                                    source.publishedAt,
                                  ).toLocaleDateString()}
                                </span>
                              )}
                            </div>
                          </div>
                          <ExternalLink className="h-4 w-4 text-muted-foreground flex-shrink-0 mt-0.5" />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </>
            )}
          </CardContent>
          <CardFooter className="p-4 space-y-3">
            {/* Action buttons row */}
            <div className="flex gap-2 w-full">
              <Button
                size="sm"
                variant="default"
                onClick={() => handlePostThis(topic)}
                disabled={
                  postContentMutation.isLoading && postingTopic === topic.topic
                }
                className="flex-1 h-9"
              >
                {postContentMutation.isLoading &&
                postingTopic === topic.topic ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Send className="h-4 w-4 mr-2" />
                )}
                Post This
              </Button>
              <Button
                size="sm"
                variant="outline"
                onClick={() => handleScheduleThis()}
                className="flex-1 h-9"
              >
                <Calendar className="h-4 w-4 mr-2" />
                Schedule
              </Button>
            </div>

            {/* Feedback and save row */}
            <div className="flex justify-between items-center w-full">
              <div className="flex gap-1">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="ghost"
                        className="h-7 w-7 hover:text-red-500"
                        onClick={() => onFeedback(topic, "love")}
                      >
                        <Heart className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>Love this!</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="ghost"
                        className="h-7 w-7 hover:text-green-500"
                        onClick={() => onFeedback(topic, "like")}
                      >
                        <ThumbsUp className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>I like this</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="ghost"
                        className="h-7 w-7 hover:text-yellow-500"
                        onClick={() => onFeedback(topic, "neutral")}
                      >
                        <Meh className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>It's okay</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="ghost"
                        className="h-7 w-7 hover:text-gray-500"
                        onClick={() => onFeedback(topic, "dislike")}
                      >
                        <ThumbsDown className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>Not for me</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      size="sm"
                      variant={isTopicSaved(topic.id) ? "default" : "outline"}
                      onClick={() => handleSaveToggle(topic)}
                      disabled={
                        saveMutation.isLoading || removeMutation.isLoading
                      }
                    >
                      {saveMutation.isLoading || removeMutation.isLoading ? (
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Bookmark
                          className={`h-4 w-4 mr-2 ${isTopicSaved(topic.id) ? "fill-current" : ""}`}
                        />
                      )}
                      {isTopicSaved(topic.id) ? "Saved" : "Save"}
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>
                      {isTopicSaved(topic.id)
                        ? "Remove from saved insights"
                        : "Save this insight for later"}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </CardFooter>
        </Card>
      ))}
    </div>
  );
}

const ViralPotentialSchemaForProp = z.array(
  z.object({
    id: z.string(),
    concept: z.string(),
    viralityScore: z.number(),
    targetPlatforms: z.array(z.string()),
    justification: z.string(),
    hook: z.string(),
    body: z.string(),
    callToAction: z.string(),
    hashtags: z.array(z.string()),
    creativeDirection: z.string(),
    optimizationTips: z.string(),
    platformStrategies: z
      .object({
        twitter: z
          .object({
            strategy: z.string(),
            contentFormat: z.string(),
            hashtags: z.array(z.string()),
            timing: z.string(),
            engagement: z.string(),
            viralMechanics: z.string(),
            audienceTargeting: z.string(),
            characterLimit: z.string(),
            threadStrategy: z.string(),
            contentAdaptation: z.string().optional(),
            hashtagStrategy: z.string().optional(),
            postingTiming: z.string().optional(),
            engagementTactics: z.string().optional(),
          })
          .optional(),
        instagram: z
          .object({
            strategy: z.string(),
            contentFormat: z.string(),
            hashtags: z.array(z.string()),
            timing: z.string(),
            visualStrategy: z.string(),
            contentAdaptation: z.string().optional(),
            hashtagStrategy: z.string().optional(),
            postingTiming: z.string().optional(),
            engagementTactics: z.string().optional(),
            viralMechanics: z.string(),
            audienceTargeting: z.string(),

            storyStrategy: z.string(),
            reelsStrategy: z.string(),
          })
          .optional(),
        tiktok: z
          .object({
            strategy: z.string(),
            contentFormat: z.string(),
            hashtags: z.array(z.string()),
            timing: z.string(),
            engagement: z.string(),
            viralMechanics: z.string(),
            audienceTargeting: z.string(),
            videoStrategy: z.string(),
            soundStrategy: z.string(),
            trendIntegration: z.string(),
            contentAdaptation: z.string().optional(),
            hashtagStrategy: z.string().optional(),
            postingTiming: z.string().optional(),
            engagementTactics: z.string().optional(),
          })
          .optional(),
        linkedin: z
          .object({
            strategy: z.string(),
            contentFormat: z.string(),
            hashtags: z.array(z.string()),
            timing: z.string(),
            engagement: z.string(),
            viralMechanics: z.string(),
            audienceTargeting: z.string(),
            professionalAngle: z.string(),
            contentAdaptation: z.string().optional(),
            hashtagStrategy: z.string().optional(),
            postingTiming: z.string().optional(),
            engagementTactics: z.string().optional(),
          })
          .optional(),
        facebook: z
          .object({
            strategy: z.string(),
            contentFormat: z.string(),
            hashtags: z.array(z.string()),
            timing: z.string(),
            engagement: z.string(),
            viralMechanics: z.string(),
            audienceTargeting: z.string(),
            groupStrategy: z.string(),
            contentAdaptation: z.string().optional(),
            hashtagStrategy: z.string().optional(),
            postingTiming: z.string().optional(),
            engagementTactics: z.string().optional(),
          })
          .optional(),
      })
      .optional(),
    viralPotentialAnalysis: z
      .object({
        viralTriggers: z.array(z.string()),
        shareabilityFactors: z.array(z.string()),
        emotionalHooks: z.array(z.string()),
        contentPillars: z.array(z.string()),
        riskFactors: z.array(z.string()),
        successMetrics: z.array(z.string()),
      })
      .optional(),
    sources: z
      .array(
        z.object({
          title: z.string(),
          url: z.string(),
          platform: z.string().optional(),
          credibility: z.enum(["high", "medium", "low"]).optional(),
          publishedDate: z.string().optional(),
        }),
      )
      .optional(),
  }),
);
type ViralPotentialDataForProp = z.infer<typeof ViralPotentialSchemaForProp>;

interface ViralContentLoadingStateProps {
  lastUpdated?: any;
  onCheckProgress?: () => void;
  onRetryAnalysis?: () => void;
  isChecking?: boolean;
  selectedPageId?: string | null;
  onCleanupStuckTasks?: () => void;
  onResetInsights?: () => void;
  isCleaningUp?: boolean;
  isResetting?: boolean;
}

function ViralContentLoadingState({
  lastUpdated,
  onCheckProgress,
  onRetryAnalysis,
  isChecking = false,
  selectedPageId,
  onCleanupStuckTasks,
  onResetInsights,
  isCleaningUp,
  isResetting,
}: ViralContentLoadingStateProps) {
  const [currentThought, setCurrentThought] = useState(0);
  const [quickInsights, setQuickInsights] = useState<any[]>([]);
  const [autoRefreshCount, setAutoRefreshCount] = useState(0);
  const { data: connectedAccounts } = useConnectedAccounts();

  const chainOfThoughts = [
    "🔍 Analyzing trending conversations across platforms...",
    "📊 Processing engagement patterns and viral indicators...",
    "🎯 Identifying content opportunities for your brand...",
    "✨ Generating personalized viral content ideas...",
    "🚀 Optimizing recommendations for maximum reach...",
  ];

  // Cycle through chain of thought messages
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentThought((prev) => (prev + 1) % chainOfThoughts.length);
    }, 2500);
    return () => clearInterval(interval);
  }, [chainOfThoughts.length]);

  // Auto-refresh functionality - check for completion every 5 seconds
  useEffect(() => {
    if (!onCheckProgress) return;

    const autoRefreshInterval = setInterval(() => {
      setAutoRefreshCount((prev) => {
        const newCount = prev + 1;
        // Auto-refresh every 5 seconds, up to 24 times (2 minutes total)
        if (newCount <= 24) {
          onCheckProgress();
        }
        return newCount;
      });
    }, 5000); // Check every 5 seconds

    return () => clearInterval(autoRefreshInterval);
  }, [onCheckProgress]);

  // Generate quick insights from connected accounts (low ACU consumption)
  useEffect(() => {
    if (connectedAccounts && connectedAccounts.length > 0) {
      const insights = connectedAccounts.map((account) => {
        const platformEmojis = {
          facebook: "📘",
          instagram: "📸",
          twitter: "🐦",
          linkedin: "💼",
          youtube: "📹",
        };

        // Generate more meaningful insights based on platform and pages
        let insight = `Connected to ${account.platform}`;
        if (account.pages && account.pages.length > 0) {
          // If a specific page is selected, show info about that page
          if (selectedPageId) {
            const selectedPage = account.pages.find(
              (p) => p.id === selectedPageId,
            );
            if (selectedPage) {
              insight += ` • Analyzing "${selectedPage.pageName}" for viral opportunities`;
            } else {
              insight += ` • ${account.pages.length} page${account.pages.length > 1 ? "s" : ""} ready for analysis`;
            }
          } else {
            insight += ` • ${account.pages.length} page${account.pages.length > 1 ? "s" : ""} ready for analysis`;
          }
        } else {
          insight += ` • Ready to analyze engagement patterns`;
        }

        return {
          platform: account.platform,
          emoji:
            platformEmojis[account.platform as keyof typeof platformEmojis] ||
            "📱",
          insight,
          pagesCount: account.pages?.length || 0,
        };
      });
      setQuickInsights(insights);
    } else {
      // Show helpful message if no accounts connected
      setQuickInsights([
        {
          platform: "setup",
          emoji: "🔗",
          insight:
            "Connect social accounts to get personalized viral content insights",
          pagesCount: 0,
        },
      ]);
    }
  }, [connectedAccounts, selectedPageId]);

  return (
    <div className="space-y-6">
      {/* Chain of Thought Display */}
      <div className="text-center py-8">
        <div className="inline-flex items-center justify-center w-16 h-16 bg-primary/10 rounded-full mb-4">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
        </div>
        <motion.div
          key={currentThought}
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          className="text-lg font-medium text-foreground mb-2"
        >
          {chainOfThoughts[currentThought]}
        </motion.div>
        <p className="text-sm text-muted-foreground">
          {selectedPageId
            ? "Generating personalized insights for your selected page..."
            : "Generating advanced viral content insights..."}
        </p>
      </div>

      {/* Quick Insights from Connected Accounts */}
      {quickInsights.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-sm font-medium text-muted-foreground mb-3">
            📊{" "}
            {selectedPageId
              ? "Selected Page Analysis"
              : "Quick Account Overview"}
          </h3>
          <div className="grid gap-3">
            {quickInsights.map((insight, index) => (
              <motion.div
                key={insight.platform}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.2 }}
                className="flex items-center gap-3 p-3 bg-secondary/30 rounded-lg border"
              >
                <span className="text-lg">{insight.emoji}</span>
                <span className="text-sm text-muted-foreground">
                  {insight.insight}
                </span>
              </motion.div>
            ))}
          </div>
        </div>
      )}

      {/* Engagement Tips While Waiting */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 p-4 rounded-lg border">
        <h4 className="text-sm font-medium mb-2 flex items-center gap-2">
          <Lightbulb className="h-4 w-4" />
          💡 Pro Tip While You Wait
        </h4>
        <p className="text-sm text-muted-foreground">
          {selectedPageId
            ? "Our AI is analyzing your page's unique audience and engagement patterns to discover viral content opportunities tailored specifically for your brand."
            : "Viral content often combines trending topics with authentic brand voice. Our AI is analyzing thousands of successful posts to find the perfect opportunities for your brand."}
        </p>
      </div>

      {/* Progress Indicator */}
      <div className="flex items-center justify-center gap-2 pt-4">
        <div className="flex gap-1">
          {[0, 1, 2, 3, 4].map((i) => (
            <div
              key={i}
              className={`w-2 h-2 rounded-full transition-colors duration-300 ${
                i <= currentThought ? "bg-primary" : "bg-muted"
              }`}
            />
          ))}
        </div>
        <span className="text-xs text-muted-foreground ml-2">
          {Math.round(((currentThought + 1) / chainOfThoughts.length) * 100)}%
          Complete
        </span>
      </div>

      {/* Check Progress and Last Updated */}
      <div className="text-center space-y-3 pt-4 border-t">
        {lastUpdated && (
          <p className="text-xs text-muted-foreground">
            Started: {new Date(lastUpdated).toLocaleTimeString()}
          </p>
        )}
        {onCheckProgress && (
          <div className="space-y-2">
            <div className="flex flex-col items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={onCheckProgress}
                disabled={isChecking}
                className="gap-2"
              >
                {isChecking ? (
                  <RefreshCw className="h-4 w-4 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4" />
                )}
                {isChecking ? "Checking..." : "Check Progress"}
              </Button>
              {onRetryAnalysis && (
                <Button
                  size="sm"
                  onClick={onRetryAnalysis}
                  disabled={isChecking || isCleaningUp || isResetting}
                  className="gap-2"
                >
                  <RefreshCw
                    className={`h-4 w-4 ${isChecking ? "animate-spin" : ""}`}
                  />
                  Retry analysis
                </Button>
              )}
              <div className="flex items-center gap-2">
                {onCleanupStuckTasks && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={onCleanupStuckTasks}
                    disabled={isCleaningUp}
                  >
                    {isCleaningUp ? "Fixing…" : "Fix stuck"}
                  </Button>
                )}
                {onResetInsights && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={onResetInsights}
                    disabled={isResetting}
                  >
                    {isResetting ? "Resetting…" : "Force reset"}
                  </Button>
                )}
              </div>
            </div>
            <div className="space-y-1">
              <p className="text-xs text-muted-foreground">
                Click to manually check if insights are ready
              </p>
              {autoRefreshCount > 0 && (
                <p className="text-xs text-muted-foreground">
                  Auto-checking every 5s... ({autoRefreshCount}/24)
                </p>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function ViralPotentialTab({
  potentialPosts,
  onFeedback,
  onGenerate,
  isGenerating,
  generatingPostId,
  highlightedPostId,
  isLoadingInsights,
  insightsStatus,
}: {
  potentialPosts: ViralPotentialDataForProp;
  onFeedback: (
    post: any,
    feedbackType: "love" | "like" | "neutral" | "dislike",
  ) => void;
  onGenerate: (post: any) => void;
  isGenerating: boolean;
  generatingPostId: string | null;
  highlightedPostId?: string | null;
  isLoadingInsights?: boolean;
  insightsStatus?: string;
}) {
  const highlightedRef = useRef<HTMLDivElement>(null);
  const [activeTab, setActiveTab] = useState<
    "viral-content" | "trend-analysis" | "viral-ideas"
  >("viral-content");
  const [isAnalyzingTrends, setIsAnalyzingTrends] = useState(false);
  const [isAnalyzingBrand, setIsAnalyzingBrand] = useState(false);
  // Remove unused trendAnalysis state
  const [brandInsights, setBrandInsights] = useState<any>(null);
  const [isLoadingBrandInsights, setIsLoadingBrandInsights] = useState(false);
  const [brandInsightsError, setBrandInsightsError] = useState<string | null>(
    null,
  );
  const [realTimeTrends, setRealTimeTrends] = useState<any[]>([]);
  const [tiktokInstagramTrends, setTiktokInstagramTrends] = useState<any[]>([]);
  const [selectedTrends, setSelectedTrends] = useState<Set<string>>(new Set());
  const [savedInsights, setSavedInsights] = useState<any[]>([]);
  const [previousInsights, setPreviousInsights] = useState<any[]>([]);
  const [isLoadingPreviousInsights, setIsLoadingPreviousInsights] =
    useState(false);
  const [savingInsights, setSavingInsights] = useState<Set<string>>(new Set());
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [advancedFilters, setAdvancedFilters] = useState({
    riskTolerance: "medium" as "low" | "medium" | "high",
    trendAdoptionSpeed: "mainstream" as "early" | "mainstream" | "late",
    targetPlatforms: [] as string[],
    contentGoals: [] as string[],
    avoidTopics: [] as string[],
  });

  const { toast } = useToast();

  useEffect(() => {
    if (highlightedRef.current) {
      highlightedRef.current.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }, [highlightedPostId]);

  // Real-time trends mutation for background task (not streaming)
  const detectTrendsMutation = useMutation(
    apiClient.detectRealTimeTrendingTopics,
    {
      onSuccess: (data) => {
        if (data && data.success && data.taskId) {
          // Task has been queued successfully
          toast({
            title: "🔥 Analyzing trends",
            description:
              "Real-time trend analysis has started. Checking for results...",
          });
          // Start polling for task completion
          pollForTrendResults(data.taskId);
        } else {
          // Handle case where task was not queued successfully
          toast({
            title: "⚠️ Trend analysis issue",
            description:
              "The analysis may not have started properly. Please try again.",
            variant: "destructive",
          });
        }
      },
      onError: (error) => {
        console.error("Error fetching real-time trends:", error);
        const errorMessage =
          error instanceof Error ? error.message : "Failed to fetch trends";
        toast({
          title: "❌ Error fetching trends",
          description: `${errorMessage}. Please check your connection and try again.`,
          variant: "destructive",
        });
      },
    },
  );

  // Poll for trend analysis results
  const pollForTrendResults = async (taskId: string) => {
    let attempts = 0;
    const maxAttempts = 30; // 5 minutes max

    const poll = async (): Promise<void> => {
      if (attempts >= maxAttempts) {
        toast({
          title: "⏰ Analysis timeout",
          description:
            "The trend analysis is taking longer than expected. Please try refreshing.",
          variant: "destructive",
        });
        return;
      }

      try {
        const status = await apiClient.getTaskStatus({ taskId });

        if (status.status === "COMPLETED") {
          // Task completed successfully, refresh cached data
          await refetchCachedTrends();
          toast({
            title: "✅ Trends analysis completed",
            description: "Latest trending insights have been updated.",
          });
          return;
        } else if (status.status === "FAILED") {
          toast({
            title: "❌ Analysis failed",
            description:
              status.error?.message ||
              "The trend analysis failed. Please try again.",
            variant: "destructive",
          });
          return;
        }

        // Task still running, wait and try again
        attempts++;
        setTimeout(() => {
          poll().catch(console.error);
        }, 10000); // Wait 10 seconds
      } catch (error) {
        void error;
        console.error("Error polling for trend results:", error);
        attempts++;
        if (attempts < maxAttempts) {
          setTimeout(() => {
            poll().catch(console.error);
          }, 10000); // Wait 10 seconds and retry
        }
      }
    };

    poll();
  };

  const fetchRealTimeTrends = () => {
    // Clear existing trends when starting new detection
    if (!detectTrendsMutation.isLoading) {
      setRealTimeTrends([]); // Clear existing data to show loading state
      detectTrendsMutation.mutate({});
    } else {
      toast({
        title: "🔄 Analysis in progress",
        description: "Please wait for the current analysis to complete.",
      });
    }
  };

  // Query for cached viral trends with enhanced error handling
  const {
    data: cachedViralTrends,
    isLoading: isLoadingCachedTrends,
    error: cachedTrendsError,
    refetch: refetchCachedTrends,
  } = useQuery(["cachedViralTrends"], () => apiClient.getCachedViralTrends(), {
    staleTime: 30000, // 30 seconds
    cacheTime: 300000, // 5 minutes
    refetchOnMount: true, // Always check for cached data on mount
    retry: 3, // Retry failed requests up to 3 times
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff
    onError: (error) => {
      console.error("Error fetching cached viral trends:", error);
      toast({
        title: "⚠️ Error loading cached trends",
        description: "Using fallback data. Some features may be limited.",
        variant: "destructive",
      });
    },
  });

  // Query to check if refresh is needed with error handling
  const { data: refreshNeeded, error: refreshCheckError } = useQuery(
    ["shouldRefreshViralTrends"],
    () => apiClient.shouldRefreshViralTrends(),
    {
      staleTime: 60000, // 1 minute
      enabled: !!cachedViralTrends && !cachedTrendsError, // Only check after we have cached data and no errors
      retry: 2, // Fewer retries for refresh check
      onError: (error) => {
        console.error("Error checking refresh status:", error);
        // Don't show toast for refresh check errors as they're not critical
      },
    },
  );

  // Use cached viral trends data or fallback to real-time trends state
  const viralTrendsData = cachedViralTrends?.success
    ? cachedViralTrends?.data || []
    : realTimeTrends;

  // Show refresh suggestion if data is stale (but not if there are errors)
  const shouldShowRefreshSuggestion =
    !cachedTrendsError &&
    !refreshCheckError &&
    (cachedViralTrends?.isStale || refreshNeeded?.shouldRefresh);

  // Disable auto-refresh - only load cached data, don't trigger new analysis
  // Remove automatic trend fetching to prevent unwanted refreshes
  // Users must manually refresh to get new trends

  // Load previous insights when no real-time data is available
  useEffect(() => {
    const loadPreviousInsights = async () => {
      if (
        viralTrendsData.length === 0 &&
        !isLoadingCachedTrends &&
        !detectTrendsMutation.isLoading
      ) {
        setIsLoadingPreviousInsights(true);
        try {
          const history = await apiClient.getTrendAnalysisHistory();
          setPreviousInsights(history || []);
        } catch (error) {
          void error;
          console.error("Error loading previous insights:", error);
          setPreviousInsights([]);
        } finally {
          setIsLoadingPreviousInsights(false);
        }
      }
    };

    loadPreviousInsights();
  }, [
    viralTrendsData.length,
    isLoadingCachedTrends,
    detectTrendsMutation.isLoading,
  ]);

  // Remove the streaming data effect since we're not using streaming anymore
  // Data will be updated via refetchCachedTrends() when task completes

  // Fetch TikTok/Instagram trends
  const fetchTikTokInstagramTrends = async () => {
    setIsAnalyzingTrends(true);
    try {
      const task = await apiClient.detectTikTokInstagramTrends({});

      // Poll for task completion
      let attempts = 0;
      const maxAttempts = 30; // 5 minutes max

      const pollForResults = async (): Promise<void> => {
        if (attempts >= maxAttempts) {
          throw new Error("Task timeout - please try again");
        }

        const status = await apiClient.getTaskStatus({ taskId: task.id });

        if (status.status === "COMPLETED") {
          const results = await apiClient.getTikTokInstagramTrendsResults({
            taskId: task.id,
          });
          if (results && typeof results === "object") {
            const resultsObj = results as any;
            // Map the API response to match UI expectations
            const mappedTrends = [
              ...(Array.isArray(resultsObj.tiktokTrends)
                ? resultsObj.tiktokTrends
                : []
              ).map((trend: any) => ({
                ...trend,
                platform: "TikTok",
              })),
              ...(Array.isArray(resultsObj.instagramTrends)
                ? resultsObj.instagramTrends
                : []
              ).map((trend: any) => ({
                ...trend,
                platform: "Instagram",
              })),
              ...(Array.isArray(resultsObj.crossPlatformTrends)
                ? resultsObj.crossPlatformTrends
                : []
              ).map((trend: any) => ({
                ...trend,
                platform: "Cross-platform",
              })),
            ];
            setTiktokInstagramTrends(mappedTrends);
            toast({
              title: "📈 TikTok/Instagram trends analyzed successfully",
              description: "Latest social media trends have been updated.",
            });
          }
          return;
        } else if (status.status === "FAILED") {
          throw new Error(status.error?.message || "Task failed");
        }

        // Task still running, wait and try again
        attempts++;
        await new Promise((resolve) => setTimeout(resolve, 10000)); // Wait 10 seconds
        return pollForResults();
      };

      await pollForResults();
    } catch (error) {
      void error;
      console.error("Error fetching TikTok/Instagram trends:", error);
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error occurred";
      toast({
        title: "❌ Error analyzing TikTok/Instagram trends",
        description: `${errorMessage}. Please check your connection and try again.`,
        variant: "destructive",
      });
    } finally {
      setIsAnalyzingTrends(false);
    }
  };

  // Analyze trends for brand
  const analyzeTrendsForBrand = async () => {
    setIsAnalyzingBrand(true);
    try {
      const analysis = await apiClient.analyzeRealTimeTrendsForBrand({
        brandContext: brandInsights
          ? `Industry: ${brandInsights.industry || "Not specified"}\nNiche: ${brandInsights.niche || "Not specified"}`
          : undefined,
        industry: brandInsights?.industry || undefined,
        targetAudience: brandInsights?.targetAudience
          ? JSON.stringify(brandInsights.targetAudience)
          : undefined,
        contentGoals: ["engagement", "brand_awareness"],
        avoidTopics: ["controversial", "political"],
      });
      setBrandInsights(analysis);
      toast({
        title: "🎯 Brand trend analysis completed",
        description:
          "Personalized insights have been generated for your brand.",
      });
    } catch (error) {
      void error;
      console.error("Error analyzing trends for brand:", error);
      toast({
        title: "❌ Error analyzing trends for brand",
        description:
          "Failed to analyze trends for your brand. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzingBrand(false);
    }
  };

  // Get brand insights
  const getBrandInsights = async () => {
    setIsLoadingBrandInsights(true);
    setBrandInsightsError(null);
    try {
      const insights = await apiClient.getBrandContext();
      setBrandInsights(insights);
    } catch (error) {
      void error;
      console.error("Error fetching brand insights:", error);
      setBrandInsightsError(
        error instanceof Error
          ? error.message
          : "Failed to load brand insights",
      );
    } finally {
      setIsLoadingBrandInsights(false);
    }
  };

  // Load brand insights, saved insights, and TikTok/IG trends on component mount
  useEffect(() => {
    getBrandInsights();
    loadSavedInsights();
    loadExistingTikTokInstagramTrends();
  }, []); // Only run once on mount

  // Reload saved insights when they change externally
  useEffect(() => {
    const interval = setInterval(() => {
      loadSavedInsights().catch(console.error);
    }, 30000); // Reload every 30 seconds
    return () => clearInterval(interval);
  }, []);

  // Load saved insights
  const loadSavedInsights = async () => {
    try {
      const insights = await apiClient.listSavedInsights({
        type: "viral",
      });
      setSavedInsights(insights);
    } catch (error) {
      void error;
      console.error("Error loading saved insights:", error);
    }
  };

  // Load existing TikTok/IG trends
  const loadExistingTikTokInstagramTrends = async () => {
    try {
      const trends = await apiClient.getLatestTikTokInstagramTrends();
      if (trends && trends.success && trends.data && trends.data.length > 0) {
        setTiktokInstagramTrends(trends.data);
      }
    } catch (error) {
      void error;
      console.error("Failed to load existing TikTok/IG trends:", error);
    }
  };

  // Save insight
  const saveInsight = async (insight: any, title: string) => {
    const insightId = insight.id || insight.trendName || title;
    setSavingInsights((prev) => new Set(prev).add(insightId));
    try {
      const savedInsight = await apiClient.saveTrendInsight({
        type: "viral",
        data: insight,
        title,
      });

      // Immediately update local state to reflect the save
      setSavedInsights((prev) => [savedInsight, ...prev]);

      toast({
        title: "✅ Insight saved successfully",
        description: `"${title}" has been added to your saved insights.`,
      });
    } catch (error) {
      void error;
      console.error("Error saving insight:", error);
      toast({
        title: "❌ Error saving insight",
        description: "Failed to save the insight. Please try again.",
        variant: "destructive",
      });
    } finally {
      setSavingInsights((prev) => {
        const newSet = new Set(prev);
        newSet.delete(insightId);
        return newSet;
      });
    }
  };

  // Remove saved insight
  const removeSavedInsight = async (insightId: string) => {
    try {
      await apiClient.removeSavedInsight({ id: insightId });

      // Immediately update local state to reflect the removal
      setSavedInsights((prev) =>
        prev.filter((insight) => insight.id !== insightId),
      );

      toast({
        title: "🗑️ Insight removed successfully",
        description: "The insight has been removed from your saved collection.",
      });
    } catch (error) {
      void error;
      console.error("Error removing insight:", error);
      toast({
        title: "❌ Error removing insight",
        description: "Failed to remove the insight. Please try again.",
        variant: "destructive",
      });
    }
  };

  // Check if insight is saved
  const isInsightSaved = (insight: any) => {
    const insightId = insight.id || insight.trendName;
    return savedInsights.some(
      (saved) =>
        saved.data.id === insightId || saved.data.trendName === insightId,
    );
  };

  // Get saved insight ID
  const getSavedInsightId = (insight: any) => {
    const insightId = insight.id || insight.trendName;
    const saved = savedInsights.find(
      (saved) =>
        saved.data.id === insightId || saved.data.trendName === insightId,
    );
    return saved?.id;
  };

  // Refresh all data
  const refreshAllData = async () => {
    setIsRefreshing(true);
    try {
      // Run refreshes in parallel but handle errors individually
      const results = await Promise.allSettled([
        fetchRealTimeTrends(),
        getBrandInsights(),
        loadSavedInsights(),
        refetchCachedTrends(), // Also refresh cached trends
      ]);

      const failed = results.filter((r) => r.status === "rejected").length;
      const success = results.length - failed;

      if (success > 0) {
        toast({
          title: "🔄 Data refreshed",
          description:
            failed > 0
              ? `${success} of ${results.length} data sources refreshed successfully.`
              : "All data has been refreshed successfully.",
        });
      } else {
        toast({
          title: "❌ Refresh failed",
          description: "Failed to refresh data. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error) {
      void error;
      console.error("Error refreshing data:", error);
      toast({
        title: "❌ Error refreshing data",
        description: "Failed to refresh data. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsRefreshing(false);
    }
  };

  // Advanced trend matching
  const performIntelligentTrendMatching = async () => {
    if (selectedTrends.size === 0) {
      toast({
        title: "⚠️ Please select at least one trend to analyze",
        description:
          "Choose trends from the list below to get personalized insights.",
        variant: "destructive",
      });
      return;
    }

    setIsAnalyzingBrand(true);
    try {
      const selectedTrendData = [
        ...viralTrendsData,
        ...tiktokInstagramTrends,
      ].filter((trend) => selectedTrends.has(trend.id || trend.name));

      const brandContext = await apiClient.getBrandContext();

      const matchingResult = await apiClient.intelligentTrendBrandMatcher({
        trends: selectedTrendData,
        brandContext: brandContext,
        ...advancedFilters,
      });

      setBrandInsights(matchingResult.data);
      setActiveTab("viral-ideas");
      toast({
        title: "🧠 Intelligent trend matching completed",
        description: `Analyzed ${selectedTrends.size} trends and generated personalized insights.`,
      });
    } catch (error) {
      void error;
      console.error("Error performing intelligent trend matching:", error);
      toast({
        title: "❌ Error performing trend matching",
        description: "Failed to analyze the selected trends. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzingBrand(false);
    }
  };

  // Show engaging loading state only when insights are actively being generated
  if (
    isLoadingInsights ||
    insightsStatus === "GENERATING" ||
    insightsStatus === "PENDING"
  ) {
    return (
      <Card className="overflow-hidden mb-8">
        <CardHeader className="border-b bg-secondary/20">
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5" />
            Advanced Viral Potential
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <ViralContentLoadingState />
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Enhanced Header with Tabs */}
      <Card className="overflow-hidden">
        <CardHeader className="border-b bg-secondary/20">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              Advanced Viral Potential
            </CardTitle>
            <div className="flex flex-col sm:flex-row gap-2">
              <Button
                variant="default"
                size="sm"
                onClick={() => {
                  // Quick access to the most recent advanced viral potential
                  if (potentialPosts && potentialPosts.length > 0) {
                    setActiveTab("viral-content");
                    toast({
                      title: "📊 Latest Advanced Viral Potential",
                      description: `Showing ${potentialPosts.length} viral content recommendations.`,
                    });
                  } else {
                    toast({
                      title: "⚡ Generate Advanced Insights",
                      description:
                        "Click 'Refresh All' to generate new viral potential insights.",
                    });
                  }
                }}
                className="transition-all duration-200 hover:scale-105 h-10 px-4 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
              >
                {potentialPosts && potentialPosts.length > 0 ? (
                  <>
                    <Sparkles className="h-4 w-4 mr-2" />
                    <span className="hidden sm:inline">Latest Insights</span>
                    <span className="sm:hidden">Latest</span>
                  </>
                ) : (
                  <>
                    <TrendingUp className="h-4 w-4 mr-2" />
                    <span className="hidden sm:inline">Generate Insights</span>
                    <span className="sm:hidden">Generate</span>
                  </>
                )}
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={fetchTikTokInstagramTrends}
                disabled={isAnalyzingTrends || detectTrendsMutation.isLoading}
                className="transition-all duration-200 hover:scale-105 h-10 px-4"
              >
                {isAnalyzingTrends ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Search className="h-4 w-4 mr-2" />
                )}
                <span className="hidden sm:inline">
                  Analyze TikTok/IG Trends
                </span>
                <span className="sm:hidden">TikTok/IG</span>
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={analyzeTrendsForBrand}
                disabled={isAnalyzingBrand || detectTrendsMutation.isLoading}
                className="transition-all duration-200 hover:scale-105 h-10 px-4"
              >
                {isAnalyzingBrand ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Brain className="h-4 w-4 mr-2" />
                )}
                <span className="hidden sm:inline">Analyze for Brand</span>
                <span className="sm:hidden">Brand Analysis</span>
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={refreshAllData}
                disabled={isRefreshing || detectTrendsMutation.isLoading}
                className="transition-all duration-200 hover:scale-105 h-10 px-4"
              >
                {isRefreshing || detectTrendsMutation.isLoading ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                <span className="hidden sm:inline">Refresh All</span>
                <span className="sm:hidden">Refresh</span>
              </Button>
            </div>
          </div>
          <Tabs
            value={activeTab}
            onValueChange={(value) => setActiveTab(value as any)}
          >
            <TabsList className="grid w-full min-w-0 grid-cols-3 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 h-12 overflow-hidden">
              <TabsTrigger
                value="viral-content"
                className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm px-2 sm:px-4"
              >
                <Sparkles className="h-3 w-3 sm:h-4 sm:w-4" />
                <span className="hidden sm:inline">Viral Content</span>
                <span className="sm:hidden">Viral</span>
              </TabsTrigger>
              <TabsTrigger
                value="trend-analysis"
                className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm px-2 sm:px-4"
              >
                <TrendingUp className="h-3 w-3 sm:h-4 sm:w-4" />
                <span className="hidden sm:inline">Trend Analysis</span>
                <span className="sm:hidden">Trends</span>
              </TabsTrigger>
              <TabsTrigger
                value="viral-ideas"
                className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm px-2 sm:px-4"
              >
                <Brain className="h-3 w-3 sm:h-4 sm:w-4" />
                <span className="hidden sm:inline">Brand Insights</span>
                <span className="sm:hidden">Brand</span>
              </TabsTrigger>
            </TabsList>
          </Tabs>
        </CardHeader>
      </Card>

      {/* Tab Content */}
      {activeTab === "viral-content" && (
        <div className="space-y-6">
          {potentialPosts.map((post, index) => (
            <Card
              ref={post.id === highlightedPostId ? highlightedRef : null}
              key={index}
              className={`overflow-hidden ${
                post.id === highlightedPostId ? "ring-2 ring-primary" : ""
              }`}
            >
              <CardHeader className="border-b bg-secondary/20 p-4">
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-xl gradient-text">
                      {post.concept}
                    </CardTitle>
                    <div className="flex items-center gap-2 mt-2">
                      <Badge variant="default">
                        Virality Score: {post.viralityScore}/10
                      </Badge>
                      <Badge variant="outline">
                        Platforms: {post.targetPlatforms.join(", ")}
                      </Badge>
                    </div>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="p-6 space-y-4">
                <div>
                  <h4 className="font-semibold text-sm md:text-base mb-2 flex items-center">
                    <Sparkles className="h-4 w-4 mr-2 text-primary" />
                    Justification
                  </h4>
                  <p className="text-sm text-muted-foreground ml-6">
                    {post.justification}
                  </p>
                </div>
                <Separator />
                <div>
                  <h4 className="font-semibold text-sm md:text-base mb-2">
                    Hook
                  </h4>
                  <p className="text-xs md:text-sm text-muted-foreground italic break-words">
                    "{post.hook}"
                  </p>
                </div>
                <Separator />
                <div>
                  <h4 className="font-semibold text-sm md:text-base mb-2">
                    Body
                  </h4>
                  <div className="p-4 bg-muted/30 rounded-lg border border-muted/50">
                    <p className="text-xs md:text-sm whitespace-pre-wrap break-words">
                      {post.body}
                    </p>
                  </div>
                </div>
                <Separator />
                <div>
                  <h4 className="font-semibold text-sm md:text-base mb-2">
                    Call to Action
                  </h4>
                  <p className="text-sm text-muted-foreground break-words">
                    {post.callToAction}
                  </p>
                </div>
                <Separator />
                <div>
                  <h4 className="font-semibold text-sm md:text-base mb-2">
                    Hashtags
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {post.hashtags.map((tag, i) => (
                      <Badge key={i} variant="secondary">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </div>
                <Separator />
                <div>
                  <h4 className="font-semibold text-base mb-2">
                    Creative Direction
                  </h4>
                  <p className="text-xs md:text-sm text-muted-foreground italic break-words">
                    "{post.creativeDirection}"
                  </p>
                </div>
                <Separator />
                <div>
                  <h4 className="font-semibold text-base mb-2">
                    Optimization Tips
                  </h4>
                  <p className="text-sm text-muted-foreground break-words">
                    {post.optimizationTips}
                  </p>
                </div>
                {post.platformStrategies &&
                  Object.keys(post.platformStrategies).length > 0 && (
                    <>
                      <Separator />
                      <div>
                        <h4 className="font-semibold text-base mb-3 flex items-center">
                          <Share2 className="h-4 w-4 mr-2 text-primary" />
                          Platform-Specific Strategies
                        </h4>
                        <div className="space-y-4">
                          {Object.entries(post.platformStrategies).map(
                            ([platform, strategy]) => {
                              const getPlatformIcon = (platform: string) => {
                                switch (platform.toLowerCase()) {
                                  case "twitter":
                                    return <Twitter className="h-4 w-4" />;
                                  case "instagram":
                                    return <Instagram className="h-4 w-4" />;
                                  case "facebook":
                                    return <Facebook className="h-4 w-4" />;
                                  case "linkedin":
                                    return <Linkedin className="h-4 w-4" />;
                                  case "tiktok":
                                    return <Video className="h-4 w-4" />;
                                  default:
                                    return <Share2 className="h-4 w-4" />;
                                }
                              };

                              return (
                                <div
                                  key={platform}
                                  className="p-3 bg-muted/20 rounded-lg border border-muted/30"
                                >
                                  <div className="flex items-center gap-2 mb-2">
                                    {getPlatformIcon(platform)}
                                    <h5 className="font-medium text-sm capitalize">
                                      {platform}
                                    </h5>
                                    <Badge
                                      variant="outline"
                                      className="text-xs"
                                    >
                                      <Zap className="h-3 w-3 mr-1" />
                                      {platform} Strategy
                                    </Badge>
                                  </div>

                                  {strategy.contentAdaptation && (
                                    <div className="mb-2">
                                      <h6 className="text-xs font-medium text-muted-foreground mb-1">
                                        Content Adaptation:
                                      </h6>
                                      <p className="text-xs text-muted-foreground">
                                        {strategy.contentAdaptation}
                                      </p>
                                    </div>
                                  )}

                                  {strategy.hashtagStrategy && (
                                    <div className="mb-2">
                                      <h6 className="text-xs font-medium text-muted-foreground mb-1">
                                        Hashtag Strategy:
                                      </h6>
                                      <div className="flex flex-wrap gap-1">
                                        {strategy.hashtagStrategy
                                          .split(" ")
                                          .slice(0, 3)
                                          .map((tag: string, i: number) => (
                                            <Badge
                                              key={i}
                                              variant="secondary"
                                              className="text-xs"
                                            >
                                              {tag}
                                            </Badge>
                                          ))}
                                      </div>
                                    </div>
                                  )}

                                  {strategy.postingTiming && (
                                    <div className="mb-2">
                                      <h6 className="text-xs font-medium text-muted-foreground mb-1">
                                        Optimal Timing:
                                      </h6>
                                      <p className="text-xs text-muted-foreground flex items-center gap-1">
                                        <Clock className="h-3 w-3" />
                                        {strategy.postingTiming}
                                      </p>
                                    </div>
                                  )}

                                  {strategy.engagementTactics && (
                                    <div>
                                      <h6 className="text-xs font-medium text-muted-foreground mb-1">
                                        Engagement Tactics:
                                      </h6>
                                      <p className="text-xs text-muted-foreground">
                                        {strategy.engagementTactics}
                                      </p>
                                    </div>
                                  )}
                                </div>
                              );
                            },
                          )}
                        </div>
                      </div>
                    </>
                  )}
                {post.sources && post.sources.length > 0 && (
                  <>
                    <Separator />
                    <div>
                      <h4 className="font-semibold text-sm md:text-base mb-2">
                        Sources
                      </h4>
                      <div className="space-y-2">
                        {post.sources.map((source, i) => (
                          <div
                            key={i}
                            className="p-3 bg-muted/20 rounded-lg border border-muted/30"
                          >
                            <div className="flex items-start justify-between gap-3">
                              <div className="flex-1">
                                <a
                                  href={source.url}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-primary hover:underline font-medium text-sm"
                                >
                                  {source.title}
                                </a>

                                {source.platform && (
                                  <div className="flex items-center gap-2 mt-1">
                                    <Badge
                                      variant="outline"
                                      className="text-xs"
                                    >
                                      <Globe className="h-3 w-3 mr-1" />
                                      {source.platform}
                                    </Badge>
                                    {source.credibility && (
                                      <Badge
                                        variant={
                                          source.credibility === "high"
                                            ? "default"
                                            : source.credibility === "medium"
                                              ? "secondary"
                                              : "outline"
                                        }
                                        className="text-xs"
                                      >
                                        {source.credibility === "high" && (
                                          <CheckCircle className="h-3 w-3 mr-1 text-green-500" />
                                        )}
                                        {source.credibility === "medium" && (
                                          <AlertTriangle className="h-3 w-3 mr-1 text-yellow-500" />
                                        )}
                                        {source.credibility === "low" && (
                                          <AlertTriangle className="h-3 w-3 mr-1 text-red-500" />
                                        )}
                                        {source.credibility} credibility
                                      </Badge>
                                    )}
                                    {source.publishedDate && (
                                      <span className="text-xs text-muted-foreground flex items-center gap-1">
                                        <Clock className="h-3 w-3" />
                                        {new Date(
                                          source.publishedDate,
                                        ).toLocaleDateString()}
                                      </span>
                                    )}
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </>
                )}
              </CardContent>
              <CardFooter className="p-4 flex justify-between items-center">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onGenerate(post)}
                  disabled={isGenerating && generatingPostId === post.id}
                >
                  {isGenerating && generatingPostId === post.id ? (
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  ) : (
                    <Sparkles className="h-4 w-4 mr-2" />
                  )}
                  Generate Content
                </Button>
                <div className="flex gap-1">
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-7 w-7 hover:text-red-500"
                          onClick={() => onFeedback(post, "love")}
                        >
                          <Heart className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Love this!</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-7 w-7 hover:text-green-500"
                          onClick={() => onFeedback(post, "like")}
                        >
                          <ThumbsUp className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>I like this</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-7 w-7 hover:text-yellow-500"
                          onClick={() => onFeedback(post, "neutral")}
                        >
                          <Meh className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>It's okay</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-7 w-7 hover:text-gray-500"
                          onClick={() => onFeedback(post, "dislike")}
                        >
                          <ThumbsDown className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Not for me</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}

      {/* Trend Analysis Tab */}
      {activeTab === "trend-analysis" && (
        <div className="space-y-6">
          {/* Advanced Filters */}
          <Card className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Filter className="h-5 w-5" />
                Advanced Trend Filters
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4">
                  <div>
                    <Label className="text-sm font-medium">
                      Risk Tolerance
                    </Label>
                    <Select
                      value={advancedFilters.riskTolerance}
                      onValueChange={(value) =>
                        setAdvancedFilters((prev) => ({
                          ...prev,
                          riskTolerance: value as any,
                        }))
                      }
                    >
                      <SelectTrigger className="mt-2 h-12 md:h-10 text-base md:text-sm transition-all duration-200 active:scale-95">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="low">🛡️ Low Risk</SelectItem>
                        <SelectItem value="medium">⚖️ Medium Risk</SelectItem>
                        <SelectItem value="high">🚀 High Risk</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label className="text-sm font-medium">
                      Trend Adoption Speed
                    </Label>
                    <Select
                      value={advancedFilters.trendAdoptionSpeed}
                      onValueChange={(value) =>
                        setAdvancedFilters((prev) => ({
                          ...prev,
                          trendAdoptionSpeed: value as any,
                        }))
                      }
                    >
                      <SelectTrigger className="mt-2 h-12 md:h-10 text-base md:text-sm transition-all duration-200 active:scale-95">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="early">⚡ Early Adopter</SelectItem>
                        <SelectItem value="mainstream">
                          🎯 Mainstream
                        </SelectItem>
                        <SelectItem value="late">🐢 Late Adopter</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="flex flex-col sm:col-span-2 lg:col-span-1">
                    <Label className="text-sm font-medium mb-1">
                      Selected Trends
                    </Label>
                    <div className="flex items-center gap-2 mt-2 px-3 py-3 bg-background rounded-md border h-12 md:h-10 transition-all duration-200 active:scale-95">
                      <Hash className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm font-medium">
                        {selectedTrends.size}
                      </span>
                      <span className="text-xs text-muted-foreground">
                        trends selected
                      </span>
                    </div>
                  </div>
                  <div className="flex flex-col justify-end sm:col-span-2 lg:col-span-1">
                    <Button
                      onClick={performIntelligentTrendMatching}
                      disabled={
                        isAnalyzingBrand ||
                        selectedTrends.size === 0 ||
                        detectTrendsMutation.isLoading
                      }
                      className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 h-12 md:h-10 text-base md:text-sm transition-all duration-200 active:scale-95"
                    >
                      {isAnalyzingBrand ? (
                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Brain className="h-4 w-4 mr-2" />
                      )}
                      <span className="hidden sm:inline">
                        Intelligent Matching
                      </span>
                      <span className="sm:hidden">Match Trends</span>
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Real-time Trends - Only show if there are trends or currently loading */}
          {(viralTrendsData.length > 0 || detectTrendsMutation.isLoading) && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <TrendingUp className="h-5 w-5" />
                    Real-time Trending Insights
                  </div>
                  <div className="flex items-center gap-2">
                    {detectTrendsMutation.isLoading ? (
                      <Badge
                        variant="outline"
                        className="text-xs animate-pulse"
                      >
                        🔄 Analyzing
                      </Badge>
                    ) : (
                      <Badge variant="outline" className="text-xs">
                        🔴 Live
                      </Badge>
                    )}
                    <Badge variant="secondary" className="text-xs">
                      {viralTrendsData.length} trends
                    </Badge>
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {/* Show simple loading indicator when trends are being generated */}
                {detectTrendsMutation.isLoading && (
                  <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 rounded-lg border">
                    <div className="flex items-center gap-3">
                      <RefreshCw className="h-5 w-5 animate-spin text-blue-500" />
                      <div>
                        <h4 className="font-medium">
                          Generating Trending Insights
                        </h4>
                        <p className="text-sm text-muted-foreground">
                          This may take a few minutes. We'll update the results
                          automatically when ready.
                        </p>
                      </div>
                    </div>
                  </div>
                )}
                {/* Show refresh suggestion banner if data is stale */}
                {shouldShowRefreshSuggestion && viralTrendsData.length > 0 && (
                  <div className="mb-4 p-3 bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-yellow-600 dark:text-yellow-400" />
                        <span className="text-sm text-yellow-800 dark:text-yellow-200">
                          {refreshNeeded?.reason ||
                            "Trends data may be outdated"}
                        </span>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={fetchRealTimeTrends}
                        disabled={detectTrendsMutation.isLoading}
                        className="border-yellow-300 text-yellow-700 hover:bg-yellow-100 dark:border-yellow-700 dark:text-yellow-300 dark:hover:bg-yellow-950"
                      >
                        {detectTrendsMutation.isLoading ? (
                          <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
                        ) : (
                          <RefreshCw className="h-3 w-3 mr-1" />
                        )}
                        Refresh Now
                      </Button>
                    </div>
                  </div>
                )}

                {/* Show loading state when trends are being fetched */}
                {detectTrendsMutation.isLoading && !viralTrendsData.length && (
                  <div className="flex items-center justify-center py-12">
                    <div className="text-center space-y-3">
                      <RefreshCw className="h-8 w-8 animate-spin mx-auto text-primary" />
                      <p className="text-sm text-muted-foreground">
                        Detecting real-time trending insights...
                      </p>
                      <p className="text-xs text-muted-foreground">
                        This may take a few moments
                      </p>
                    </div>
                  </div>
                )}

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 max-w-full min-w-0 overflow-x-hidden">
                  {viralTrendsData.map((trend, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className={`p-4 border rounded-lg transition-all duration-200 hover:shadow-md cursor-pointer ${
                        selectedTrends.has(trend.id || trend.name)
                          ? "border-primary bg-primary/5"
                          : "hover:border-primary/50"
                      }`}
                      onClick={() => {
                        const newSelected = new Set(selectedTrends);
                        if (selectedTrends.has(trend.id || trend.name)) {
                          newSelected.delete(trend.id || trend.name);
                        } else {
                          newSelected.add(trend.id || trend.name);
                        }
                        setSelectedTrends(newSelected);
                      }}
                    >
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
                          <h4 className="font-semibold text-sm">
                            {trend.name}
                          </h4>
                        </div>
                        <Checkbox
                          checked={selectedTrends.has(trend.id || trend.name)}
                          onCheckedChange={(checked) => {
                            const newSelected = new Set(selectedTrends);
                            if (checked) {
                              newSelected.add(trend.id || trend.name);
                            } else {
                              newSelected.delete(trend.id || trend.name);
                            }
                            setSelectedTrends(newSelected);
                          }}
                          onClick={(e) => e.stopPropagation()}
                        />
                      </div>
                      <p className="text-xs text-muted-foreground mb-3 line-clamp-2">
                        {trend.description}
                      </p>
                      {trend.metrics && (
                        <div className="flex flex-wrap gap-1 mb-2">
                          <Badge variant="outline" className="text-xs">
                            📊 {trend.metrics.volume}
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            📈 {trend.metrics.growth}
                          </Badge>
                        </div>
                      )}
                      {trend.viralityScore && (
                        <div className="flex items-center gap-2 mt-2">
                          <div className="flex-1 bg-muted rounded-full h-2">
                            <div
                              className="bg-primary h-2 rounded-full transition-all duration-300"
                              style={{
                                width: `${(trend.viralityScore / 10) * 100}%`,
                              }}
                            />
                          </div>
                          <span className="text-xs font-medium">
                            {trend.viralityScore}/10
                          </span>
                        </div>
                      )}
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Previous Insights - Only show if there's meaningful data to display */}
          {viralTrendsData.length === 0 &&
            !detectTrendsMutation.isLoading &&
            previousInsights.length > 0 &&
            previousInsights.some((insight) => {
              const brandData = insight.brandAnalysis;
              return (
                brandData?.success &&
                brandData?.data &&
                Array.isArray(brandData.data) &&
                brandData.data.length > 0
              );
            }) && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <History className="h-5 w-5" />
                      Previous Trending Insights
                    </div>
                    <Badge variant="outline" className="text-xs">
                      {previousInsights.length} stored insights
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {isLoadingPreviousInsights ? (
                    <div className="flex items-center justify-center py-8">
                      <div className="text-center space-y-3">
                        <RefreshCw className="h-6 w-6 animate-spin mx-auto text-primary" />
                        <p className="text-sm text-muted-foreground">
                          Loading previous insights...
                        </p>
                      </div>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 max-w-full min-w-0 overflow-x-hidden">
                      {previousInsights
                        .filter((insight) => {
                          const brandData = insight.brandAnalysis;
                          // Check if we have valid brandAnalysis data with trendingTopics
                          return (
                            brandData?.success &&
                            brandData?.data &&
                            brandData.data.trendingTopics &&
                            Array.isArray(brandData.data.trendingTopics) &&
                            brandData.data.trendingTopics.length > 0
                          );
                        })
                        .slice(0, 6)
                        .map((insight, index) => {
                          // Extract the actual trend data from brandAnalysis
                          const brandData = insight.brandAnalysis;
                          const trendsData =
                            brandData?.data?.trendingTopics || [];

                          // Get the first trend if available, otherwise use fallback data
                          const trendData =
                            Array.isArray(trendsData) && trendsData.length > 0
                              ? {
                                  name: trendsData[0].topic || "Trending Topic",
                                  description:
                                    trendsData[0].context ||
                                    "Previous trend analysis from your history",
                                  viralityScore:
                                    trendsData[0].viralPotentialScore || 7,
                                  platforms: trendsData[0].platforms || [],
                                  contentAngles:
                                    trendsData[0].contentAngles || [],
                                }
                              : {
                                  name: insight.industry || "Trending Topic",
                                  description:
                                    "Previous trend analysis from your history",
                                  viralityScore: 7,
                                  platforms: [],
                                  contentAngles: [],
                                };

                          return (
                            <motion.div
                              key={insight.id || index}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: index * 0.1 }}
                              className="p-4 border rounded-lg hover:shadow-md transition-all duration-200 cursor-pointer hover:border-primary/50"
                              onClick={() => {
                                // Show the detailed insight data
                                if (
                                  brandData?.success &&
                                  trendsData.length > 0
                                ) {
                                  // Transform the trendingTopics data to match expected format
                                  const transformedTrends = trendsData.map(
                                    (trend: any) => ({
                                      id: trend.topic || `trend-${Date.now()}`,
                                      name: trend.topic || "Trending Topic",
                                      description:
                                        trend.context ||
                                        "No description available",
                                      viralityScore:
                                        trend.viralPotentialScore || 5,
                                      platforms: trend.platforms || [],
                                      contentAngles: trend.contentAngles || [],
                                      demographics: trend.demographics,
                                      timeSensitivity: trend.timeSensitivity,
                                      estimatedReach: trend.estimatedReach,
                                      platformSpecificRecommendations:
                                        trend.platformSpecificRecommendations,
                                    }),
                                  );

                                  // Set the trends data to show the historical insights
                                  setRealTimeTrends(transformedTrends);
                                  setActiveTab("trend-analysis");
                                  toast({
                                    title: "📊 Historical insights loaded",
                                    description: `Loaded ${transformedTrends.length} trends from ${new Date(insight.createdAt).toLocaleDateString()}`,
                                  });
                                } else {
                                  toast({
                                    title: "⚠️ No trend data available",
                                    description:
                                      "This insight doesn't contain detailed trend information.",
                                    variant: "destructive",
                                  });
                                }
                              }}
                            >
                              <div className="flex items-start justify-between mb-3">
                                <div className="flex items-center gap-2">
                                  <div className="w-2 h-2 bg-muted rounded-full" />
                                  <h4 className="font-semibold text-sm">
                                    {trendData.name}
                                  </h4>
                                </div>
                                <Badge variant="outline" className="text-xs">
                                  {insight.createdAt
                                    ? new Date(
                                        insight.createdAt,
                                      ).toLocaleDateString()
                                    : "Recent"}
                                </Badge>
                              </div>
                              <p className="text-xs text-muted-foreground mb-3 line-clamp-2">
                                {trendData.description}
                              </p>

                              {/* Show platforms if available */}
                              {trendData.platforms &&
                                trendData.platforms.length > 0 && (
                                  <div className="flex flex-wrap gap-1 mb-2">
                                    {trendData.platforms
                                      .slice(0, 3)
                                      .map((platform: string, i: number) => (
                                        <Badge
                                          key={i}
                                          variant="secondary"
                                          className="text-xs"
                                        >
                                          {platform}
                                        </Badge>
                                      ))}
                                    {trendData.platforms.length > 3 && (
                                      <Badge
                                        variant="secondary"
                                        className="text-xs"
                                      >
                                        +{trendData.platforms.length - 3} more
                                      </Badge>
                                    )}
                                  </div>
                                )}

                              <div className="flex items-center justify-between">
                                {trendData.viralityScore && (
                                  <div className="flex items-center gap-2 flex-1">
                                    <div className="flex-1 bg-muted rounded-full h-2">
                                      <div
                                        className="bg-muted-foreground h-2 rounded-full transition-all duration-300"
                                        style={{
                                          width: `${(trendData.viralityScore / 10) * 100}%`,
                                        }}
                                      />
                                    </div>
                                    <span className="text-xs font-medium">
                                      {trendData.viralityScore}/10
                                    </span>
                                  </div>
                                )}
                                {brandData?.success &&
                                  trendsData.length > 0 && (
                                    <Badge
                                      variant="secondary"
                                      className="text-xs ml-2"
                                    >
                                      {trendsData.length} trends
                                    </Badge>
                                  )}
                              </div>
                              <div className="mt-2 text-xs text-muted-foreground flex items-center gap-1">
                                <Clock className="h-3 w-3" />
                                Click to view details
                              </div>
                            </motion.div>
                          );
                        })}
                    </div>
                  )}
                  {previousInsights.length > 6 && (
                    <div className="mt-4 text-center">
                      <Button variant="outline" size="sm">
                        View All {previousInsights.length} Insights
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}

          {/* TikTok/Instagram Trends */}
          {tiktokInstagramTrends.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Video className="h-5 w-5" />
                    TikTok & Instagram Trends
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="text-xs">
                      🎵 Social
                    </Badge>
                    <Badge variant="secondary" className="text-xs">
                      {tiktokInstagramTrends.length} trends
                    </Badge>
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 max-w-full min-w-0 overflow-x-hidden">
                  {tiktokInstagramTrends.map((trend, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ delay: index * 0.1 }}
                      className={`p-4 border rounded-lg transition-all duration-200 hover:shadow-md cursor-pointer ${
                        selectedTrends.has(trend.id || trend.name)
                          ? "border-primary bg-primary/5"
                          : "hover:border-primary/50"
                      }`}
                      onClick={() => {
                        const newSelected = new Set(selectedTrends);
                        if (selectedTrends.has(trend.id || trend.name)) {
                          newSelected.delete(trend.id || trend.name);
                        } else {
                          newSelected.add(trend.id || trend.name);
                        }
                        setSelectedTrends(newSelected);
                      }}
                    >
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-gradient-to-r from-pink-500 to-purple-500 rounded-full animate-pulse" />
                          <h4 className="font-semibold text-sm">
                            {trend.name}
                          </h4>
                        </div>
                        <Checkbox
                          checked={selectedTrends.has(trend.id || trend.name)}
                          onCheckedChange={(checked) => {
                            const newSelected = new Set(selectedTrends);
                            if (checked) {
                              newSelected.add(trend.id || trend.name);
                            } else {
                              newSelected.delete(trend.id || trend.name);
                            }
                            setSelectedTrends(newSelected);
                          }}
                          onClick={(e) => e.stopPropagation()}
                        />
                      </div>
                      <p className="text-xs text-muted-foreground mb-3 line-clamp-2">
                        {trend.description}
                      </p>
                      <div className="flex flex-wrap gap-1 mb-2">
                        <Badge variant="secondary" className="text-xs">
                          {trend.platform === "TikTok" ? "🎵" : "📸"}{" "}
                          {trend.platform}
                        </Badge>
                        {trend.viralityScore && (
                          <Badge variant="outline" className="text-xs">
                            🔥 {trend.viralityScore}/10
                          </Badge>
                        )}
                      </div>
                      {trend.viralityScore && (
                        <div className="flex items-center gap-2 mt-2">
                          <div className="flex-1 bg-muted rounded-full h-2">
                            <div
                              className="bg-gradient-to-r from-pink-500 to-purple-500 h-2 rounded-full transition-all duration-300"
                              style={{
                                width: `${(trend.viralityScore / 10) * 100}%`,
                              }}
                            />
                          </div>
                          <span className="text-xs font-medium">
                            {trend.viralityScore}/10
                          </span>
                        </div>
                      )}
                    </motion.div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      )}

      {/* Brand Insights Tab */}
      {activeTab === "viral-ideas" && (
        <div className="space-y-6">
          {/* Saved Insights Section */}
          {savedInsights.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BookmarkCheck className="h-5 w-5" />
                  Saved Viral Potential Insights
                  <Badge variant="secondary" className="ml-2">
                    {savedInsights.length}
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {savedInsights.map((insight) => (
                    <div
                      key={insight.id}
                      className="p-4 border rounded-lg bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20"
                    >
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-semibold text-sm">
                          {insight.title}
                        </h4>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => removeSavedInsight(insight.id)}
                          className="h-8 w-8 p-0 hover:bg-red-100 hover:text-red-600 dark:hover:bg-red-950 dark:hover:text-red-400"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                      <div className="space-y-2">
                        {insight.data.brandAlignmentScore && (
                          <Badge variant="outline" className="text-xs">
                            Alignment: {insight.data.brandAlignmentScore}/10
                          </Badge>
                        )}
                        {insight.data.priority && (
                          <Badge
                            variant={
                              insight.data.priority === "high"
                                ? "destructive"
                                : insight.data.priority === "medium"
                                  ? "default"
                                  : "secondary"
                            }
                            className="text-xs ml-2"
                          >
                            {insight.data.priority} Priority
                          </Badge>
                        )}
                      </div>
                      {insight.data.opportunityAssessment?.marketGap && (
                        <p className="text-xs text-muted-foreground mt-2 line-clamp-2">
                          {insight.data.opportunityAssessment.marketGap}
                        </p>
                      )}
                      {insight.data.executionStrategy?.creativeAngles && (
                        <div className="flex flex-wrap gap-1 mt-2">
                          {insight.data.executionStrategy.creativeAngles
                            .slice(0, 3)
                            .map((angle: string, i: number) => (
                              <Badge
                                key={i}
                                variant="outline"
                                className="text-xs"
                              >
                                {angle}
                              </Badge>
                            ))}
                          {insight.data.executionStrategy.creativeAngles
                            .length > 3 && (
                            <Badge variant="outline" className="text-xs">
                              +
                              {insight.data.executionStrategy.creativeAngles
                                .length - 3}{" "}
                              more
                            </Badge>
                          )}
                        </div>
                      )}
                      <div className="flex items-center justify-between mt-3">
                        <span className="text-xs text-muted-foreground">
                          Saved:{" "}
                          {new Date(insight.createdAt).toLocaleDateString()}
                        </span>
                        {insight.data.riskAnalysis?.brandSafetyScore && (
                          <Badge variant="outline" className="text-xs">
                            Safety: {insight.data.riskAnalysis.brandSafetyScore}
                            /10
                          </Badge>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
          {isLoadingBrandInsights ? (
            <Card>
              <CardContent className="p-4 md:p-6">
                <div className="flex items-center justify-center space-x-2">
                  <RefreshCw className="h-6 w-6 animate-spin" />
                  <span>Loading brand insights...</span>
                </div>
              </CardContent>
            </Card>
          ) : brandInsightsError ? (
            <Card>
              <CardContent className="p-4 md:p-6">
                <div className="text-center space-y-4">
                  <div className="flex items-center justify-center space-x-2 text-destructive">
                    <AlertCircle className="h-6 w-6" />
                    <span>Error loading brand insights</span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {brandInsightsError}
                  </p>
                  <Button onClick={getBrandInsights} variant="outline">
                    <RefreshCw className="h-4 w-4 mr-2" />
                    Retry
                  </Button>
                </div>
              </CardContent>
            </Card>
          ) : brandInsights ? (
            <>
              {/* Matched Trends */}
              {brandInsights.matchedTrends && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="h-5 w-5" />
                      Intelligent Trend Matches
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {brandInsights.matchedTrends.map(
                        (match: any, index: number) => (
                          <div key={index} className="p-4 border rounded-lg">
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-semibold">
                                {match.trendName}
                              </h4>
                              <div className="flex gap-2">
                                <Badge variant="default">
                                  Alignment: {match.brandAlignmentScore}/10
                                </Badge>
                                <Badge
                                  variant={
                                    match.priority === "high"
                                      ? "destructive"
                                      : match.priority === "medium"
                                        ? "default"
                                        : "secondary"
                                  }
                                >
                                  {match.priority} Priority
                                </Badge>
                                {isInsightSaved(match) ? (
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() =>
                                      removeSavedInsight(
                                        getSavedInsightId(match)!,
                                      )
                                    }
                                    className="h-8 border-green-200 text-green-700 hover:bg-green-50 dark:border-green-800 dark:text-green-400 dark:hover:bg-green-950"
                                  >
                                    <BookmarkCheck className="h-4 w-4 mr-1" />
                                    Saved
                                  </Button>
                                ) : (
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() =>
                                      saveInsight(match, match.trendName)
                                    }
                                    disabled={savingInsights.has(
                                      match.id || match.trendName,
                                    )}
                                    className="h-8 hover:border-blue-200 hover:text-blue-700 hover:bg-blue-50 dark:hover:border-blue-800 dark:hover:text-blue-400 dark:hover:bg-blue-950 transition-all duration-200"
                                  >
                                    {savingInsights.has(
                                      match.id || match.trendName,
                                    ) ? (
                                      <>
                                        <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
                                        Saving...
                                      </>
                                    ) : (
                                      <>
                                        <Bookmark className="h-4 w-4 mr-1" />
                                        Save
                                      </>
                                    )}
                                  </Button>
                                )}
                              </div>
                            </div>

                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 mt-4">
                              <div>
                                <h5 className="font-medium mb-2">
                                  Opportunity Assessment
                                </h5>
                                <p className="text-sm text-muted-foreground">
                                  {match.opportunityAssessment?.marketGap}
                                </p>
                              </div>
                              <div>
                                <h5 className="font-medium mb-2">
                                  Execution Strategy
                                </h5>
                                <p className="text-sm text-muted-foreground">
                                  {match.executionStrategy?.timingFrequency}
                                </p>
                              </div>
                            </div>

                            <div className="mt-4">
                              <h5 className="font-medium mb-2">
                                Creative Angles
                              </h5>
                              <div className="flex flex-wrap gap-2">
                                {match.executionStrategy?.creativeAngles?.map(
                                  (angle: string, i: number) => (
                                    <Badge key={i} variant="outline">
                                      {angle}
                                    </Badge>
                                  ),
                                )}
                              </div>
                            </div>

                            <div className="mt-4">
                              <h5 className="font-medium mb-2">
                                Risk Analysis
                              </h5>
                              <div className="flex items-center gap-2">
                                <Badge variant="outline">
                                  Safety Score:{" "}
                                  {match.riskAnalysis?.brandSafetyScore}/10
                                </Badge>
                                <span className="text-sm text-muted-foreground">
                                  {match.timeToMarket}
                                </span>
                              </div>
                            </div>
                          </div>
                        ),
                      )}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Overall Strategy */}
              {brandInsights.overallStrategy && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Lightbulb className="h-5 w-5" />
                      Strategic Recommendations
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <h5 className="font-medium mb-2">
                          Resource Allocation
                        </h5>
                        <p className="text-sm text-muted-foreground">
                          {brandInsights.overallStrategy.resourceAllocation}
                        </p>
                      </div>
                      <div>
                        <h5 className="font-medium mb-2">
                          Timeline Recommendations
                        </h5>
                        <p className="text-sm text-muted-foreground">
                          {
                            brandInsights.overallStrategy
                              .timelineRecommendations
                          }
                        </p>
                      </div>
                      <div>
                        <h5 className="font-medium mb-2">
                          Long-term Brand Strategy
                        </h5>
                        <p className="text-sm text-muted-foreground">
                          {brandInsights.overallStrategy.longTermBrandStrategy}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Action Plan */}
              {brandInsights.actionPlan && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <CheckCircle className="h-5 w-5" />
                      Action Plan
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                      <div>
                        <h5 className="font-medium mb-2">Immediate Actions</h5>
                        <ul className="space-y-1">
                          {brandInsights.actionPlan.immediate?.map(
                            (action: string, i: number) => (
                              <li
                                key={i}
                                className="text-sm text-muted-foreground flex items-start gap-2"
                              >
                                <CheckCircle className="h-3 w-3 mt-1 text-green-500 flex-shrink-0" />
                                {action}
                              </li>
                            ),
                          )}
                        </ul>
                      </div>
                      <div>
                        <h5 className="font-medium mb-2">Short-term Actions</h5>
                        <ul className="space-y-1">
                          {brandInsights.actionPlan.shortTerm?.map(
                            (action: string, i: number) => (
                              <li
                                key={i}
                                className="text-sm text-muted-foreground flex items-start gap-2"
                              >
                                <Clock className="h-3 w-3 mt-1 text-yellow-500 flex-shrink-0" />
                                {action}
                              </li>
                            ),
                          )}
                        </ul>
                      </div>
                      <div>
                        <h5 className="font-medium mb-2">Long-term Actions</h5>
                        <ul className="space-y-1">
                          {brandInsights.actionPlan.longTerm?.map(
                            (action: string, i: number) => (
                              <li
                                key={i}
                                className="text-sm text-muted-foreground flex items-start gap-2"
                              >
                                <Calendar className="h-3 w-3 mt-1 text-blue-500 flex-shrink-0" />
                                {action}
                              </li>
                            ),
                          )}
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
            </>
          ) : (
            <Card>
              <CardContent className="p-6">
                <EmptyState
                  icon={<Brain className="h-12 w-12" />}
                  title="No Brand Insights Available"
                  description="Click 'Analyze for Brand' or perform 'Intelligent Matching' to generate brand-specific insights."
                />
              </CardContent>
            </Card>
          )}
        </div>
      )}
    </div>
  );
}

// Unified EmptyState component
function EmptyState({
  icon,
  title,
  description,
  children,
}: {
  icon?: React.ReactNode;
  title: string;
  description?: string;
  children?: React.ReactNode;
}) {
  return (
    <div className="empty-state">
      <div className="empty-state-icon">{icon}</div>
      <h3 className="text-lg font-medium mb-2">{title}</h3>
      {description && (
        <p className="text-muted-foreground max-w-sm">{description}</p>
      )}
      {children && (
        <div className="mt-4 flex flex-col gap-2 items-center w-full">
          {children}
        </div>
      )}
    </div>
  );
}

// Spinner
function LoadingSpinner({ className = "" }: { className?: string }) {
  return (
    <div className={`flex items-center justify-center ${className}`}>
      <RefreshCw className="h-10 w-10 animate-spin text-primary" />
    </div>
  );
}

import {
  BrowserRouter as Router,
  Routes,
  Route,
  Link,
  useNavigate,
  useLocation,
  NavLink,
  useParams,
} from "react-router-dom";
import {
  useQuery,
  useMutation,
  useQueryClient,
  QueryClient,
  QueryClientProvider,
} from "@tanstack/react-query";
import { apiClient, inferRPCOutputType, inferRPCInputType } from "~/client/api";
import {
  useAuth,
  useToast,
  encodeFileAsBase64DataURL,
  useRealtimeMutation,
} from "~/client/utils";

// Type definitions for brand signals with behavior insights
type BrandSignalsOutput = inferRPCOutputType<"getBrandSignals"> & {
  behaviorInsights?: {
    preferredSections: string[];
    peakActivityHours: number[];
    preferredContentTypes: string[];
    topResonatingTopics: string[];
    avgSessionDuration: number;
    contentConsumptionRate: number;
    interactionStyle: string;
    feedbackFrequency: number;
    totalEvents: number;
    averageResonance: number;
  };
};

// Query key factories for better invalidation control
const queryKeys = {
  accounts: () => ["accounts"] as const,
  connectedAccounts: () => ["connectedAccounts"] as const,
  userSettings: () => ["userSettings"] as const,
  brandSignals: () => ["brandSignals"] as const,
  pages: () => ["pages"] as const,
  contentPillars: () => ["contentPillars"] as const,
  generatedContent: (pillarId?: string) =>
    pillarId
      ? (["generatedContent", pillarId] as const)
      : (["generatedContent"] as const),
  uploadedDocuments: () => ["uploadedDocuments"] as const,
  brandGuidelines: () => ["brandGuidelines"] as const,
  viralThreadTags: () => ["viralThreadTags"] as const,
  contentTags: () => ["contentTags"] as const,
  comments: (pageId?: string) =>
    pageId ? (["comments", pageId] as const) : (["comments"] as const),
  dashboardStats: () => ["dashboardStats"] as const,
  viralThreads: () => ["viralThreads"] as const,
  viralThread: (id: string) => ["viralThread", id] as const,
  scheduledPosts: () => ["scheduledPosts"] as const,
  advancedInsights: (pageId?: string) =>
    pageId
      ? (["advancedInsights", pageId] as const)
      : (["advancedInsights"] as const),
  analyticsSummary: (platform?: string, pageId?: string) => {
    const keys = ["analyticsSummary", platform, pageId].filter(Boolean);
    return keys as readonly string[];
  },
  postingActivityHeatmap: (platform?: string, pageId?: string) => {
    const keys = ["postingActivityHeatmap", platform, pageId].filter(Boolean);
    return keys as readonly string[];
  },
  pageAnalytics: (platform?: string, pageId?: string) => {
    const keys = ["pageAnalytics", platform, pageId].filter(Boolean);
    return keys as readonly string[];
  },
};

// Custom hooks for query reuse optimization
function useConnectedAccounts() {
  return useQuery(
    queryKeys.connectedAccounts(),
    () => apiClient.getConnectedAccounts(),
    {
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
    },
  );
}

function useUserSettings() {
  return useQuery(queryKeys.userSettings(), () => apiClient.getUserSettings(), {
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });
}

function useBrandSignals() {
  return useQuery<BrandSignalsOutput>(
    queryKeys.brandSignals(),
    () => apiClient.getBrandSignals(),
    {
      staleTime: 10 * 60 * 1000, // 10 minutes
      cacheTime: 20 * 60 * 1000, // 20 minutes
    },
  );
}

function usePages() {
  return useQuery(queryKeys.pages(), () => apiClient.getPages(), {
    staleTime: 15 * 60 * 1000, // 15 minutes
    cacheTime: 30 * 60 * 1000, // 30 minutes
  });
}

function useContentPillars() {
  return useQuery(
    queryKeys.contentPillars(),
    () => apiClient.listContentPillars(),
    {
      staleTime: 10 * 60 * 1000, // 10 minutes
      cacheTime: 20 * 60 * 1000, // 20 minutes
    },
  );
}

function useGeneratedContent(pillarId?: string) {
  return useQuery(
    queryKeys.generatedContent(pillarId),
    () => apiClient.listGeneratedContent({ pillarId: pillarId || "" }),
    {
      enabled: !!pillarId,
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 15 * 60 * 1000, // 15 minutes
    },
  );
}

function useUploadedDocuments() {
  return useQuery(
    queryKeys.uploadedDocuments(),
    () => apiClient.listUploadedDocuments(),
    {
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 15 * 60 * 1000, // 15 minutes
    },
  );
}

// Hook for brand context and guidelines
function useBrandContext() {
  const { data: brandGuidelines } = useQuery(
    ["brandGuidelines"],
    apiClient.getBrandGuidelines,
    {
      staleTime: 300000,
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
    },
  );

  const { data: brandContext } = useQuery(
    ["brandContext"],
    apiClient.getBrandContext,
    {
      staleTime: 300000,
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
    },
  );

  const isSetup = !!(
    brandGuidelines?.brandWebsite ||
    (brandGuidelines?.socialLinks &&
      Object.keys(brandGuidelines.socialLinks).length > 0)
  );
  const hasAnalysis =
    !!brandContext && brandContext.analysisStatus === "COMPLETED";
  const isAnalyzing = brandContext?.analysisStatus === "RUNNING";
  const analysisFailed = brandContext?.analysisStatus === "FAILED";

  return {
    brandGuidelines,
    brandContext,
    analysisStatus: brandContext?.analysisStatus,
    isSetup,
    hasAnalysis,
    isAnalyzing,
    analysisFailed,
    setupCompleteness: {
      hasWebsite: !!brandGuidelines?.brandWebsite,
      hasSocialLinks: !!(
        brandGuidelines?.socialLinks &&
        Object.keys(brandGuidelines.socialLinks).length > 0
      ),
      hasBrandVoice: !!brandGuidelines?.brandVoice,
      hasAnalysis,
    },
  };
}

// Brand Setup Status Component
function BrandSetupIndicator({
  className = "",
  showDetails = false,
}: {
  className?: string;
  showDetails?: boolean;
}) {
  const brandContext = useBrandContext();
  const navigate = useNavigate();

  if (!brandContext.isSetup && !showDetails) {
    return (
      <div
        className={`flex items-center gap-2 p-3 bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-800 rounded-lg ${className}`}
      >
        <AlertTriangle className="h-4 w-4 text-amber-600 dark:text-amber-400" />
        <div className="flex-1 min-w-0">
          <p className="text-sm font-medium text-amber-800 dark:text-amber-200">
            Brand setup incomplete
          </p>
          <p className="text-xs text-amber-700 dark:text-amber-300">
            Add your website and social links for personalized insights
          </p>
        </div>
        <Button
          size="sm"
          variant="outline"
          onClick={() =>
            navigate("/settings", { state: { activeTab: "brand" } })
          }
          className="border-amber-300 text-amber-700 hover:bg-amber-100 dark:border-amber-700 dark:text-amber-300 dark:hover:bg-amber-900/30"
        >
          Setup
        </Button>
      </div>
    );
  }

  if (brandContext.isAnalyzing) {
    return (
      <div
        className={`flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg ${className}`}
      >
        <Loader className="h-4 w-4 text-blue-600 dark:text-blue-400 animate-spin" />
        <div className="flex-1 min-w-0">
          <p className="text-sm font-medium text-blue-800 dark:text-blue-200">
            Analyzing your brand
          </p>
          <p className="text-xs text-blue-700 dark:text-blue-300">
            AI is researching your website and social profiles...
          </p>
        </div>
      </div>
    );
  }

  if (brandContext.analysisFailed) {
    return (
      <div
        className={`flex items-center gap-2 p-3 bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-800 rounded-lg ${className}`}
      >
        <AlertCircle className="h-4 w-4 text-red-600 dark:text-red-400" />
        <div className="flex-1 min-w-0">
          <p className="text-sm font-medium text-red-800 dark:text-red-200">
            Brand analysis failed
          </p>
          <p className="text-xs text-red-700 dark:text-red-300">
            We couldn't analyze your brand. Try updating your links.
          </p>
        </div>
        <Button
          size="sm"
          variant="outline"
          onClick={() =>
            navigate("/settings", { state: { activeTab: "brand" } })
          }
          className="border-red-300 text-red-700 hover:bg-red-100 dark:border-red-700 dark:text-red-300 dark:hover:bg-red-900/30"
        >
          Fix
        </Button>
      </div>
    );
  }

  if (brandContext.hasAnalysis) {
    // Brand profile is active - no need to show notification
    return null;
  }

  return null;
}

// Brand Setup Progress Component
function BrandSetupProgress({ className }: { className?: string }) {
  const { setupCompleteness } = useBrandContext();
  const { hasWebsite, hasSocialLinks, hasBrandVoice, hasAnalysis } =
    setupCompleteness;
  const queryClient = useQueryClient();
  const { toast } = useToast();

  // Brand refresh mutation
  const refreshBrandMutation = useMutation(apiClient.refreshBrandAnalysis, {
    onSuccess: () => {
      // Invalidate all brand-related queries used by Discover and Create sections
      queryClient.invalidateQueries(["brandContext"]);
      queryClient.invalidateQueries(["brandGuidelines"]);
      queryClient.invalidateQueries(["brandSignals"]);
      queryClient.invalidateQueries(["brandIntelligence"]);
      queryClient.invalidateQueries(["contentRecommendations"]);
      queryClient.invalidateQueries(["smartRecommendations"]);
      queryClient.invalidateQueries(["trendingTopics"]);
      queryClient.invalidateQueries(["viralPotential"]);
      queryClient.invalidateQueries(["tikTokInstagramTrends"]);
      queryClient.invalidateQueries(["advancedInsights"]);
      queryClient.invalidateQueries(["generatedContent"]);
      queryClient.invalidateQueries(["contentPillars"]);
      queryClient.invalidateQueries(["audienceInsights"]);

      // Additional Create section brand-related queries
      queryClient.invalidateQueries(["smartContentSuggestions"]);
      queryClient.invalidateQueries(["brandVoiceProfile"]);
      queryClient.invalidateQueries(["viralPatterns"]);
      queryClient.invalidateQueries(["contentStudioAnalytics"]);
      queryClient.invalidateQueries(["contentStudioInsights"]);
      queryClient.invalidateQueries(["contentStudioDashboard"]);
      queryClient.invalidateQueries(["realTimePerformanceMetrics"]);
      queryClient.invalidateQueries(["recommendationAnalytics"]);
      queryClient.invalidateQueries(["optimizationInsights"]);

      toast({
        title: "Brand refresh started",
        description:
          "Your brand profile is being re-analyzed. This may take a few minutes.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to refresh brand",
        description:
          error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });

  const steps = [
    {
      id: "website",
      label: "Website URL",
      description: "Add your website URL to help analyze your brand",
      completed: hasWebsite,
      icon: Globe,
    },
    {
      id: "social",
      label: "Social Links",
      description: "Connect your social media accounts",
      completed: hasSocialLinks,
      icon: Share2,
    },
    {
      id: "voice",
      label: "Brand Voice",
      description: "Define your brand voice and tone",
      completed: hasBrandVoice,
      icon: MessageCircle,
    },
    {
      id: "analysis",
      label: "Brand Analysis",
      description: "Complete automated brand analysis",
      completed: hasAnalysis,
      icon: TrendingUp,
    },
  ];

  const completedSteps = steps.filter((step) => step.completed).length;
  const totalSteps = steps.length;
  const progressPercentage = (completedSteps / totalSteps) * 100;

  return (
    <Card className={className}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-lg">Brand Setup Progress</CardTitle>
            <CardDescription>
              Complete your brand setup to unlock personalized content
              recommendations
            </CardDescription>
          </div>
          <div className="flex items-center gap-3">
            <div className="text-right">
              <div className="text-2xl font-bold text-primary">
                {completedSteps}/{totalSteps}
              </div>
              <div className="text-sm text-muted-foreground">completed</div>
            </div>
            {completedSteps === totalSteps && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => refreshBrandMutation.mutate()}
                disabled={refreshBrandMutation.isLoading}
                className="flex items-center gap-2"
              >
                {refreshBrandMutation.isLoading ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4" />
                )}
                Refresh
              </Button>
            )}
          </div>
        </div>

        {/* Progress Bar */}
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>Progress</span>
            <span>{Math.round(progressPercentage)}%</span>
          </div>
          <Progress value={progressPercentage} className="h-2" />
        </div>
      </CardHeader>

      <CardContent>
        <div className="grid gap-3">
          {steps.map((step) => {
            const Icon = step.icon;
            return (
              <div
                key={step.id}
                className="flex items-center gap-3 p-3 rounded-lg border bg-card"
              >
                <div
                  className={`p-2 rounded-full ${
                    step.completed
                      ? "bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400"
                      : "bg-muted text-muted-foreground"
                  }`}
                >
                  {step.completed ? (
                    <CheckCircle className="h-4 w-4" />
                  ) : (
                    <Icon className="h-4 w-4" />
                  )}
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <h4
                      className={`font-medium ${
                        step.completed
                          ? "text-foreground"
                          : "text-muted-foreground"
                      }`}
                    >
                      {step.label}
                    </h4>
                    {step.completed && (
                      <Badge
                        variant="secondary"
                        className="text-xs bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400"
                      >
                        Complete
                      </Badge>
                    )}
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {step.description}
                  </p>
                </div>
              </div>
            );
          })}
        </div>

        {completedSteps === totalSteps && (
          <div className="mt-4 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
            <div className="flex items-center gap-2 text-green-700 dark:text-green-400">
              <CheckCircle className="h-5 w-5" />
              <span className="font-medium">Brand setup complete!</span>
            </div>
            <p className="text-sm text-green-600 dark:text-green-400 mt-1">
              Your brand analysis is complete. You can now get personalized
              content recommendations in the Discover and Create sections.
            </p>
          </div>
        )}

        {completedSteps < totalSteps && (
          <div className="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
            <div className="flex items-center gap-2 text-blue-700 dark:text-blue-400">
              <Info className="h-5 w-5" />
              <span className="font-medium">Complete your brand setup</span>
            </div>
            <p className="text-sm text-blue-600 dark:text-blue-400 mt-1">
              Finish setting up your brand profile to unlock personalized
              content recommendations and better insights.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

// Enhanced error logging utility
const logError = (
  error: Error | any,
  context: string,
  additionalInfo?: any,
) => {
  const errorData = {
    message: error?.message || "Unknown error",
    stack: error?.stack,
    context,
    timestamp: new Date().toISOString(),
    userAgent: navigator.userAgent,
    url: window.location.href,
    additionalInfo,
  };

  console.error(`[${context}] Error occurred:`, errorData);

  // Send error to analytics/monitoring service if available
  if (typeof window !== "undefined" && (window as any).gtag) {
    (window as any).gtag("event", "exception", {
      description: `${context}: ${error?.message}`,
      fatal: false,
    });
  }
};

// Error categorization utility
const categorizeError = (
  error: any,
): "network" | "validation" | "auth" | "server" | "client" | "unknown" => {
  if (!error) return "unknown";

  const message = error.message?.toLowerCase() || "";

  if (
    message.includes("fetch") ||
    message.includes("network") ||
    message.includes("connection")
  ) {
    return "network";
  }
  if (
    message.includes("unauthorized") ||
    message.includes("forbidden") ||
    message.includes("auth")
  ) {
    return "auth";
  }
  if (
    message.includes("validation") ||
    message.includes("invalid") ||
    message.includes("required")
  ) {
    return "validation";
  }
  if (error.status >= 500) {
    return "server";
  }
  if (error.status >= 400) {
    return "client";
  }

  return "unknown";
};

// User-friendly error messages
const getErrorMessage = (error: any, category: string): string => {
  const defaultMessages = {
    network:
      "Connection issue. Please check your internet connection and try again.",
    auth: "Authentication required. Please log in and try again.",
    validation: "Please check your input and try again.",
    server: "Server is temporarily unavailable. Please try again in a moment.",
    client: "There was an issue with your request. Please try again.",
    unknown: "An unexpected error occurred. Please try again.",
  };

  return (
    error?.userMessage ||
    defaultMessages[category as keyof typeof defaultMessages] ||
    defaultMessages.unknown
  );
};

// Enhanced error handling hook
const useErrorHandler = () => {
  const { toast } = useToast();

  const handleError = useCallback(
    (
      error: any,
      context: string,
      options?: {
        showToast?: boolean;
        retryFn?: () => void;
        fallbackMessage?: string;
      },
    ) => {
      const category = categorizeError(error);
      const message =
        options?.fallbackMessage || getErrorMessage(error, category);

      logError(error, context, { category });

      if (options?.showToast !== false) {
        toast({
          title: "Error",
          description: message,
          variant: "destructive",
          action: options?.retryFn ? (
            <Button variant="outline" size="sm" onClick={options.retryFn}>
              Retry
            </Button>
          ) : undefined,
        });
      }

      return { category, message };
    },
    [toast],
  );

  return { handleError };
};

// Enhanced error boundary component for handling React errors
class ErrorBoundary extends React.Component<
  { children: React.ReactNode; fallback?: React.ReactNode },
  { hasError: boolean; error?: Error; errorId?: string }
> {
  constructor(props: {
    children: React.ReactNode;
    fallback?: React.ReactNode;
  }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    const errorId = `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    return { hasError: true, error, errorId };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    logError(error, "React Error Boundary", {
      errorInfo,
      errorId: this.state.errorId,
      componentStack: errorInfo.componentStack,
    });
  }

  render() {
    if (this.state.hasError) {
      return (
        this.props.fallback || (
          <div className="flex items-center justify-center min-h-screen bg-background">
            <Card className="w-full max-w-md mx-4">
              <CardHeader>
                <CardTitle className="text-destructive">
                  Something went wrong
                </CardTitle>
                <CardDescription>
                  An error occurred while loading this page. Please try
                  refreshing.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button
                  onClick={() => window.location.reload()}
                  className="w-full"
                >
                  Refresh Page
                </Button>
              </CardContent>
            </Card>
          </div>
        )
      );
    }

    return this.props.children;
  }
}

// Auth-specific error boundary for handling authentication errors
class AuthErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean; error?: Error }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error("Auth error boundary caught an error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // If auth fails, show the landing page instead of crashing
      return <LandingPage />;
    }

    return this.props.children;
  }
}

import {
  Button,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Input,
  Label,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  Textarea,
  Badge,
  Avatar,
  AvatarFallback,
  AvatarImage,
  Separator,
  Alert,
  AlertDescription,
  AlertTitle,
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  CardFooter,
  Skeleton,
  Switch,
  Checkbox,
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuCheckboxItem,
  DropdownMenuItem,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
  Progress,
  Collapsible,
  CollapsibleTrigger,
  CollapsibleContent,
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  RadioGroup,
  RadioGroupItem,
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "~/components/ui";
import {
  Facebook,
  Instagram,
  Twitter,
  Youtube,
  Linkedin,
  MessageSquare,
  Settings,
  BarChart3,
  RefreshCw,
  Send,
  X,
  Check,
  Sparkles,
  Bell,
  Copy,
  PieChart,
  PenSquare,
  Trash2,
  TrendingUp,
  User,
  Users,
  XCircle,
  ThumbsUp,
  ThumbsDown,
  Heart,
  Meh,
  Download,
  Tag,
  Camera,
  Clock,
  ArrowRight,
  LayoutDashboard,
  Search,
  MessageCircle,
  Percent,
  TrendingDown,
  Flame,
  HelpCircle,
  Edit,
  Brain,
  Filter,
  Target,
  CheckCircle,
  Calendar,
  Video,
  Lightbulb,
  AlertCircle,
  Hash,
  Bookmark,
  BookmarkCheck,
  Code,
  Navigation,
  Zap,
  BarChart,
  ChevronLeft,
  ChevronRight,
  ChevronDown,
  ChevronUp,
  ArrowLeft,
  Crown,
  Star,
  AlertTriangle,
  History,
  Minus,
  Plus,
  FileText,
  Link2,
  LinkIcon,
  Rocket,
  CreditCard,
  SkipForward,
  Trophy,
  Loader,
  Loader2,
  ExternalLink,
  Shield,
  Menu,
  Share2,
  Activity,
  Bot,
  Award,
  CheckCheck,
  Globe,
  Info,
  UserCheck,
  Building2,
  Palette,
} from "lucide-react";
// Removed duplicate React import
import { AnimatePresence, motion } from "framer-motion";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
// import rehypeRaw from "rehype-raw";
import { format, formatDistanceToNow } from "date-fns";
import {
  TwitterShareButton,
  FacebookShareButton,
  LinkedinShareButton,
  TwitterIcon,
  FacebookIcon,
  LinkedinIcon,
} from "react-share";

// Create QueryClient instance
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 3,
      staleTime: 5 * 60 * 1000, // 5 minutes
      refetchOnWindowFocus: false,
    },
    mutations: {
      retry: 1,
    },
  },
});

// Pull-to-refresh hook for mobile
function usePullToRefresh(onRefresh: () => Promise<void>) {
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [pullDistance, setPullDistance] = useState(0);
  const [startY, setStartY] = useState<number | null>(null);
  const isMobile = useMediaQuery("(max-width: 768px)");

  const handleTouchStart = useCallback((e: TouchEvent) => {
    if (window.scrollY === 0 && e.touches[0]) {
      setStartY(e.touches[0].clientY);
    }
  }, []);

  const handleTouchMove = useCallback(
    (e: TouchEvent) => {
      if (startY === null || window.scrollY > 0 || !e.touches[0]) return;

      const currentY = e.touches[0].clientY;
      const distance = Math.max(0, currentY - startY);

      if (distance > 0) {
        e.preventDefault();
        setPullDistance(Math.min(distance * 0.5, 100));
      }
    },
    [startY],
  );

  const handleTouchEnd = useCallback(() => {
    if (pullDistance > 60 && !isRefreshing) {
      setIsRefreshing(true);
      onRefresh().finally(() => {
        setIsRefreshing(false);
      });
    }
    setPullDistance(0);
    setStartY(null);
  }, [pullDistance, isRefreshing, onRefresh]);

  useEffect(() => {
    if (!isMobile) return;

    document.addEventListener("touchstart", handleTouchStart, {
      passive: false,
    });
    document.addEventListener("touchmove", handleTouchMove, { passive: false });
    document.addEventListener("touchend", handleTouchEnd);

    return () => {
      document.removeEventListener("touchstart", handleTouchStart);
      document.removeEventListener("touchmove", handleTouchMove);
      document.removeEventListener("touchend", handleTouchEnd);
    };
  }, [isMobile, handleTouchStart, handleTouchMove, handleTouchEnd]);

  return { isRefreshing, pullDistance };
}

// Long press hook for context menus
function useLongPress(onLongPress: () => void, delay = 500) {
  const [isPressed, setIsPressed] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout>();

  const start = useCallback(() => {
    setIsPressed(true);
    timeoutRef.current = setTimeout(() => {
      onLongPress();
      setIsPressed(false);
    }, delay);
  }, [onLongPress, delay]);

  const stop = useCallback(() => {
    setIsPressed(false);
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
  }, []);

  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  return {
    isPressed,
    handlers: {
      onTouchStart: start,
      onTouchEnd: stop,
      onTouchCancel: stop,
      onMouseDown: start,
      onMouseUp: stop,
      onMouseLeave: stop,
    },
  };
}

// Contextual Ripple Helper Component
// Enhanced Ripple Contextual Helper with deeper integration capabilities

// Ripple Suggestion Helper Component - Currently unused
// function RippleSuggestionHelper({
//   context,
//   suggestion,
//   onAccept,
//   className = "",
// }: {
//   context: string;
//   suggestion: string;
//   onAccept: () => void;
//   className?: string;
// }) {
//   const [isVisible, setIsVisible] = useState(true);
//   const [isAnimating, setIsAnimating] = useState(false);

//   const handleAccept = () => {
//     setIsAnimating(true);
//     setTimeout(() => {
//       onAccept();
//       setIsVisible(false);
//     }, 150);
//   };

//   if (!isVisible) return null;

//   return (
//     <motion.div
//       initial={{ opacity: 0, y: 10, scale: 0.95 }}
//       animate={{
//         opacity: 1,
//         y: 0,
//         scale: isAnimating ? 0.95 : 1,
//       }}
//       exit={{ opacity: 0, y: -10, scale: 0.95 }}
//       className={`bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg p-3 shadow-sm ${className}`}
//     >
//       <div className="flex items-start gap-3">
//         <div className="w-6 h-6 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0 mt-0.5">
//           <Sparkles className="h-3 w-3 text-white" />
//         </div>
//         <div className="flex-1 min-w-0">
//           <div className="flex items-center gap-2 mb-1">
//             <span className="text-xs font-medium text-blue-700">Ripple AI</span>
//             <Badge
//               variant="outline"
//               className="text-xs px-1.5 py-0.5 h-4 bg-blue-50 text-blue-600 border-blue-200"
//             >
//               {context}
//             </Badge>
//           </div>
//           <p className="text-sm text-gray-700 leading-relaxed">{suggestion}</p>
//           <div className="flex items-center gap-2 mt-2">
//             <Button
//               size="sm"
//               onClick={handleAccept}
//               className="h-7 px-3 text-xs bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
//               disabled={isAnimating}
//             >
//               {isAnimating ? (
//                 <Loader className="h-3 w-3 animate-spin" />
//               ) : (
//                 "Try this"
//               )}
//             </Button>
//             <Button
//               size="sm"
//               variant="ghost"
//               onClick={() => setIsVisible(false)}
//               className="h-7 px-2 text-xs text-gray-500 hover:text-gray-700"
//             >
//               <X className="h-3 w-3" />
//             </Button>
//           </div>
//         </div>
//       </div>
//     </motion.div>
//   );
// }

// Onboarding Guide Types
type OnboardingStep = {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  content: React.ReactNode;
  action?: {
    label: string;
    onClick?: () => void;
    navigate?: string;
    variant?: "default" | "outline" | "secondary";
    icon?: React.ComponentType<any>;
  };
  optional?: boolean;
  completed?: boolean;
};

type OnboardingGuideProps = {
  isOpen: boolean;
  onClose: () => void;
  onComplete: () => void;
  currentUser: any;
};

// Comprehensive Onboarding Guide Component
function OnboardingGuide({
  isOpen,
  onClose,
  onComplete,
}: OnboardingGuideProps) {
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [completedSteps, setCompletedSteps] = useState(new Set<string>());
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [hasSeenWelcome, setHasSeenWelcome] = useState(false);
  const [showKeyboardHints, setShowKeyboardHints] = useState(false); // Disabled by default
  const [visitedSteps, setVisitedSteps] = useState(new Set<number>([0]));
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [isTablet, setIsTablet] = useState(
    window.innerWidth >= 768 && window.innerWidth < 1024,
  );
  const [reducedMotion, setReducedMotion] = useState(false);

  // Enhanced responsive design hook with performance optimization
  useEffect(() => {
    let timeoutId: NodeJS.Timeout;

    const handleResize = () => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        const width = window.innerWidth;
        setIsMobile(width < 768);
        setIsTablet(width >= 768 && width < 1024);
      }, 100); // Debounce resize events
    };

    // Check for reduced motion preference
    const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
    setReducedMotion(mediaQuery.matches);

    const handleMotionChange = (e: MediaQueryListEvent) => {
      setReducedMotion(e.matches);
    };

    window.addEventListener("resize", handleResize);
    mediaQuery.addEventListener("change", handleMotionChange);

    return () => {
      window.removeEventListener("resize", handleResize);
      mediaQuery.removeEventListener("change", handleMotionChange);
      clearTimeout(timeoutId);
    };
  }, []);
  const navigate = useNavigate();
  const { toast } = useToast();

  // Enhanced keyboard navigation with hints
  React.useEffect(() => {
    if (!isOpen) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      // Hide keyboard hints after first interaction
      if (showKeyboardHints) {
        setShowKeyboardHints(false);
      }

      switch (e.key) {
        case "ArrowRight":
        case "ArrowDown":
        case " ": // Spacebar for next
          e.preventDefault();
          handleNext();
          break;
        case "ArrowLeft":
        case "ArrowUp":
          e.preventDefault();
          handlePrevious();
          break;
        case "Escape":
          e.preventDefault();
          if (currentStepIndex === steps.length - 1) {
            markTourCompletedMutation.mutate();
          } else {
            onClose();
          }
          break;
        case "Enter":
          e.preventDefault();
          if (currentStep?.action) {
            handleActionClick(currentStep.action);
          } else {
            handleNext();
          }
          break;
        case "KeyS":
        case "s": // Skip optional step
          if (currentStep?.optional && !isTransitioning) {
            e.preventDefault();
            handleNext();
            toast({
              title: "Step skipped",
              description: `${currentStep.title} can be completed later in Settings.`,
            });
          }
          break;
        case "KeyH":
        case "h": // Toggle keyboard hints
          e.preventDefault();
          setShowKeyboardHints(!showKeyboardHints);
          break;
        default:
          // Handle number keys for direct navigation
          const num = parseInt(e.key);
          if (num >= 1 && num <= steps.length) {
            e.preventDefault();
            handleStepClick(num - 1);
          }
          break;
      }
    };

    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [isOpen, currentStepIndex, isTransitioning, showKeyboardHints]);

  // Auto-advance welcome step
  React.useEffect(() => {
    if (currentStepIndex === 0 && !hasSeenWelcome) {
      const timer = setTimeout(() => {
        setHasSeenWelcome(true);
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [currentStepIndex, hasSeenWelcome]);

  const { data: connectedAccounts } = useQuery(
    ["connectedAccounts"],
    apiClient.getConnectedAccounts,
    { enabled: isOpen },
  );

  const { data: brandGuidelines } = useQuery(
    ["brandGuidelines"],
    apiClient.getBrandGuidelines,
    { enabled: isOpen },
  );

  const queryClient = useQueryClient();

  const markTourCompletedMutation = useMutation(apiClient.markTourAsCompleted, {
    onSuccess: () => {
      toast({
        title: "🎉 Welcome to SocialWave!",
        description:
          "You're all set to revolutionize your social media management with AI.",
      });
      // Invalidate and refetch current user data
      queryClient.invalidateQueries({ queryKey: ["currentUser"] });
      onComplete();
    },
    onError: (error) => {
      toast({
        title: "Something went wrong",
        description: "Failed to complete the tour. Please try again.",
        variant: "destructive",
      });
      console.error("Failed to mark tour as completed:", error);
    },
  });

  const hasConnectedAccounts =
    connectedAccounts && connectedAccounts.length > 0;
  const hasBrandGuidelines = brandGuidelines && brandGuidelines.brandVoice;

  // Mark steps as completed based on user progress
  React.useEffect(() => {
    const newCompletedSteps = new Set<string>();
    if (hasConnectedAccounts) newCompletedSteps.add("connect-accounts");
    if (hasBrandGuidelines) newCompletedSteps.add("brand-setup");
    setCompletedSteps(newCompletedSteps);
  }, [hasConnectedAccounts, hasBrandGuidelines]);

  const steps: OnboardingStep[] = [
    {
      id: "welcome",
      title: "Welcome to SocialWave!",
      description: "Your AI-powered social media command center",
      icon: <Sparkles className="h-8 w-8 text-primary" />,
      content: (
        <div className="space-y-4">
          <div className="text-center">
            <motion.div
              className={`mx-auto bg-gradient-to-r from-primary to-primary/60 rounded-full flex items-center justify-center mb-4 ${
                isMobile ? "w-16 h-16" : "w-20 h-20"
              }`}
              initial={reducedMotion ? {} : { scale: 0, rotate: -180 }}
              animate={reducedMotion ? {} : { scale: 1, rotate: 0 }}
              transition={
                reducedMotion ? {} : { delay: 0.3, type: "spring", damping: 20 }
              }
            >
              <Sparkles
                className={`text-white ${isMobile ? "h-8 w-8" : "h-10 w-10"}`}
              />
            </motion.div>
            <motion.h3
              className={`font-bold mb-2 ${isMobile ? "text-xl" : "text-2xl"}`}
              initial={reducedMotion ? {} : { opacity: 0, y: 20 }}
              animate={reducedMotion ? {} : { opacity: 1, y: 0 }}
              transition={reducedMotion ? {} : { delay: 0.4 }}
            >
              Welcome to SocialWave!
            </motion.h3>
            <motion.p
              className={`text-muted-foreground mb-6 ${isMobile ? "text-sm" : "text-base"}`}
              initial={reducedMotion ? {} : { opacity: 0, y: 20 }}
              animate={reducedMotion ? {} : { opacity: 1, y: 0 }}
              transition={reducedMotion ? {} : { delay: 0.5 }}
            >
              Welcome to SocialWave - your comprehensive AI-powered social media
              command center. This quick tour will show you how to leverage AI
              for smarter engagement, viral content discovery, automated
              responses, advanced analytics, and intelligent content scheduling.
            </motion.p>
          </div>
          <motion.div
            className={`grid text-sm ${
              isMobile
                ? "grid-cols-1 gap-3"
                : isTablet
                  ? "grid-cols-2 gap-3"
                  : "grid-cols-3 gap-4"
            }`}
            initial={reducedMotion ? {} : { opacity: 0, y: 20 }}
            animate={reducedMotion ? {} : { opacity: 1, y: 0 }}
            transition={
              reducedMotion ? {} : { delay: 0.6, staggerChildren: 0.1 }
            }
          >
            <motion.div
              className="text-center p-4 bg-primary/5 rounded-lg hover:bg-primary/10 transition-colors duration-200"
              initial={reducedMotion ? {} : { opacity: 0, scale: 0.8 }}
              animate={reducedMotion ? {} : { opacity: 1, scale: 1 }}
              whileHover={reducedMotion ? {} : { scale: 1.02 }}
            >
              <MessageSquare className="h-6 w-6 mx-auto mb-2 text-primary" />
              <div className="font-semibold">AI Response Hub</div>
              <div className="text-muted-foreground">
                Intelligent comment management & auto-responses
              </div>
            </motion.div>
            <motion.div
              className="text-center p-4 bg-primary/5 rounded-lg hover:bg-primary/10 transition-colors duration-200"
              initial={reducedMotion ? {} : { opacity: 0, scale: 0.8 }}
              animate={reducedMotion ? {} : { opacity: 1, scale: 1 }}
              whileHover={reducedMotion ? {} : { scale: 1.02 }}
            >
              <TrendingUp className="h-6 w-6 mx-auto mb-2 text-primary" />
              <div className="font-semibold">Strategy Hub</div>
              <div className="text-muted-foreground">
                Real-time trend analysis & viral insights
              </div>
            </motion.div>
            <motion.div
              className="text-center p-4 bg-primary/5 rounded-lg hover:bg-primary/10 transition-colors duration-200"
              initial={reducedMotion ? {} : { opacity: 0, scale: 0.8 }}
              animate={reducedMotion ? {} : { opacity: 1, scale: 1 }}
              whileHover={reducedMotion ? {} : { scale: 1.02 }}
            >
              <PenSquare className="h-6 w-6 mx-auto mb-2 text-primary" />
              <div className="font-semibold">Generate & Repurpose</div>
              <div className="text-muted-foreground">
                AI content generation & scheduling
              </div>
            </motion.div>
          </motion.div>
        </div>
      ),
      completed: true,
    },
    {
      id: "connect-accounts",
      title: "Connect Your Social Accounts",
      description:
        "Link Facebook, Instagram, Twitter, LinkedIn, and YouTube to unlock AI-powered engagement management and analytics",
      icon: <Settings className="h-8 w-8 text-primary" />,
      content: (
        <div className="space-y-4">
          <div className="text-center mb-6">
            <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <Settings className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">
              Connect Your Social Accounts
            </h3>
            <p className="text-muted-foreground">
              Link Facebook, Instagram, Twitter, LinkedIn, and YouTube to unlock
              AI-powered engagement management and analytics.
            </p>
          </div>

          <div className="space-y-3">
            <div className="flex items-center gap-3 p-3 bg-secondary/50 rounded-lg">
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-bold">f</span>
              </div>
              <div className="flex-1">
                <div className="font-medium">Facebook & Instagram</div>
                <div className="text-sm text-muted-foreground">
                  Manage posts and comments
                </div>
              </div>
              <div
                className={`w-3 h-3 rounded-full ${hasConnectedAccounts ? "bg-green-500" : "bg-gray-300"}`}
              />
            </div>

            <div className="flex items-center gap-3 p-3 bg-secondary/50 rounded-lg">
              <div className="w-8 h-8 bg-blue-400 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-bold">𝕏</span>
              </div>
              <div className="flex-1">
                <div className="font-medium">Twitter / X</div>
                <div className="text-sm text-muted-foreground">
                  Track mentions and trends
                </div>
              </div>
              <div
                className={`w-3 h-3 rounded-full ${hasConnectedAccounts ? "bg-green-500" : "bg-gray-300"}`}
              />
            </div>

            <div className="flex items-center gap-3 p-3 bg-secondary/50 rounded-lg">
              <div className="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-bold">▶</span>
              </div>
              <div className="flex-1">
                <div className="font-medium">YouTube</div>
                <div className="text-sm text-muted-foreground">
                  Manage video comments
                </div>
              </div>
              <div
                className={`w-3 h-3 rounded-full ${hasConnectedAccounts ? "bg-green-500" : "bg-gray-300"}`}
              />
            </div>
          </div>

          {hasConnectedAccounts ? (
            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertTitle>Great job!</AlertTitle>
              <AlertDescription>
                You've connected {connectedAccounts?.length} account(s). You can
                always add more in Settings.
              </AlertDescription>
            </Alert>
          ) : (
            <Alert>
              <HelpCircle className="h-4 w-4" />
              <AlertTitle>Ready to connect?</AlertTitle>
              <AlertDescription>
                You can connect accounts now or skip this step and do it later
                in Settings.
              </AlertDescription>
            </Alert>
          )}
        </div>
      ),
      action: {
        label: hasConnectedAccounts ? "Accounts Connected" : "Connect Accounts",
        navigate: "/settings",
        variant: hasConnectedAccounts ? "outline" : "default",
        icon: hasConnectedAccounts ? CheckCircle : Settings,
      },
      completed: hasConnectedAccounts,
    },
    {
      id: "brand-setup",
      title: "Set Up Your Brand Voice & Context",
      description:
        "Define your brand's tone and add website/social links for AI analysis",
      icon: <MessageCircle className="h-8 w-8 text-primary" />,
      content: (
        <div className="space-y-4">
          <div className="text-center mb-6">
            <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <MessageCircle className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">
              Define Your Brand Voice & Context
            </h3>
            <p className="text-muted-foreground">
              Help our AI understand your brand's personality and context by
              adding your brand voice and website/social links. This powers
              personalized content in Discover and Create sections.
            </p>
          </div>

          <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 rounded-lg p-4 mb-4">
            <div className="flex items-center gap-2 mb-2">
              <Sparkles className="h-5 w-5 text-primary" />
              <span className="font-semibold text-primary">
                AI-Powered Brand Analysis
              </span>
            </div>
            <p className="text-sm text-muted-foreground mb-3">
              When you add your website and social media links, our AI
              automatically:
            </p>
            <ul className="text-sm space-y-1 text-muted-foreground">
              <li className="flex items-center gap-2">
                <div className="w-1.5 h-1.5 bg-green-500 rounded-full" />
                Analyzes your brand's communication style and values
              </li>
              <li className="flex items-center gap-2">
                <div className="w-1.5 h-1.5 bg-blue-500 rounded-full" />
                Identifies trending topics relevant to your industry
              </li>
              <li className="flex items-center gap-2">
                <div className="w-1.5 h-1.5 bg-purple-500 rounded-full" />
                Generates personalized content recommendations
              </li>
            </ul>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 bg-secondary/30 rounded-lg">
              <h4 className="font-semibold mb-2 flex items-center gap-2">
                <MessageCircle className="h-4 w-4" />
                Brand Voice
              </h4>
              <p className="text-sm text-muted-foreground">
                Professional, friendly, casual, authoritative, playful, etc.
              </p>
            </div>

            <div className="p-4 bg-secondary/30 rounded-lg">
              <h4 className="font-semibold mb-2 flex items-center gap-2">
                <ExternalLink className="h-4 w-4" />
                Website & Social Links
              </h4>
              <p className="text-sm text-muted-foreground">
                Your website and social media profiles for AI analysis
              </p>
            </div>

            <div className="p-4 bg-secondary/30 rounded-lg">
              <h4 className="font-semibold mb-2 flex items-center gap-2">
                <Target className="h-4 w-4" />
                Tone Priorities
              </h4>
              <p className="text-sm text-muted-foreground">
                What tone should your content prioritize?
              </p>
            </div>

            <div className="p-4 bg-secondary/30 rounded-lg">
              <h4 className="font-semibold mb-2 flex items-center gap-2">
                <ThumbsUp className="h-4 w-4" />
                Brand Guidelines
              </h4>
              <p className="text-sm text-muted-foreground">
                Phrases to use and avoid for consistent messaging
              </p>
            </div>
          </div>

          {hasBrandGuidelines ? (
            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertTitle>Brand voice configured!</AlertTitle>
              <AlertDescription>
                Your brand guidelines are set up. The AI will use these to match
                your communication style and analyze your brand context for
                personalized recommendations.
              </AlertDescription>
            </Alert>
          ) : (
            <Alert className="border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-950/20">
              <HelpCircle className="h-4 w-4 text-amber-600" />
              <AlertTitle className="text-amber-800 dark:text-amber-200">
                Highly Recommended
              </AlertTitle>
              <AlertDescription className="text-amber-700 dark:text-amber-300">
                Setting up your brand voice and adding your website/social links
                enables personalized content discovery and creation. This step
                significantly improves the quality of AI recommendations.
              </AlertDescription>
            </Alert>
          )}
        </div>
      ),
      action: {
        label: hasBrandGuidelines ? "Brand Voice Set" : "Set Up Brand Voice",
        navigate: "/settings",
        variant: hasBrandGuidelines ? "outline" : "default",
        icon: hasBrandGuidelines ? CheckCircle : MessageCircle,
      },
      optional: false,
      completed: !!hasBrandGuidelines,
    },
    {
      id: "response-hub",
      title: "Response Hub - Your Comment Inbox",
      description: "Manage and respond to comments with AI assistance",
      icon: <MessageSquare className="h-8 w-8 text-primary" />,
      content: (
        <div className="space-y-4">
          <div className="text-center mb-6">
            <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <MessageSquare className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">Response Hub</h3>
            <p className="text-muted-foreground">
              Your central command center for managing all social media comments
              and interactions.
            </p>
          </div>

          <div className="space-y-3">
            <div className="flex items-start gap-3 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg">
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                <span className="text-white text-sm">1</span>
              </div>
              <div>
                <div className="font-medium text-blue-900 dark:text-blue-100">
                  Fetch Comments
                </div>
                <div className="text-sm text-blue-700 dark:text-blue-200">
                  Pull in comments from all your connected accounts
                </div>
              </div>
            </div>

            <div className="flex items-start gap-3 p-3 bg-green-50 dark:bg-green-950/20 rounded-lg">
              <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                <span className="text-white text-sm">2</span>
              </div>
              <div>
                <div className="font-medium text-green-900 dark:text-green-100">
                  AI Analysis
                </div>
                <div className="text-sm text-green-700 dark:text-green-200">
                  Get sentiment analysis and response suggestions
                </div>
              </div>
            </div>

            <div className="flex items-start gap-3 p-3 bg-purple-50 dark:bg-purple-950/20 rounded-lg">
              <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                <span className="text-white text-sm">3</span>
              </div>
              <div>
                <div className="font-medium text-purple-900 dark:text-purple-100">
                  Smart Responses
                </div>
                <div className="text-sm text-purple-700 dark:text-purple-200">
                  Use AI-generated responses that match your brand voice
                </div>
              </div>
            </div>
          </div>

          <div className="p-4 bg-gradient-to-r from-primary/5 to-primary/10 rounded-lg">
            <div className="flex items-center gap-2 mb-2">
              <Sparkles className="h-5 w-5 text-primary" />
              <span className="font-semibold">Pro Tip</span>
            </div>
            <p className="text-sm">
              The AI learns from your editing patterns. The more you refine its
              suggestions, the better it gets at matching your style!
            </p>
          </div>
        </div>
      ),
      action: {
        label: "Explore Response Hub",
        navigate: "/engage",
        icon: MessageSquare,
      },
    },
    {
      id: "strategy-hub",
      title: "Strategy Hub - Discover Trends",
      description: "Find trending insights and viral content opportunities",
      icon: <TrendingUp className="h-8 w-8 text-primary" />,
      content: (
        <div className="space-y-4">
          <div className="text-center mb-6">
            <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <TrendingUp className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">Strategy Hub</h3>
            <p className="text-muted-foreground">
              Discover trending insights, analyze viral content potential, and
              get strategic insights for your brand.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 border rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Flame className="h-5 w-5 text-orange-500" />
                <span className="font-semibold">Trending Insights</span>
              </div>
              <p className="text-sm text-muted-foreground">
                Real-time trending insights from TikTok and Instagram, analyzed
                for your brand fit
              </p>
            </div>

            <div className="p-4 border rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Sparkles className="h-5 w-5 text-yellow-500" />
                <span className="font-semibold">Viral Potential</span>
              </div>
              <p className="text-sm text-muted-foreground">
                AI analysis of content formats and trends with high viral
                potential
              </p>
            </div>

            <div className="p-4 border rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Users className="h-5 w-5 text-blue-500" />
                <span className="font-semibold">Audience Insights</span>
              </div>
              <p className="text-sm text-muted-foreground">
                Deep analysis of your audience engagement patterns and
                preferences
              </p>
            </div>

            <div className="p-4 border rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Target className="h-5 w-5 text-green-500" />
                <span className="font-semibold">Content Strategy</span>
              </div>
              <p className="text-sm text-muted-foreground">
                Personalized content recommendations based on your brand and
                trends
              </p>
            </div>
          </div>

          <Alert>
            <Sparkles className="h-4 w-4" />
            <AlertTitle>AI-Powered Insights</AlertTitle>
            <AlertDescription>
              All trend analysis is personalized to your brand, ensuring
              recommendations align with your voice and audience.
            </AlertDescription>
          </Alert>
        </div>
      ),
      action: {
        label: "Explore Strategy Hub",
        navigate: "/discover",
        icon: TrendingUp,
      },
    },
    {
      id: "content-hub",
      title: "Content Hub - Create & Generate",
      description: "AI-powered content creation and media library",
      icon: <PenSquare className="h-8 w-8 text-primary" />,
      content: (
        <div className="space-y-4">
          <div className="text-center mb-6">
            <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <PenSquare className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">Content Hub</h3>
            <p className="text-muted-foreground">
              Your creative workspace for generating, editing, and managing all
              your social media content.
            </p>
          </div>

          <div className="space-y-3">
            <div className="flex items-center gap-3 p-3 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-950/20 dark:to-blue-900/20 rounded-lg">
              <div className="p-2 bg-blue-500 rounded-lg">
                <PenSquare className="h-4 w-4 text-white" />
              </div>
              <div className="flex-1">
                <div className="font-medium">Text Content</div>
                <div className="text-sm text-muted-foreground">
                  Generate posts, captions, and copy
                </div>
              </div>
            </div>

            <div className="flex items-center gap-3 p-3 bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-950/20 dark:to-purple-900/20 rounded-lg">
              <div className="p-2 bg-purple-500 rounded-lg">
                <Video className="h-4 w-4 text-white" />
              </div>
              <div className="flex-1">
                <div className="font-medium">Image Generation</div>
                <div className="text-sm text-muted-foreground">
                  Create custom visuals with AI
                </div>
              </div>
            </div>

            <div className="flex items-center gap-3 p-3 bg-gradient-to-r from-green-50 to-green-100 dark:from-green-950/20 dark:to-green-900/20 rounded-lg">
              <div className="p-2 bg-green-500 rounded-lg">
                <Video className="h-4 w-4 text-white" />
              </div>
              <div className="flex-1">
                <div className="font-medium">Video Scripts</div>
                <div className="text-sm text-muted-foreground">
                  Generate video content and scripts
                </div>
              </div>
            </div>

            <div className="flex items-center gap-3 p-3 bg-gradient-to-r from-orange-50 to-orange-100 dark:from-orange-950/20 dark:to-orange-900/20 rounded-lg">
              <div className="p-2 bg-orange-500 rounded-lg">
                <Calendar className="h-4 w-4 text-white" />
              </div>
              <div className="flex-1">
                <div className="font-medium">Content Scheduling</div>
                <div className="text-sm text-muted-foreground">
                  Plan and schedule your posts
                </div>
              </div>
            </div>
          </div>

          <div className="p-4 bg-gradient-to-r from-primary/5 to-primary/10 rounded-lg">
            <div className="flex items-center gap-2 mb-2">
              <Lightbulb className="h-5 w-5 text-primary" />
              <span className="font-semibold">Smart Features</span>
            </div>
            <p className="text-sm">
              Content is generated based on trending insights, your brand voice,
              and audience insights for maximum engagement.
            </p>
          </div>
        </div>
      ),
      action: {
        label: "Explore Content Hub",
        navigate: "/create",
        icon: PenSquare,
      },
    },
    {
      id: "navigation",
      title: "Navigation & Keyboard Shortcuts",
      description: "Master the SocialWave interface and shortcuts",
      icon: <Navigation className="h-8 w-8 text-primary" />,
      content: (
        <div className="space-y-4">
          <div className="text-center mb-6">
            <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <Navigation className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">Master Your Navigation</h3>
            <p className="text-muted-foreground">
              Learn the quickest ways to navigate SocialWave and boost your
              productivity.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-3">
              <h4 className="font-semibold flex items-center gap-2">
                <LayoutDashboard className="h-4 w-4" />
                Main Navigation
              </h4>
              <div className="space-y-2 text-sm">
                <div className="flex items-center justify-between p-2 bg-secondary/30 rounded">
                  <span className="flex items-center gap-2">
                    <LayoutDashboard className="h-3 w-3" />
                    Home
                  </span>
                  <span className="text-muted-foreground">
                    Dashboard overview
                  </span>
                </div>
                <div className="flex items-center justify-between p-2 bg-secondary/30 rounded">
                  <span className="flex items-center gap-2">
                    <MessageSquare className="h-3 w-3" />
                    Engage
                  </span>
                  <span className="text-muted-foreground">
                    Comment management
                  </span>
                </div>
                <div className="flex items-center justify-between p-2 bg-secondary/30 rounded">
                  <span className="flex items-center gap-2">
                    <PieChart className="h-3 w-3" />
                    Discover
                  </span>
                  <span className="text-muted-foreground">
                    Trends & insights
                  </span>
                </div>
                <div className="flex items-center justify-between p-2 bg-secondary/30 rounded">
                  <span className="flex items-center gap-2">
                    <PenSquare className="h-3 w-3" />
                    Create
                  </span>
                  <span className="text-muted-foreground">
                    Content generation
                  </span>
                </div>
              </div>
            </div>

            <div className="space-y-3">
              <h4 className="font-semibold flex items-center gap-2">
                <Zap className="h-4 w-4" />
                Keyboard Shortcuts
              </h4>
              <div className="space-y-2 text-sm">
                <div className="flex items-center justify-between p-2 bg-secondary/30 rounded">
                  <span>Quick Search</span>
                  <kbd className="px-2 py-1 bg-muted rounded text-xs">⌘ K</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-secondary/30 rounded">
                  <span>Navigate Pages</span>
                  <kbd className="px-2 py-1 bg-muted rounded text-xs">1-6</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-secondary/30 rounded">
                  <span>Close Dialogs</span>
                  <kbd className="px-2 py-1 bg-muted rounded text-xs">Esc</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-secondary/30 rounded">
                  <span>Refresh Data</span>
                  <kbd className="px-2 py-1 bg-muted rounded text-xs">⌘ R</kbd>
                </div>
              </div>
            </div>
          </div>

          <div className="p-4 bg-gradient-to-r from-primary/5 to-primary/10 rounded-lg">
            <div className="flex items-center gap-2 mb-2">
              <Sparkles className="h-5 w-5 text-primary" />
              <span className="font-semibold">Pro Navigation Tips</span>
            </div>
            <ul className="text-sm space-y-1">
              <li>• Hover over the sidebar to expand it and see full labels</li>
              <li>• Use ⌘+K to quickly search and navigate anywhere</li>
              <li>
                • The search function works across all content and features
              </li>
              <li>• Most dialogs and modals can be closed with the Esc key</li>
            </ul>
          </div>
        </div>
      ),
      action: {
        label: "Try Quick Search",
        onClick: () => {
          onClose();
          // Trigger the search function
          setTimeout(() => {
            const event = new KeyboardEvent("keydown", {
              key: "k",
              metaKey: true,
              bubbles: true,
            });
            document.dispatchEvent(event);
          }, 300);
        },
        icon: Search,
      },
    },
    {
      id: "feature-discovery",
      title: "Advanced Features & Tips",
      description: "Discover powerful features to maximize your productivity",
      icon: <Lightbulb className="h-8 w-8 text-primary" />,
      content: (
        <div className="space-y-4">
          <div className="text-center mb-6">
            <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <Lightbulb className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-xl font-bold mb-2">Advanced Features</h3>
            <p className="text-muted-foreground">
              Discover powerful features that will supercharge your social media
              management.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                  <Brain className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                </div>
                <span className="font-semibold">AI Learning</span>
              </div>
              <p className="text-sm text-muted-foreground mb-2">
                The AI learns from your editing patterns and feedback to provide
                increasingly personalized suggestions.
              </p>
              <div className="text-xs text-muted-foreground">
                💡 Edit AI responses to teach your preferred style
              </div>
            </Card>

            <Card className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg">
                  <Zap className="h-4 w-4 text-green-600 dark:text-green-400" />
                </div>
                <span className="font-semibold">Batch Operations</span>
              </div>
              <p className="text-sm text-muted-foreground mb-2">
                Select multiple comments or content pieces to perform bulk
                actions like hiding or tagging.
              </p>
              <div className="text-xs text-muted-foreground">
                💡 Use Shift+Click to select ranges
              </div>
            </Card>

            <Card className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg">
                  <Hash className="h-4 w-4 text-purple-600 dark:text-purple-400" />
                </div>
                <span className="font-semibold">Smart Tagging</span>
              </div>
              <p className="text-sm text-muted-foreground mb-2">
                Organize content and viral threads with custom tags for easy
                filtering and management.
              </p>
              <div className="text-xs text-muted-foreground">
                💡 Create tags for different campaigns or topics
              </div>
            </Card>

            <Card className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-orange-100 dark:bg-orange-900/30 rounded-lg">
                  <Calendar className="h-4 w-4 text-orange-600 dark:text-orange-400" />
                </div>
                <span className="font-semibold">Content Scheduling</span>
              </div>
              <p className="text-sm text-muted-foreground mb-2">
                Schedule your generated content to post at optimal times across
                different platforms.
              </p>
              <div className="text-xs text-muted-foreground">
                💡 AI suggests best posting times based on your audience
              </div>
            </Card>

            <Card className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-red-100 dark:bg-red-900/30 rounded-lg">
                  <TrendingUp className="h-4 w-4 text-red-600 dark:text-red-400" />
                </div>
                <span className="font-semibold">Trend Alerts</span>
              </div>
              <p className="text-sm text-muted-foreground mb-2">
                Get notified when new trends match your brand or when your
                content shows viral potential.
              </p>
              <div className="text-xs text-muted-foreground">
                💡 Set up brand-specific trend monitoring
              </div>
            </Card>

            <Card className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-yellow-100 dark:bg-yellow-900/30 rounded-lg">
                  <BarChart className="h-4 w-4 text-yellow-600 dark:text-yellow-400" />
                </div>
                <span className="font-semibold">Analytics Dashboard</span>
              </div>
              <p className="text-sm text-muted-foreground mb-2">
                Track engagement patterns, sentiment trends, and content
                performance with detailed analytics.
              </p>
              <div className="text-xs text-muted-foreground">
                💡 Export reports for stakeholder presentations
              </div>
            </Card>
          </div>

          <Alert>
            <Sparkles className="h-4 w-4" />
            <AlertTitle>Unlock More Features</AlertTitle>
            <AlertDescription>
              Many features become available as you use the platform more.
              Connect accounts, engage with comments, and generate content to
              unlock advanced capabilities.
            </AlertDescription>
          </Alert>
        </div>
      ),
      action: {
        label: "Explore Analytics",
        navigate: "/analytics",
        icon: BarChart,
      },
    },
    {
      id: "complete",
      title: "You're All Set!",
      description: "Ready to take your social media to the next level",
      icon: <CheckCircle className="h-8 w-8 text-green-500" />,
      content: (
        <div className="space-y-4">
          <div className="text-center mb-6">
            <div className="mx-auto w-20 h-20 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mb-4">
              <CheckCircle className="h-10 w-10 text-white" />
            </div>
            <h3 className="text-2xl font-bold mb-2">You're All Set! 🎉</h3>
            <p className="text-muted-foreground mb-6">
              Welcome to the future of social media management. You now have
              access to AI-powered tools that will transform how you engage with
              your audience.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card className="p-4">
              <div className="flex items-center gap-3 mb-2">
                <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                  <MessageSquare className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                </div>
                <span className="font-semibold">Next Steps</span>
              </div>
              <ul className="text-sm space-y-1 text-muted-foreground">
                <li>• Fetch your first comments</li>
                <li>• Explore trending insights</li>
                <li>• Generate your first content</li>
                <li>• Set up brand guidelines</li>
              </ul>
            </Card>

            <Card className="p-4">
              <div className="flex items-center gap-3 mb-2">
                <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg">
                  <HelpCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
                </div>
                <span className="font-semibold">Need Help?</span>
              </div>
              <ul className="text-sm space-y-1 text-muted-foreground">
                <li>• Use the search function (⌘K)</li>
                <li>• Check tooltips and hints</li>
                <li>• Explore each hub at your pace</li>
                <li>• The AI learns as you use it</li>
              </ul>
            </Card>
          </div>

          <Alert>
            <Sparkles className="h-4 w-4" />
            <AlertTitle>Pro Tip</AlertTitle>
            <AlertDescription>
              The more you use SocialWave, the smarter it gets. Your AI
              assistant learns from your preferences and feedback to provide
              increasingly personalized recommendations.
            </AlertDescription>
          </Alert>
        </div>
      ),
      action: {
        label: "🚀 Launch SocialWave",
        onClick: () => {
          markTourCompletedMutation.mutate();
        },
        icon: Rocket,
      },
      completed: true,
    },
  ];

  const currentStep = steps[currentStepIndex];

  if (!currentStep) return null;
  const progress = ((currentStepIndex + 1) / steps.length) * 100;

  const handleNext = () => {
    if (currentStepIndex < steps.length - 1 && !isTransitioning) {
      setIsTransitioning(true);
      const nextIndex = currentStepIndex + 1;
      setVisitedSteps((prev) => new Set([...prev, nextIndex]));
      setTimeout(() => {
        setCurrentStepIndex(nextIndex);
        setIsTransitioning(false);
      }, 150);
    }
  };

  const handlePrevious = () => {
    if (currentStepIndex > 0 && !isTransitioning) {
      setIsTransitioning(true);
      setTimeout(() => {
        setCurrentStepIndex(currentStepIndex - 1);
        setIsTransitioning(false);
      }, 150);
    }
  };

  const handleStepClick = (index: number) => {
    if (index !== currentStepIndex && !isTransitioning) {
      setIsTransitioning(true);
      setVisitedSteps((prev) => new Set([...prev, index]));
      setTimeout(() => {
        setCurrentStepIndex(index);
        setIsTransitioning(false);
      }, 150);
    }
  };

  const handleSkipOptional = () => {
    if (currentStep?.optional && !isTransitioning) {
      toast({
        title: "Step skipped",
        description: `${currentStep.title} can be completed later in Settings.`,
      });
      handleNext();
    }
  };

  const handleActionClick = (action: OnboardingStep["action"]) => {
    if (!action) return;
    if (action.navigate) {
      onClose();
      navigate(action.navigate);
    } else if (action.onClick) {
      action.onClick();
    }
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/60 backdrop-blur-md z-50 flex items-center justify-center p-4"
        onClick={(e) => {
          if (e.target === e.currentTarget) {
            // Allow clicking outside to close, but only if not on the final step
            if (currentStepIndex !== steps.length - 1) {
              onClose();
            }
          }
        }}
      >
        <motion.div
          initial={
            reducedMotion ? { opacity: 0 } : { scale: 0.9, opacity: 0, y: 20 }
          }
          animate={
            reducedMotion ? { opacity: 1 } : { scale: 1, opacity: 1, y: 0 }
          }
          exit={
            reducedMotion ? { opacity: 0 } : { scale: 0.9, opacity: 0, y: 20 }
          }
          transition={
            reducedMotion
              ? { duration: 0.2 }
              : { type: "spring", damping: 25, stiffness: 300 }
          }
          className={`bg-background rounded-2xl shadow-2xl border w-full overflow-hidden ${
            isMobile
              ? "mx-2 max-w-sm max-h-[90vh] rounded-xl"
              : isTablet
                ? "mx-4 max-w-3xl max-h-[92vh]"
                : "mx-auto max-w-5xl max-h-[95vh]"
          }`}
        >
          {/* Header */}
          <div
            className={`relative border-b bg-gradient-to-r from-primary/5 via-primary/3 to-transparent ${
              isMobile ? "p-4" : isTablet ? "p-6" : "p-8"
            }`}
          >
            <div
              className={`flex items-start justify-between ${
                isMobile ? "mb-4 flex-col gap-3" : "mb-6 flex-row"
              }`}
            >
              <motion.div
                className={`flex items-start flex-1 min-w-0 ${
                  isMobile ? "gap-3 w-full" : "gap-4"
                }`}
                initial={reducedMotion ? {} : { opacity: 0, x: -20 }}
                animate={reducedMotion ? {} : { opacity: 1, x: 0 }}
                transition={reducedMotion ? {} : { delay: 0.2 }}
              >
                <motion.div
                  className={`bg-primary/10 rounded-xl border border-primary/20 flex-shrink-0 ${
                    isMobile ? "p-2" : "p-3"
                  }`}
                  whileHover={reducedMotion ? {} : { scale: 1.05, rotate: 5 }}
                  whileTap={reducedMotion ? {} : { scale: 0.95 }}
                >
                  {currentStep.icon}
                </motion.div>
                <div className="space-y-1 min-w-0">
                  <motion.h2
                    className={`font-bold tracking-tight ${
                      isMobile ? "text-lg" : isTablet ? "text-xl" : "text-2xl"
                    }`}
                    initial={reducedMotion ? {} : { opacity: 0, y: 10 }}
                    animate={reducedMotion ? {} : { opacity: 1, y: 0 }}
                    transition={reducedMotion ? {} : { delay: 0.3 }}
                  >
                    {currentStep.title}
                  </motion.h2>
                  <motion.p
                    className={`text-muted-foreground leading-relaxed ${
                      isMobile ? "text-sm" : isTablet ? "text-base" : "text-lg"
                    }`}
                    initial={reducedMotion ? {} : { opacity: 0, y: 10 }}
                    animate={reducedMotion ? {} : { opacity: 1, y: 0 }}
                    transition={reducedMotion ? {} : { delay: 0.4 }}
                  >
                    {currentStep.description}
                  </motion.p>
                  {currentStep.optional && (
                    <motion.div
                      initial={reducedMotion ? {} : { opacity: 0, scale: 0.8 }}
                      animate={reducedMotion ? {} : { opacity: 1, scale: 1 }}
                      transition={reducedMotion ? {} : { delay: 0.5 }}
                    >
                      <Badge variant="secondary" className="mt-2">
                        Optional
                      </Badge>
                    </motion.div>
                  )}
                </div>
              </motion.div>
              <motion.div
                className={`flex items-center gap-2 flex-shrink-0 ${
                  isMobile ? "self-end" : ""
                }`}
                initial={reducedMotion ? {} : { opacity: 0, scale: 0.8 }}
                animate={reducedMotion ? {} : { opacity: 1, scale: 1 }}
                transition={reducedMotion ? {} : { delay: 0.3 }}
              >
                <Button
                  variant="ghost"
                  size={isMobile ? "sm" : "sm"}
                  onClick={() => {
                    if (currentStepIndex === steps.length - 1) {
                      markTourCompletedMutation.mutate();
                    } else {
                      onClose();
                    }
                  }}
                  className={`text-muted-foreground hover:text-foreground p-0 ${
                    isMobile ? "h-7 w-7" : "h-8 w-8"
                  }`}
                >
                  <X className={isMobile ? "h-3 w-3" : "h-4 w-4"} />
                </Button>
              </motion.div>
            </div>

            {/* Enhanced Progress Bar */}
            <motion.div
              className={isMobile ? "space-y-3" : "space-y-4"}
              initial={reducedMotion ? {} : { opacity: 0, y: 10 }}
              animate={reducedMotion ? {} : { opacity: 1, y: 0 }}
              transition={reducedMotion ? {} : { delay: 0.5 }}
            >
              <div
                className={`flex items-center text-sm ${
                  isMobile ? "flex-col gap-2" : "justify-between"
                }`}
              >
                <div className="flex items-center gap-2">
                  <motion.span
                    className="font-medium"
                    key={currentStepIndex}
                    initial={reducedMotion ? {} : { scale: 0.8 }}
                    animate={reducedMotion ? {} : { scale: 1 }}
                    transition={
                      reducedMotion ? {} : { type: "spring", stiffness: 300 }
                    }
                  >
                    Step {currentStepIndex + 1} of {steps.length}
                  </motion.span>
                  {completedSteps.has(currentStep.id) && (
                    <motion.div
                      initial={
                        reducedMotion
                          ? {}
                          : { opacity: 0, scale: 0.5, rotate: -180 }
                      }
                      animate={
                        reducedMotion ? {} : { opacity: 1, scale: 1, rotate: 0 }
                      }
                      transition={
                        reducedMotion ? {} : { type: "spring", stiffness: 200 }
                      }
                    >
                      <Badge variant="secondary" className="text-xs">
                        <CheckCircle className="h-3 w-3 mr-1" />
                        Completed
                      </Badge>
                    </motion.div>
                  )}
                </div>
                <motion.span
                  className="text-muted-foreground font-medium"
                  key={Math.round(progress)}
                  initial={reducedMotion ? {} : { opacity: 0.5 }}
                  animate={reducedMotion ? {} : { opacity: 1 }}
                >
                  {Math.round(progress)}% complete
                </motion.span>
              </div>
              <div className="relative">
                <div
                  className={`w-full bg-secondary/50 rounded-full overflow-hidden ${
                    isMobile ? "h-2" : "h-3"
                  }`}
                >
                  <motion.div
                    className="h-full bg-gradient-to-r from-primary via-primary/90 to-primary/80 rounded-full relative overflow-hidden"
                    initial={{ width: 0 }}
                    animate={{ width: `${progress}%` }}
                    transition={
                      reducedMotion
                        ? { duration: 0.3 }
                        : { duration: 0.8, ease: "easeOut" }
                    }
                  >
                    {/* Animated shimmer effect */}
                    {!reducedMotion && (
                      <motion.div
                        className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent"
                        initial={{ x: "-100%" }}
                        animate={{ x: "100%" }}
                        transition={{
                          duration: 2,
                          repeat: Infinity,
                          repeatType: "loop",
                          ease: "linear",
                        }}
                      />
                    )}
                  </motion.div>
                </div>
                {/* Glow effect */}
                {!reducedMotion && (
                  <div className="absolute inset-0 bg-gradient-to-r from-transparent via-primary/20 to-transparent rounded-full blur-sm" />
                )}
              </div>
            </motion.div>

            {/* Enhanced Step Indicators with Flow Lines */}
            <motion.div
              className="flex justify-center mt-4 sm:mt-6 gap-2 sm:gap-3 flex-wrap relative overflow-x-auto pb-2"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
            >
              {/* Flow connecting lines - hidden on small screens */}
              <div className="absolute top-5 left-1/2 transform -translate-x-1/2 hidden lg:block">
                <div className="flex items-center gap-3">
                  {steps.slice(0, -1).map((_, index) => {
                    const isCompleted = index < currentStepIndex;
                    return (
                      <motion.div
                        key={index}
                        className={`w-8 h-0.5 transition-colors duration-300 ${
                          isCompleted ? "bg-primary" : "bg-muted"
                        }`}
                        initial={{ scaleX: 0 }}
                        animate={{ scaleX: isCompleted ? 1 : 0.3 }}
                        transition={{ delay: index * 0.1 }}
                      />
                    );
                  })}
                </div>
              </div>

              {steps.map((step, index) => {
                const isCompleted =
                  completedSteps.has(step.id) || index < currentStepIndex;
                const isCurrent = index === currentStepIndex;
                const isVisited = visitedSteps.has(index);
                const isOptional = step.optional;

                return (
                  <Tooltip key={step.id}>
                    <TooltipTrigger asChild>
                      <motion.button
                        onClick={() => handleStepClick(index)}
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.95 }}
                        className={`relative w-10 h-10 sm:w-12 sm:h-12 rounded-full text-xs font-semibold transition-all duration-300 border-2 z-10 flex-shrink-0 ${
                          isCurrent
                            ? "bg-primary text-primary-foreground shadow-lg ring-4 ring-primary/20 border-primary"
                            : isCompleted
                              ? "bg-green-500 text-white shadow-md border-green-500"
                              : isVisited
                                ? "bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 border-blue-300 dark:border-blue-600"
                                : "bg-secondary text-muted-foreground hover:bg-secondary/80 hover:scale-105 border-muted"
                        }`}
                      >
                        {isCompleted && !isCurrent ? (
                          <CheckCircle className="h-4 w-4 sm:h-5 sm:w-5 mx-auto" />
                        ) : (
                          <span className="text-xs sm:text-sm">
                            {index + 1}
                          </span>
                        )}

                        {/* Optional step indicator */}
                        {isOptional && (
                          <div className="absolute -top-1 -right-1 w-4 h-4 bg-yellow-500 rounded-full flex items-center justify-center">
                            <span className="text-xs text-white font-bold">
                              ?
                            </span>
                          </div>
                        )}

                        {/* Current step pulse */}
                        {isCurrent && (
                          <motion.div
                            className="absolute inset-0 rounded-full border-2 border-primary"
                            animate={{
                              scale: [1, 1.2, 1],
                              opacity: [0.5, 0.8, 0.5],
                            }}
                            transition={{ duration: 2, repeat: Infinity }}
                          />
                        )}

                        {/* Visited step indicator */}
                        {isVisited && !isCurrent && !isCompleted && (
                          <div className="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-blue-500 rounded-full" />
                        )}
                      </motion.button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <div className="space-y-1">
                        <p className="text-sm font-medium flex items-center gap-2">
                          {step.title}
                          {isOptional && (
                            <Badge variant="secondary" className="text-xs">
                              Optional
                            </Badge>
                          )}
                        </p>
                        <p className="text-xs text-muted-foreground">
                          {step.description}
                        </p>
                        {isCurrent && (
                          <p className="text-xs text-primary font-medium">
                            Current step
                          </p>
                        )}
                        {isCompleted && (
                          <p className="text-xs text-green-600 font-medium">
                            ✓ Completed
                          </p>
                        )}
                        {isVisited && !isCurrent && !isCompleted && (
                          <p className="text-xs text-blue-600 font-medium">
                            Previously visited
                          </p>
                        )}
                      </div>
                    </TooltipContent>
                  </Tooltip>
                );
              })}
            </motion.div>
          </div>

          {/* Enhanced Content */}
          <div
            className={`overflow-y-auto ${
              isMobile
                ? "p-4 max-h-[45vh]"
                : isTablet
                  ? "p-6 max-h-[50vh]"
                  : "p-8 max-h-[55vh]"
            }`}
          >
            <AnimatePresence mode="wait">
              <motion.div
                key={currentStep.id}
                initial={
                  reducedMotion
                    ? { opacity: 0 }
                    : { opacity: 0, y: 20, scale: 0.98 }
                }
                animate={
                  reducedMotion
                    ? { opacity: 1 }
                    : { opacity: 1, y: 0, scale: 1 }
                }
                exit={
                  reducedMotion
                    ? { opacity: 0 }
                    : { opacity: 0, y: -20, scale: 0.98 }
                }
                transition={
                  reducedMotion
                    ? { duration: 0.2 }
                    : {
                        duration: 0.4,
                        ease: "easeOut",
                        staggerChildren: 0.1,
                      }
                }
                className={isMobile ? "space-y-4" : "space-y-6"}
              >
                {currentStep.content}
              </motion.div>
            </AnimatePresence>

            {/* Enhanced Completion celebration */}
            {currentStepIndex === steps.length - 1 && (
              <motion.div
                className={`text-center space-y-6 ${isMobile ? "py-6" : "py-8"}`}
                initial={
                  reducedMotion ? { opacity: 0 } : { opacity: 0, scale: 0.9 }
                }
                animate={
                  reducedMotion ? { opacity: 1 } : { opacity: 1, scale: 1 }
                }
                transition={
                  reducedMotion ? { delay: 0.2 } : { delay: 0.3, duration: 0.5 }
                }
              >
                <motion.div
                  className="relative inline-block"
                  animate={
                    reducedMotion
                      ? {}
                      : {
                          rotate: [0, 5, -5, 0],
                          scale: [1, 1.1, 1],
                        }
                  }
                  transition={
                    reducedMotion
                      ? {}
                      : {
                          duration: 2,
                          repeat: Infinity,
                          repeatType: "reverse",
                        }
                  }
                >
                  <div
                    className={`bg-green-100 dark:bg-green-900/20 rounded-full ${
                      isMobile ? "p-3" : "p-4"
                    }`}
                  >
                    <Trophy
                      className={`text-green-600 dark:text-green-400 ${
                        isMobile ? "h-8 w-8" : "h-12 w-12"
                      }`}
                    />
                  </div>
                  {/* Confetti effect */}
                  {!reducedMotion && (
                    <motion.div
                      className="absolute -inset-8 pointer-events-none"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: [0, 1, 0] }}
                      transition={{ duration: 3, repeat: Infinity, delay: 1 }}
                    >
                      {[...Array(8)].map((_, i) => (
                        <motion.div
                          key={i}
                          className="absolute w-2 h-2 bg-yellow-400 rounded-full"
                          style={{
                            left: `${20 + Math.random() * 60}%`,
                            top: `${20 + Math.random() * 60}%`,
                          }}
                          animate={{
                            y: [-20, 20, -20],
                            x: [
                              Math.random() * 20 - 10,
                              Math.random() * 20 - 10,
                            ],
                            rotate: [0, 360],
                            opacity: [0, 1, 0],
                          }}
                          transition={{
                            duration: 2,
                            repeat: Infinity,
                            delay: i * 0.2,
                          }}
                        />
                      ))}
                    </motion.div>
                  )}
                </motion.div>
                <div className={isMobile ? "space-y-1" : "space-y-2"}>
                  <motion.h3
                    className={`font-bold text-green-700 dark:text-green-300 ${
                      isMobile ? "text-xl" : "text-2xl"
                    }`}
                    initial={reducedMotion ? {} : { y: 10, opacity: 0 }}
                    animate={reducedMotion ? {} : { y: 0, opacity: 1 }}
                    transition={reducedMotion ? {} : { delay: 0.5 }}
                  >
                    Congratulations! 🎉
                  </motion.h3>
                  <motion.p
                    className={`text-muted-foreground ${
                      isMobile ? "text-base" : "text-lg"
                    }`}
                    initial={reducedMotion ? {} : { y: 10, opacity: 0 }}
                    animate={reducedMotion ? {} : { y: 0, opacity: 1 }}
                    transition={reducedMotion ? {} : { delay: 0.6 }}
                  >
                    You've completed the SocialWave onboarding tour.
                  </motion.p>
                  <motion.p
                    className={`text-muted-foreground ${
                      isMobile ? "text-xs" : "text-sm"
                    }`}
                    initial={reducedMotion ? {} : { y: 10, opacity: 0 }}
                    animate={reducedMotion ? {} : { y: 0, opacity: 1 }}
                    transition={reducedMotion ? {} : { delay: 0.7 }}
                  >
                    You're now ready to create engaging social media content!
                  </motion.p>
                </div>
                <motion.div
                  initial={
                    reducedMotion ? { opacity: 0 } : { y: 20, opacity: 0 }
                  }
                  animate={
                    reducedMotion ? { opacity: 1 } : { y: 0, opacity: 1 }
                  }
                  transition={reducedMotion ? { delay: 0.3 } : { delay: 0.8 }}
                >
                  <Button
                    onClick={() => markTourCompletedMutation.mutate()}
                    disabled={markTourCompletedMutation.isLoading}
                    size={isMobile ? "default" : "lg"}
                    className={`bg-green-600 hover:bg-green-700 text-white transition-all duration-200 ${
                      isMobile ? "px-6 text-sm" : "px-8"
                    }`}
                  >
                    {markTourCompletedMutation.isLoading ? (
                      <RefreshCw
                        className={`animate-spin mr-2 ${
                          isMobile ? "h-3 w-3" : "h-4 w-4"
                        }`}
                      />
                    ) : (
                      <Sparkles
                        className={`mr-2 ${isMobile ? "h-3 w-3" : "h-4 w-4"}`}
                      />
                    )}
                    Start Creating Content
                  </Button>
                </motion.div>
              </motion.div>
            )}
          </div>

          {/* Enhanced Footer with Smart Navigation */}
          <motion.div
            className={`border-t bg-gradient-to-r from-secondary/10 to-transparent ${
              isMobile ? "p-4" : isTablet ? "p-6" : "p-8"
            }`}
            initial={reducedMotion ? {} : { opacity: 0, y: 20 }}
            animate={reducedMotion ? {} : { opacity: 1, y: 0 }}
            transition={reducedMotion ? {} : { delay: 0.2 }}
          >
            <div
              className={`flex items-stretch justify-between gap-4 ${
                isMobile ? "flex-col" : "flex-row items-center"
              }`}
            >
              <div
                className={`flex items-center gap-2 ${
                  isMobile
                    ? "order-2 justify-center"
                    : "sm:gap-3 order-2 sm:order-1"
                }`}
              >
                <motion.div
                  whileHover={reducedMotion ? {} : { scale: 1.02 }}
                  whileTap={reducedMotion ? {} : { scale: 0.98 }}
                  className={isMobile ? "flex-1" : "sm:flex-none"}
                >
                  <Button
                    variant="outline"
                    onClick={handlePrevious}
                    disabled={currentStepIndex === 0 || isTransitioning}
                    className={`transition-all duration-200 ${
                      isMobile ? "w-full min-w-[80px]" : "sm:min-w-[100px]"
                    }`}
                  >
                    <motion.div
                      animate={
                        reducedMotion ? {} : { x: isTransitioning ? -5 : 0 }
                      }
                      transition={reducedMotion ? {} : { duration: 0.2 }}
                    >
                      <ArrowLeft
                        className={`mr-2 ${isMobile ? "h-3 w-3" : "h-4 w-4"}`}
                      />
                    </motion.div>
                    <span className={isMobile ? "" : "hidden sm:inline"}>
                      Previous
                    </span>
                    <span className={isMobile ? "hidden" : "sm:hidden"}>
                      Back
                    </span>
                  </Button>
                </motion.div>

                {/* Skip button for optional steps */}
                {currentStep.optional && (
                  <motion.div
                    whileHover={reducedMotion ? {} : { scale: 1.02 }}
                    whileTap={reducedMotion ? {} : { scale: 0.98 }}
                    className={isMobile ? "flex-1" : "sm:flex-none"}
                  >
                    <Button
                      variant="ghost"
                      onClick={handleSkipOptional}
                      disabled={isTransitioning}
                      className={`text-muted-foreground hover:text-foreground ${
                        isMobile ? "w-full" : "sm:w-auto"
                      }`}
                    >
                      <SkipForward
                        className={`mr-2 ${isMobile ? "h-3 w-3" : "h-4 w-4"}`}
                      />
                      <span className={isMobile ? "" : "hidden sm:inline"}>
                        Skip for now
                      </span>
                      <span className={isMobile ? "hidden" : "sm:hidden"}>
                        Skip
                      </span>
                    </Button>
                  </motion.div>
                )}
              </div>

              <div
                className={`flex items-stretch gap-2 order-1 sm:order-2 ${
                  isMobile ? "flex-col" : "flex-row items-center sm:gap-4"
                }`}
              >
                {/* Enhanced Progress indicator */}
                <div
                  className={`flex items-center gap-2 text-sm text-muted-foreground ${
                    isMobile
                      ? "justify-center order-2"
                      : "justify-center sm:justify-start"
                  }`}
                >
                  <motion.span
                    key={`${currentStepIndex + 1}-${steps.length}`}
                    initial={reducedMotion ? {} : { scale: 0.8, opacity: 0.5 }}
                    animate={reducedMotion ? {} : { scale: 1, opacity: 1 }}
                    transition={
                      reducedMotion ? {} : { type: "spring", stiffness: 300 }
                    }
                  >
                    {currentStepIndex + 1} of {steps.length}
                  </motion.span>
                  <div
                    className={`bg-secondary rounded-full overflow-hidden ${
                      isMobile ? "w-12 h-1.5" : "w-16 sm:w-20 h-2"
                    }`}
                  >
                    <motion.div
                      className="h-full bg-primary rounded-full"
                      initial={{ width: 0 }}
                      animate={{
                        width: `${((currentStepIndex + 1) / steps.length) * 100}%`,
                      }}
                      transition={
                        reducedMotion ? { duration: 0.2 } : { duration: 0.3 }
                      }
                    />
                  </div>
                </div>

                <div
                  className={`flex gap-2 order-1 ${
                    isMobile ? "w-full" : "sm:gap-4"
                  }`}
                >
                  {currentStep.action && (
                    <motion.div
                      whileHover={reducedMotion ? {} : { scale: 1.02 }}
                      whileTap={reducedMotion ? {} : { scale: 0.98 }}
                      className={isMobile ? "flex-1" : "sm:flex-none"}
                    >
                      <Button
                        variant={currentStep.action.variant || "secondary"}
                        onClick={() => handleActionClick(currentStep.action)}
                        disabled={markTourCompletedMutation.isLoading}
                        className={`transition-all duration-200 ${
                          isMobile ? "w-full text-sm" : "sm:min-w-[140px]"
                        }`}
                      >
                        {markTourCompletedMutation.isLoading ? (
                          <RefreshCw
                            className={`animate-spin mr-2 ${isMobile ? "h-3 w-3" : "h-4 w-4"}`}
                          />
                        ) : currentStep.action?.icon ? (
                          React.createElement(currentStep.action.icon, {
                            className: `mr-2 ${isMobile ? "h-3 w-3" : "h-4 w-4"}`,
                          })
                        ) : null}
                        <span className="truncate">
                          {currentStep.action.label}
                        </span>
                      </Button>
                    </motion.div>
                  )}

                  {currentStepIndex < steps.length - 1 ? (
                    <motion.div
                      whileHover={reducedMotion ? {} : { scale: 1.02 }}
                      whileTap={reducedMotion ? {} : { scale: 0.98 }}
                      className={isMobile ? "flex-1" : "sm:flex-none"}
                    >
                      <Button
                        onClick={handleNext}
                        disabled={isTransitioning}
                        className={`bg-primary hover:bg-primary/90 transition-all duration-200 ${
                          isMobile
                            ? "w-full text-sm min-w-[80px]"
                            : "sm:min-w-[100px]"
                        }`}
                      >
                        <span className={isMobile ? "" : "hidden sm:inline"}>
                          Next
                        </span>
                        <span className={isMobile ? "hidden" : "sm:hidden"}>
                          Continue
                        </span>
                        <motion.div
                          animate={
                            reducedMotion ? {} : { x: isTransitioning ? 5 : 0 }
                          }
                          transition={reducedMotion ? {} : { duration: 0.2 }}
                        >
                          <ArrowRight
                            className={`ml-2 ${isMobile ? "h-3 w-3" : "h-4 w-4"}`}
                          />
                        </motion.div>
                      </Button>
                    </motion.div>
                  ) : null}
                </div>
              </div>
            </div>

            {/* Enhanced Quick navigation tips */}
            {showKeyboardHints && !isMobile && (
              <motion.div
                initial={reducedMotion ? {} : { opacity: 0, height: 0 }}
                animate={
                  reducedMotion
                    ? { opacity: 1 }
                    : { opacity: 1, height: "auto" }
                }
                exit={
                  reducedMotion ? { opacity: 0 } : { opacity: 0, height: 0 }
                }
                className="mt-4 pt-4 border-t border-border/50"
              >
                <div
                  className={`flex items-center justify-center text-xs text-muted-foreground flex-wrap ${
                    isTablet ? "gap-3" : "gap-4 lg:gap-6"
                  }`}
                >
                  <motion.span
                    className="flex items-center gap-1"
                    whileHover={reducedMotion ? {} : { scale: 1.05 }}
                  >
                    <kbd className="px-1.5 py-0.5 bg-muted rounded text-xs font-mono">
                      Space
                    </kbd>
                    Next step
                  </motion.span>
                  {currentStep.optional && (
                    <motion.span
                      className="flex items-center gap-1"
                      whileHover={reducedMotion ? {} : { scale: 1.05 }}
                    >
                      <kbd className="px-1.5 py-0.5 bg-muted rounded text-xs font-mono">
                        S
                      </kbd>
                      Skip optional
                    </motion.span>
                  )}
                  <motion.span
                    className="flex items-center gap-1"
                    whileHover={reducedMotion ? {} : { scale: 1.05 }}
                  >
                    <kbd className="px-1.5 py-0.5 bg-muted rounded text-xs font-mono">
                      H
                    </kbd>
                    Hide hints
                  </motion.span>
                </div>
              </motion.div>
            )}
          </motion.div>
        </motion.div>

        {/* Background overlay for mobile */}
        {isMobile && (
          <motion.div
            className="fixed inset-0 bg-black/20 pointer-events-none z-40"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          />
        )}
      </motion.div>
    </AnimatePresence>
  );
}

const GoogleIcon = () => (
  <svg className="mr-2 h-4 w-4" viewBox="0 0 48 48">
    <path
      fill="#FFC107"
      d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12
      s5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24
      s8.955,20,20,20s20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"
    />
    <path
      fill="#FF3D00"
      d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657
      C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"
    />
    <path
      fill="#4CAF50"
      d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36
      c-5.222,0-9.655-3.417-11.27-8.169l-6.571,4.819C9.656,39.663,16.318,44,24,44z"
    />
    <path
      fill="#1976D2"
      d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571
      l6.19,5.238C39.712,34.462,44,28.756,44,20C44,22.659,43.862,21.35,43.611,20.083z"
    />
  </svg>
);

function PublicLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className="min-h-screen bg-background text-foreground flex flex-col">
      <header className="w-full px-6 py-4 flex justify-between items-center sticky top-0 bg-background/80 backdrop-blur-lg z-20 border-b">
        <div className="flex items-center gap-3">
          <Link to="/" className="flex items-center gap-2">
            <div className="h-8 w-8 flex items-center justify-center bg-primary rounded-lg text-primary-foreground shadow-md">
              <MessageSquare className="h-5 w-5" />
            </div>
            <span className="text-xl font-bold gradient-text">SocialWave</span>
          </Link>
        </div>
        <nav className="flex items-center gap-4">
          <Link
            to="/"
            className="text-sm font-medium text-muted-foreground hover:text-primary"
          >
            Home
          </Link>
          <Link
            to="/blog"
            className="text-sm font-medium text-muted-foreground hover:text-primary"
          >
            Blog
          </Link>
        </nav>
      </header>
      <main className="flex-1 container mx-auto py-8 px-4">{children}</main>
      <footer className="w-full bg-background border-t mt-auto py-8">
        <div className="container mx-auto text-center text-sm text-muted-foreground">
          &copy; {new Date().getFullYear()} SocialWave. All rights reserved.
        </div>
      </footer>
    </div>
  );
}

function BlogPage() {
  const { data: posts, isLoading } = useQuery({
    queryKey: ["publishedBlogPosts"],
    queryFn: () => apiClient.listPublishedBlogPosts(),
  });

  const [origin, setOrigin] = React.useState("");
  React.useEffect(() => {
    if (typeof window !== "undefined") {
      setOrigin(window.location.origin);
    }
  }, []);

  return (
    <div>
      <MetaTags
        title="Blog | SocialWave"
        description="Latest articles, tips, and insights on social media management, AI marketing, and content strategy from the SocialWave team."
        keywords="social media blog, AI marketing tips, content strategy, social media trends"
        ogImage={posts?.[0]?.featuredImageUrl || undefined}
        canonicalUrl={`${origin}/blog`}
      />
      {origin && (
        <>
          <StructuredData
            data={{
              "@context": "https://schema.org",
              "@type": "WebSite",
              name: "SocialWave",
              url: origin,
            }}
          />
          {posts && (
            <StructuredData
              data={{
                "@context": "https://schema.org",
                "@type": "CollectionPage",
                name: "SocialWave Blog",
                description:
                  "Latest articles, tips, and insights on social media management, AI marketing, and content strategy from the SocialWave team.",
                url: `${origin}/blog`,
                mainEntity: {
                  "@type": "ItemList",
                  itemListElement: posts.map((post, index) => ({
                    "@type": "ListItem",
                    position: index + 1,
                    url: `${origin}/blog/${post.slug}`,
                    name: post.title,
                  })),
                },
                publisher: {
                  "@type": "Organization",
                  name: "SocialWave",
                },
              }}
            />
          )}
        </>
      )}
      <h1 className="text-4xl font-bold mb-4">SocialWave Blog</h1>
      <p className="text-lg text-muted-foreground mb-8">
        Insights, trends, and tips on mastering social media with AI.
      </p>
      {isLoading ? (
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {/* Enhanced Navigation Tabs with Smart Interactions */}
          {[...Array(3)].map((_, i) => (
            <Card key={i}>
              <CardContent className="p-6">
                <Skeleton className="h-48 w-full" />
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {posts?.map((post) => (
            <Link key={post.slug} to={`/blog/${post.slug}`}>
              <Card className="overflow-hidden h-full group transition-all duration-200 hover:shadow-lg hover:shadow-primary/5 active:scale-[0.98] md:active:scale-100">
                {post.featuredImageUrl && (
                  <img
                    src={post.featuredImageUrl}
                    alt={post.title}
                    className="w-full h-40 md:h-48 object-cover transition-transform duration-300 group-hover:scale-105"
                  />
                )}
                <CardHeader className="pb-3 md:pb-6">
                  <CardTitle className="group-hover:text-primary transition-colors text-base md:text-lg leading-tight">
                    {post.title}
                  </CardTitle>
                  <CardDescription className="text-sm md:text-base">
                    {post.publishedAt
                      ? `${formatDate(post.publishedAt)} by ${post.author.name}`
                      : "Not published"}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground line-clamp-3">
                    {post.metaDescription}
                  </p>
                </CardContent>
              </Card>
            </Link>
          ))}
        </div>
      )}
    </div>
  );
}

function BlogPostPage() {
  const { slug } = useParams<{ slug: string }>();
  // Removed unused upgrade dialog state
  const { data: post, isLoading } = useQuery({
    queryKey: ["blogPost", slug],
    queryFn: () => apiClient.getBlogPostBySlug({ slug: slug! }),
    enabled: !!slug,
  });

  const postUrl = window.location.href;

  if (isLoading) {
    return (
      <div className="max-w-4xl mx-auto">
        <Skeleton className="h-12 w-3/4 mb-4" />
        <Skeleton className="h-4 w-1/4 mb-8" />
        <Skeleton className="h-96 w-full" />
      </div>
    );
  }

  if (!post) {
    return <div className="text-center py-10">Post not found.</div>;
  }

  const blogPostingStructuredData: any = {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": postUrl,
    },
    headline: post.title,
    description: post.metaDescription || post.content.substring(0, 150),
    author: {
      "@type": "Person",
      name: post.author.name,
    },
    publisher: {
      "@type": "Organization",
      name: "SocialWave",
    },
    datePublished: post.publishedAt,
    dateModified: post.updatedAt,
  };

  if (post.featuredImageUrl) {
    blogPostingStructuredData.image = post.featuredImageUrl;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <MetaTags
        title={`${post.metaTitle || post.title} | SocialWave Blog`}
        description={post.metaDescription || post.content.substring(0, 150)}
        keywords={post.tags || ""}
        ogImage={post.featuredImageUrl || undefined}
        canonicalUrl={postUrl}
      />
      <StructuredData data={blogPostingStructuredData} />
      {post.featuredImageUrl && (
        <img
          src={post.featuredImageUrl}
          alt={post.title}
          className="w-full h-96 object-cover rounded-lg mb-8"
        />
      )}
      <h1 className="text-5xl font-extrabold mb-4">{post.title}</h1>
      <div className="text-muted-foreground mb-8">
        <span>
          Published on {post.publishedAt ? formatDate(post.publishedAt) : ""}{" "}
          by{" "}
        </span>
        <span className="font-semibold">{post.author.name}</span>
      </div>
      <article className="prose prose-lg dark:prose-invert max-w-none">
        <ReactMarkdown remarkPlugins={[remarkGfm]}>
          {post.content}
        </ReactMarkdown>
      </article>
      <div className="mt-8 pt-8 border-t">
        <h3 className="text-lg font-semibold mb-4">Share this post</h3>
        <div className="flex gap-4">
          <TwitterShareButton url={postUrl} title={post.title}>
            <TwitterIcon size={40} round />
          </TwitterShareButton>
          <FacebookShareButton url={postUrl}>
            <FacebookIcon size={40} round />
          </FacebookShareButton>
          <LinkedinShareButton
            url={postUrl}
            title={post.title}
            summary={post.metaDescription || post.content.substring(0, 150)}
            source="SocialWave"
          >
            <LinkedinIcon size={40} round />
          </LinkedinShareButton>
        </div>
      </div>
      {/* Removed upgrade dialog */}
    </div>
  );
}

// Helper functions
const getPlatformIcon = (platform: string, className = "h-5 w-5") => {
  switch (platform.toLowerCase()) {
    case "facebook":
      return <Facebook className={`${className} platform-facebook`} />;
    case "instagram":
      return <Instagram className={`${className} platform-instagram`} />;
    case "twitter":
      return <Twitter className={`${className} platform-twitter`} />;
    case "youtube":
      return <Youtube className={`${className} platform-youtube`} />;
    case "linkedin":
      return <Linkedin className={`${className} platform-linkedin`} />;
    default:
      return <MessageSquare className={className} />;
  }
};

const getInitials = (name: string) => {
  return name
    .split(" ")
    .map((n) => n[0])
    .join("")
    .toUpperCase()
    .substring(0, 2);
};

const formatDate = (dateString: string | Date) => {
  const date = new Date(dateString);
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
  }).format(date);
};

const isNewComment = (comment: any) => {
  const commentDate = new Date(comment.createdAt);
  const now = new Date();
  const hoursDiff = (now.getTime() - commentDate.getTime()) / (1000 * 60 * 60);
  return hoursDiff < 24;
};

function CommandPalette({
  open,
  setOpen,
}: {
  open: boolean;
  setOpen: (open: boolean) => void;
}) {
  // const navigate = useNavigate(); // Reserved for future navigation features
  const [query, setQuery] = useState("");
  const [debouncedQuery, setDebouncedQuery] = useState("");

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedQuery(query);
    }, 300);
    return () => clearTimeout(timer);
  }, [query]);

  const { data: searchResults, isLoading } = useQuery(
    ["searchApp", debouncedQuery],
    () => apiClient.searchApp({ query: debouncedQuery }),
    {
      enabled: debouncedQuery.length > 1,
    },
  );

  const runCommand = (command: () => void) => {
    setOpen(false);
    command();
  };

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput
        placeholder="Type a command or search..."
        value={query}
        onValueChange={setQuery}
      />
      <CommandList>
        {isLoading ? (
          <div className="p-4 text-center text-sm">Searching...</div>
        ) : (
          <CommandEmpty>No results found.</CommandEmpty>
        )}
        {searchResults?.comments && searchResults.comments.length > 0 && (
          <CommandGroup heading="Comments">
            {searchResults.comments.map((comment) => (
              <CommandItem
                key={comment.id}
                onSelect={() =>
                  runCommand(() =>
                    console.log("Navigate to engage with comment:", comment.id),
                  )
                }
              >
                <MessageSquare className="mr-2 h-4 w-4" />
                <span>{comment.text}</span>
              </CommandItem>
            ))}
          </CommandGroup>
        )}
        {searchResults?.content && searchResults.content.length > 0 && (
          <CommandGroup heading="Content">
            {searchResults.content.map((content) => (
              <CommandItem
                key={content.id}
                onSelect={() =>
                  runCommand(() =>
                    console.log("Navigate to create with content:", content.id),
                  )
                }
              >
                <PenSquare className="mr-2 h-4 w-4" />
                <span>{content.title}</span>
              </CommandItem>
            ))}
          </CommandGroup>
        )}
        {searchResults?.pillars && searchResults.pillars.length > 0 && (
          <CommandGroup heading="Pillars">
            {searchResults.pillars.map((pillar) => (
              <CommandItem
                key={pillar.id}
                onSelect={() =>
                  runCommand(() =>
                    console.log("Navigate to create with pillar:", pillar.id),
                  )
                }
              >
                <PieChart className="mr-2 h-4 w-4" />
                <span>{pillar.name}</span>
              </CommandItem>
            ))}
          </CommandGroup>
        )}
      </CommandList>
    </CommandDialog>
  );
}

function MetaTags({
  title,
  description,
  keywords,
  ogImage,
  canonicalUrl,
}: {
  title: string;
  description: string;
  keywords?: string;
  ogImage?: string;
  canonicalUrl?: string;
}) {
  React.useEffect(() => {
    // Set document title
    document.title = title;

    // Helper function to set or update meta tags
    const setMetaTag = (name: string, content: string, property?: boolean) => {
      const attribute = property ? "property" : "name";
      let element = document.querySelector(`meta[${attribute}="${name}"]`);
      if (!element) {
        element = document.createElement("meta");
        element.setAttribute(attribute, name);
        document.head.appendChild(element);
      }
      element.setAttribute("content", content);
    };

    // Set basic meta tags
    setMetaTag("description", description);
    if (keywords) setMetaTag("keywords", keywords);

    // Set Open Graph meta tags
    setMetaTag("og:title", title, true);
    setMetaTag("og:description", description, true);
    setMetaTag("og:type", "website", true);
    if (ogImage) setMetaTag("og:image", ogImage, true);

    // Set Twitter Card meta tags
    setMetaTag("twitter:card", "summary_large_image");
    setMetaTag("twitter:title", title);
    setMetaTag("twitter:description", description);
    if (ogImage) setMetaTag("twitter:image", ogImage);

    // Set canonical URL if provided
    if (canonicalUrl) {
      let linkElement = document.querySelector('link[rel="canonical"]');
      if (!linkElement) {
        linkElement = document.createElement("link");
        linkElement.setAttribute("rel", "canonical");
        document.head.appendChild(linkElement);
      }
      linkElement.setAttribute("href", canonicalUrl);
    }

    // Cleanup function to reset title when component unmounts
    return () => {
      document.title = "SocialWave";
    };
  }, [title, description, keywords, ogImage, canonicalUrl]);

  return null;
}

function StructuredData({ data }: { data: object }) {
  React.useEffect(() => {
    // Create or update JSON-LD structured data script
    let scriptElement = document.querySelector(
      'script[type="application/ld+json"]',
    );
    if (!scriptElement) {
      scriptElement = document.createElement("script");
      scriptElement.setAttribute("type", "application/ld+json");
      document.head.appendChild(scriptElement);
    }
    scriptElement.textContent = JSON.stringify(data);

    // Cleanup function to remove structured data when component unmounts
    return () => {
      const existingScript = document.querySelector(
        'script[type="application/ld+json"]',
      );
      if (existingScript) {
        existingScript.remove();
      }
    };
  }, [data]);

  return null;
}

function HomePage() {
  const { toast } = useToast();
  const navigate = useNavigate();
  const [currentTime, setCurrentTime] = useState(new Date());
  const [showNotificationCenter, setShowNotificationCenter] = useState(false);

  const [lastEngagementCheck, setLastEngagementCheck] = useState<Date | null>(
    null,
  );
  const notificationCenterRef = useRef<HTMLDivElement>(null);

  // Update time every minute for live clock
  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 60000);
    return () => clearInterval(timer);
  }, []);

  // Click outside handler for notification center
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        notificationCenterRef.current &&
        !notificationCenterRef.current.contains(event.target as Node)
      ) {
        setShowNotificationCenter(false);
      }
    };

    if (showNotificationCenter) {
      document.addEventListener("mousedown", handleClickOutside);
      return () => {
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }
  }, [showNotificationCenter]);

  const fetchCommentsMutation = useMutation(apiClient.fetchComments, {
    onSuccess: (data) => {
      triggerGeneration();

      if ("error" in data && data.error) {
        toast({
          title: "Failed to fetch comments",
          description: data.error,
          variant: "destructive",
        });
        return;
      }

      const count = data.newCommentsCount ?? 0;
      const skipped = data.problematicIds?.length || 0;
      toast({
        title:
          count > 0
            ? `${count} new comment${count === 1 ? "" : "s"} found!`
            : "No new comments found",
        description:
          skipped > 0
            ? `Some comments could not be fetched (e.g., deleted/private posts). ${skipped} post(s) were skipped.`
            : count > 0
              ? "Your dashboard will update shortly."
              : "You're all caught up!",
        variant: skipped > 0 ? "destructive" : "default",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to fetch comments",
        description: error.message || "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const [cacheKey, setCacheKey] = useState<string | null>(null);
  // Keep last completed summary to prevent flicker while new data generates
  const [lastSummary, setLastSummary] = useState<any | null>(null);

  const { data: currentUser } = useQuery({
    queryKey: ["currentUser"],
    queryFn: apiClient.getCurrentUser,
    staleTime: 5 * 60 * 1000,
    refetchOnWindowFocus: false,
    refetchOnReconnect: false,
  });

  // Get brand context and connected accounts
  const brandContext = useBrandContext();
  const { data: connectedAccounts } = useConnectedAccounts();

  const { mutate: triggerGeneration, isLoading: isTriggering } = useMutation({
    mutationFn: apiClient.triggerDashboardSummaryGeneration,
    onSuccess: (data) => {
      setCacheKey(data.cacheKey);
    },
  });

  // Check if user has connected accounts
  const hasConnectedAccounts =
    currentUser?.accounts && currentUser.accounts.length > 0;

  // Check if user has brand setup (for brand-only insights)
  const hasBrandSetup = brandContext?.isSetup || brandContext?.hasAnalysis;

  useEffect(() => {
    // Trigger dashboard generation if user has connected accounts OR brand setup
    if (!cacheKey && (hasConnectedAccounts || hasBrandSetup)) {
      triggerGeneration();
    }
  }, [cacheKey, hasConnectedAccounts, hasBrandSetup]); // Removed triggerGeneration from dependencies to prevent auto-refresh

  const { data: summaryResult } = useQuery({
    queryKey: ["dashboardSummary", cacheKey],
    queryFn: () => apiClient.getDashboardSummary({ cacheKey }),
    enabled: !!cacheKey,
    refetchInterval: false, // Disabled auto-refresh to prevent consistent refreshing
    refetchOnWindowFocus: false,
    refetchOnReconnect: false,
    keepPreviousData: true,
  });

  const summary =
    summaryResult?.status === "COMPLETED" ? summaryResult.data : lastSummary;
  // Only show generating state if user has connected accounts and we're actually generating
  const isGenerating =
    hasConnectedAccounts &&
    (summaryResult?.status === "GENERATING" ||
      summaryResult?.status === "PENDING" ||
      isTriggering ||
      (!summaryResult && cacheKey));

  // Preserve last completed summary to avoid UI flicker during refreshes
  useEffect(() => {
    if (summaryResult?.status === "COMPLETED" && summaryResult.data) {
      setLastSummary(summaryResult.data as any);
    }
  }, [summaryResult?.status, summaryResult?.data]);

  // Get personalized greeting based on time of day
  const getPersonalizedGreeting = () => {
    const hour = currentTime.getHours();
    const name = currentUser?.name ? `, ${currentUser.name.split(" ")[0]}` : "";

    if (hour < 12) return `Good morning${name}`;
    if (hour < 17) return `Good afternoon${name}`;
    return `Good evening${name}`;
  };

  const greeting = getPersonalizedGreeting();
  const subGreeting = "Here’s your command center for today.";

  // Update engagement check timestamp
  useEffect(() => {
    if (summary && !lastEngagementCheck) {
      setLastEngagementCheck(new Date());
    }
  }, [summary, lastEngagementCheck]);

  const renderLoadingState = () => (
    <div className="space-y-8">
      {/* Header Skeleton */}
      <div>
        <Skeleton className="h-10 w-1/3 mb-2" />
        <Skeleton className="h-6 w-1/2" />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Main Content Skeleton */}
        <div className="lg:col-span-3 space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {[...Array(3)].map((_, i) => (
              <Card key={i} className="h-full">
                <CardHeader>
                  <div className="flex items-center gap-3">
                    <Skeleton className="h-12 w-12 rounded-lg" />
                    <div className="space-y-2">
                      <Skeleton className="h-5 w-24" />
                      <Skeleton className="h-4 w-32" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <Skeleton className="h-10 w-16 mb-2" />
                  <Skeleton className="h-4 w-20" />
                </CardContent>
                <CardFooter>
                  <Skeleton className="h-6 w-28" />
                </CardFooter>
              </Card>
            ))}
          </div>

          <Card>
            <CardHeader>
              <Skeleton className="h-6 w-1/3" />
            </CardHeader>
            <CardContent className="space-y-3">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="flex items-center gap-3 p-3">
                  <Skeleton className="h-8 w-8 rounded-full" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-4 w-full" />
                    <Skeleton className="h-3 w-1/4" />
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar Skeleton */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <Skeleton className="h-6 w-1/2" />
            </CardHeader>
            <CardContent className="space-y-4">
              {[...Array(4)].map((_, i) => (
                <Card key={i} className="p-4">
                  <Skeleton className="h-4 w-1/3 mb-2" />
                  <Skeleton className="h-8 w-1/2" />
                </Card>
              ))}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <Skeleton className="h-6 w-2/3 mb-2" />
              <Skeleton className="h-4 w-1/2" />
            </CardHeader>
            <CardContent className="space-y-3">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="flex items-center gap-3 p-3">
                  <Skeleton className="h-8 w-8" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-4 w-full" />
                    <Skeleton className="h-3 w-1/2" />
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );

  const renderEmptyState = () => {
    const hasAccounts =
      currentUser?.accounts && currentUser.accounts.length > 0;
    const hasBrandInfo = brandContext?.isSetup || brandContext?.hasAnalysis;
    const hasConnectedSocialAccounts =
      connectedAccounts && connectedAccounts.length > 0;

    // If brand is connected but no social accounts, show contextual prompts
    // If brand is connected but no social accounts, show contextual prompts
    if (hasBrandInfo && !hasConnectedSocialAccounts) {
      return (
        <div className="space-y-8">
          <EmptyState
            icon={<Settings className="h-12 w-12" />}
            title="Connect Your Social Accounts"
            description="Your brand profile is set up! Now connect your social media accounts to start managing comments and engagement."
          >
            <div className="flex flex-col sm:flex-row gap-3 mt-6">
              <Button onClick={() => navigate("/settings")} size="lg">
                <Settings className="h-4 w-4 mr-2" />
                Connect Social Accounts
              </Button>
              <Button
                variant="outline"
                size="lg"
                onClick={() => {
                  window.dispatchEvent(new CustomEvent("showOnboarding"));
                }}
              >
                <HelpCircle className="h-4 w-4 mr-2" />
                Setup Guide
              </Button>
            </div>
          </EmptyState>

          {/* Show social platform connection cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto">
            <Card
              className="p-6 text-center hover:shadow-lg transition-shadow cursor-pointer"
              onClick={() => navigate("/settings")}
            >
              <div className="mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4">
                <svg
                  className="h-6 w-6 text-blue-600 dark:text-blue-400"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z" />
                </svg>
              </div>
              <h3 className="font-semibold mb-2">Connect Twitter/X</h3>
              <p className="text-sm text-muted-foreground">
                Manage tweets, replies, and engage with your Twitter audience
              </p>
              <div className="mt-4">
                <Badge variant="outline" className="text-xs">
                  <Plus className="h-3 w-3 mr-1" />
                  Connect Now
                </Badge>
              </div>
            </Card>

            <Card
              className="p-6 text-center hover:shadow-lg transition-shadow cursor-pointer"
              onClick={() => navigate("/settings")}
            >
              <div className="mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4">
                <svg
                  className="h-6 w-6 text-blue-600 dark:text-blue-400"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
                </svg>
              </div>
              <h3 className="font-semibold mb-2">Connect Facebook</h3>
              <p className="text-sm text-muted-foreground">
                Manage Facebook posts, comments, and page interactions
              </p>
              <div className="mt-4">
                <Badge variant="outline" className="text-xs">
                  <Plus className="h-3 w-3 mr-1" />
                  Connect Now
                </Badge>
              </div>
            </Card>

            <Card
              className="p-6 text-center hover:shadow-lg transition-shadow cursor-pointer"
              onClick={() => navigate("/settings")}
            >
              <div className="mx-auto w-12 h-12 bg-gradient-100 dark:bg-gradient-900/30 rounded-lg flex items-center justify-center mb-4">
                <svg
                  className="h-6 w-6 text-pink-600 dark:text-pink-400"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" />
                </svg>
              </div>
              <h3 className="font-semibold mb-2">Connect Instagram</h3>
              <p className="text-sm text-muted-foreground">
                Manage Instagram posts, stories, and direct messages
              </p>
              <div className="mt-4">
                <Badge variant="outline" className="text-xs">
                  <Plus className="h-3 w-3 mr-1" />
                  Connect Now
                </Badge>
              </div>
            </Card>

            <Card
              className="p-6 text-center hover:shadow-lg transition-shadow cursor-pointer"
              onClick={() => navigate("/settings")}
            >
              <div className="mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4">
                <svg
                  className="h-6 w-6 text-blue-600 dark:text-blue-400"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z" />
                </svg>
              </div>
              <h3 className="font-semibold mb-2">Connect LinkedIn</h3>
              <p className="text-sm text-muted-foreground">
                Manage LinkedIn posts, articles, and professional network
              </p>
              <div className="mt-4">
                <Badge variant="outline" className="text-xs">
                  <Plus className="h-3 w-3 mr-1" />
                  Connect Now
                </Badge>
              </div>
            </Card>
          </div>

          {/* Progress indicator */}
          <div className="max-w-2xl mx-auto">
            <Card className="p-6 bg-gradient-to-r from-green-50/50 to-blue-50/50 dark:from-green-900/20 dark:to-blue-900/20 border-green-200/50 dark:border-green-800/50">
              <div className="flex items-center gap-4">
                <div className="flex items-center justify-center w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full">
                  <CheckCircle className="h-6 w-6 text-green-600 dark:text-green-400" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-green-800 dark:text-green-200 mb-1">
                    Brand Setup Complete!
                  </h3>
                  <p className="text-sm text-green-700 dark:text-green-300">
                    {brandContext?.brandGuidelines?.brandWebsite &&
                      `Your brand is ready. `}
                    Now connect your social accounts to start managing your
                    online presence.
                  </p>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                    1/2
                  </div>
                  <div className="text-xs text-green-700 dark:text-green-300">
                    Steps Complete
                  </div>
                </div>
              </div>
            </Card>
          </div>
        </div>
      );
    }

    return (
      <div className="space-y-8">
        <EmptyState
          icon={<LayoutDashboard className="h-12 w-12" />}
          title={
            hasAccounts ? "Your Dashboard is Ready" : "Welcome to SocialWave!"
          }
          description={
            hasAccounts
              ? "You've connected your accounts. Fetch your latest comments to get started."
              : "Your AI-powered social media command center awaits. Let's get you set up!"
          }
        >
          <div className="flex flex-col sm:flex-row gap-3 mt-6">
            {hasAccounts ? (
              <Button
                onClick={() => fetchCommentsMutation.mutate()}
                disabled={fetchCommentsMutation.isLoading}
                size="lg"
              >
                {fetchCommentsMutation.isLoading ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                Fetch Comments
              </Button>
            ) : (
              <>
                <Button onClick={() => navigate("/settings")} size="lg">
                  <Settings className="h-4 w-4 mr-2" />
                  Connect Accounts
                </Button>
                <Button
                  variant="outline"
                  size="lg"
                  onClick={() => {
                    window.dispatchEvent(new CustomEvent("showOnboarding"));
                  }}
                >
                  <HelpCircle className="h-4 w-4 mr-2" />
                  Take Tour
                </Button>
              </>
            )}
          </div>
        </EmptyState>

        {!hasAccounts && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">
            <Card className="p-6 text-center">
              <div className="mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4">
                <MessageSquare className="h-6 w-6 text-blue-600 dark:text-blue-400" />
              </div>
              <h3 className="font-semibold mb-2">Smart Responses</h3>
              <p className="text-sm text-muted-foreground">
                AI-powered comment management and response generation
              </p>
            </Card>

            <Card className="p-6 text-center">
              <div className="mx-auto w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center mb-4">
                <TrendingUp className="h-6 w-6 text-green-600 dark:text-green-400" />
              </div>
              <h3 className="font-semibold mb-2">Trend Discovery</h3>
              <p className="text-sm text-muted-foreground">
                Discover viral opportunities and trending insights
              </p>
            </Card>

            <Card className="p-6 text-center">
              <div className="mx-auto w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center mb-4">
                <PenSquare className="h-6 w-6 text-purple-600 dark:text-purple-400" />
              </div>
              <h3 className="font-semibold mb-2">Content Creation</h3>
              <p className="text-sm text-muted-foreground">
                Generate engaging content with AI assistance
              </p>
            </Card>
          </div>
        )}
      </div>
    );
  };

  const HubCard = ({
    title,
    description,
    mainStat,
    subStat,
    icon,
    onClick,
    ctaText,
  }: {
    title: string;
    description: string;
    mainStat: string | number;
    subStat: string;
    icon: React.ReactNode;
    onClick: () => void;
    ctaText: string;
  }) => (
    <motion.div
      whileHover={{ scale: 1.02, y: -4 }}
      whileTap={{ scale: 0.98 }}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3, ease: "easeOut" }}
    >
      <Card
        className="flex flex-col h-full hub-card group cursor-pointer bg-gradient-to-br from-card via-card to-card/50 border-border/50 shadow-sm hover:shadow-xl hover:shadow-primary/10 transition-all duration-500 overflow-hidden relative"
        onClick={onClick}
      >
        <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
        <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-primary/50 to-transparent scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left" />

        <CardHeader className="relative z-10">
          <div className="flex items-center gap-3">
            <motion.div
              className="p-3 bg-gradient-to-br from-primary/20 to-primary/5 rounded-xl text-primary border border-primary/10 group-hover:scale-110 group-hover:rotate-3 transition-all duration-300"
              whileHover={{ rotate: 5, scale: 1.1 }}
            >
              {icon}
            </motion.div>
            <div>
              <CardTitle className="group-hover:text-primary transition-colors duration-300">
                {title}
              </CardTitle>
              <CardDescription className="group-hover:text-muted-foreground/80 transition-colors duration-300">
                {description}
              </CardDescription>
            </div>
          </div>
        </CardHeader>

        <CardContent className="flex-grow relative z-10">
          <motion.p
            className="text-4xl font-bold mb-2 bg-gradient-to-r from-foreground to-primary bg-clip-text text-transparent"
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.1, type: "spring", stiffness: 200 }}
          >
            {mainStat}
          </motion.p>
          <p className="text-sm text-muted-foreground break-words group-hover:text-muted-foreground/80 transition-colors duration-300">
            {subStat}
          </p>
        </CardContent>

        <CardFooter className="relative z-10">
          <Button
            variant="ghost"
            className="w-full justify-start text-primary group-hover:bg-primary/5 group-hover:translate-x-1 transition-all duration-300 p-0 h-auto py-2"
          >
            <span className="group-hover:underline transition-all duration-300">
              {ctaText}
            </span>
            <motion.div
              className="ml-2"
              animate={{ x: 0 }}
              whileHover={{ x: 4 }}
              transition={{ type: "spring", stiffness: 400, damping: 17 }}
            >
              <ArrowRight className="h-4 w-4" />
            </motion.div>
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  );

  if (isGenerating && !summary) {
    return (
      <div>
        <h1 className="text-3xl font-bold mb-2 flex items-center gap-3 gradient-text">
          {greeting}
          {isGenerating && summary && (
            <RefreshCw className="h-5 w-5 animate-spin text-primary" />
          )}
        </h1>
        <p className="text-muted-foreground text-lg mb-8">{subGreeting}</p>
        {renderLoadingState()}
      </div>
    );
  }

  if (summaryResult?.status === "FAILED") {
    return (
      <div>
        <h1 className="text-3xl font-bold mb-2 gradient-text">{greeting}</h1>
        <p className="text-muted-foreground text-lg mb-8">{subGreeting}</p>
        <Alert variant="destructive">
          <XCircle className="h-4 w-4" />
          <AlertTitle>Dashboard Generation Failed</AlertTitle>
          <AlertDescription>
            {summaryResult.error ||
              "An unknown error occurred. This can happen if you haven't fetched any comments yet."}
          </AlertDescription>
          <Button
            onClick={() => triggerGeneration()}
            variant="outline"
            size="sm"
            className="mt-4"
            disabled={isTriggering}
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Try Again
          </Button>
        </Alert>
      </div>
    );
  }

  // Check if we should show insights - either with connected accounts and summary, or with brand setup for brand-based insights
  const hasBrandInfo = brandContext?.isSetup || brandContext?.hasAnalysis;
  const shouldShowInsights = hasConnectedAccounts || hasBrandInfo;

  // Show empty state if user hasn't connected accounts AND no brand setup, or no summary data available for connected accounts
  if (
    !shouldShowInsights ||
    (hasConnectedAccounts && !summary && !isGenerating)
  ) {
    return (
      <div className="min-h-screen flex flex-col">
        <div className="flex-1">
          <div className="flex items-start justify-between mb-8">
            <div>
              <h1 className="text-3xl font-bold mb-2">{greeting}</h1>
              <p className="text-muted-foreground text-lg">{subGreeting}</p>
            </div>
            {!hasConnectedAccounts && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  window.dispatchEvent(new CustomEvent("showOnboarding"));
                }}
              >
                <HelpCircle className="h-4 w-4 mr-2" />
                Guide
              </Button>
            )}
          </div>
          {renderEmptyState()}
        </div>
      </div>
    );
  }

  return (
    <motion.div
      className="space-y-4 md:space-y-6"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <MetaTags
        title="SocialWave Dashboard - AI Social Media Assistant"
        description="Your command center for AI-powered social media engagement, content creation, and analytics."
        keywords="AI social media, content creation, social media analytics, engagement, social media management"
      />
      <StructuredData
        data={{
          "@context": "https://schema.org",
          "@type": "WebPage",
          name: "SocialWave Dashboard",
          description:
            "Your command center for AI-powered social media engagement, content creation, and analytics.",
        }}
      />
      {/* Compact header: move greeting/status to the right and remove large title */}
      <motion.div
        className="flex items-center justify-end mb-2"
        initial={{ opacity: 0, y: -10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <div className="flex items-center gap-6"></div>

        <div className="flex items-center gap-3">
          <div className="hidden md:flex items-center gap-2 mr-1 text-xs text-muted-foreground">
            <span className="font-medium truncate max-w-[180px]">
              {greeting}
            </span>
            <span className="hidden sm:inline">• Live Dashboard</span>
            <span className="hidden lg:inline border-l border-border/50 pl-2">
              Updated just now
            </span>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => triggerGeneration()}
            disabled={isTriggering}
            className="text-muted-foreground hover:text-foreground hover:bg-primary/5 transition-all duration-200"
          >
            <RefreshCw
              className={`h-4 w-4 mr-2 ${isTriggering ? "animate-spin" : ""}`}
            />
            <span className="hidden sm:inline">Refresh</span>
            <span className="sm:hidden">Sync</span>
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => {
              window.dispatchEvent(new CustomEvent("showOnboarding"));
            }}
            className="border-primary/20 hover:border-primary/40 hover:bg-primary/5 transition-all duration-200"
          >
            <HelpCircle className="h-4 w-4 mr-2" />
            <span className="hidden sm:inline">Guide</span>
            <span className="sm:hidden">Help</span>
          </Button>
        </div>
      </motion.div>

      {/* Compact Quick Actions Dock - Right-aligned utility bar */}
      <motion.div
        className="fixed bottom-6 right-6 z-40 md:relative md:bottom-auto md:right-auto md:z-auto md:bg-gradient-to-r md:from-card md:via-card/50 md:to-card md:border md:border-border/50 md:rounded-lg md:p-3 md:shadow-sm md:hover:shadow-md md:transition-shadow md:duration-300"
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 0.2, duration: 0.4 }}
      >
        {/* Mobile: Floating Action Button */}
        <div className="md:hidden">
          <Button
            variant="ghost"
            size="sm"
            className="h-14 w-14 rounded-full bg-primary/90 hover:bg-primary text-primary-foreground shadow-lg hover:shadow-xl transition-all duration-300 backdrop-blur-sm border-2 border-primary/20"
            onClick={() => {
              // Toggle quick actions menu on mobile
              const menu = document.getElementById("mobile-quick-menu");
              if (menu) {
                menu.classList.toggle("hidden");
              }
            }}
            title="Quick Actions"
          >
            <Zap className="h-6 w-6" />
          </Button>

          {/* Mobile Quick Actions Menu */}
          <div
            id="mobile-quick-menu"
            className="hidden absolute bottom-16 right-0 bg-card border border-border/50 rounded-lg p-2 shadow-xl backdrop-blur-sm min-w-48"
          >
            <div className="space-y-1">
              <Button
                variant="ghost"
                size="sm"
                className="w-full justify-start text-left h-10"
                onClick={() => {
                  navigate("/engage");
                  document
                    .getElementById("mobile-quick-menu")
                    ?.classList.add("hidden");
                }}
              >
                <MessageSquare className="h-4 w-4 mr-3" />
                Engage ({summary?.pendingCommentsCount || 0})
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="w-full justify-start text-left h-10"
                onClick={() => {
                  navigate("/create");
                  document
                    .getElementById("mobile-quick-menu")
                    ?.classList.add("hidden");
                }}
              >
                <PenSquare className="h-4 w-4 mr-3" />
                Create Content
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="w-full justify-start text-left h-10"
                onClick={() => {
                  navigate("/discover", { state: { activeTab: "insights" } });
                  document
                    .getElementById("mobile-quick-menu")
                    ?.classList.add("hidden");
                }}
              >
                <TrendingUp className="h-4 w-4 mr-3" />
                Find Trends
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="w-full justify-start text-left h-10"
                onClick={() => {
                  navigate("/analytics");
                  document
                    .getElementById("mobile-quick-menu")
                    ?.classList.add("hidden");
                }}
              >
                <BarChart3 className="h-4 w-4 mr-3" />
                Analytics
              </Button>
            </div>
          </div>
        </div>

        {/* Desktop: Compact horizontal dock */}
        <div className="hidden md:block">
          <div className="flex items-center justify-between mb-2">
            <h3 className="font-medium text-xs text-muted-foreground flex items-center gap-2">
              <Zap className="h-3 w-3" />
              Quick Actions
            </h3>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate("/settings")}
              className="text-xs text-muted-foreground hover:text-foreground h-5 px-2"
            >
              Customize
            </Button>
          </div>

          {/* Compact horizontal action buttons */}
          <div className="flex items-center gap-2">
            {/* Engage - Only show if there are pending comments */}
            {summary?.pendingCommentsCount &&
              summary.pendingCommentsCount > 0 && (
                <motion.div
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="relative"
                >
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 px-3 rounded-lg bg-gradient-to-r from-red-50/80 to-red-100/80 dark:from-red-900/40 dark:to-red-800/30 hover:from-red-100 hover:to-red-200/80 dark:hover:from-red-800/60 dark:hover:to-red-700/40 border border-red-200/60 dark:border-red-700/60 hover:border-red-300 dark:hover:border-red-600 shadow-sm hover:shadow-md transition-all duration-200 text-red-700 dark:text-red-300 font-medium"
                    onClick={() => {
                      navigate("/engage");
                      toast({
                        title: `${summary.pendingCommentsCount} comments waiting`,
                        description: "Time to engage with your audience!",
                      });
                    }}
                  >
                    <MessageSquare className="h-3 w-3 mr-1" />
                    {summary.pendingCommentsCount}
                  </Button>
                </motion.div>
              )}

            {/* Create - Only show if there are drafts or content ideas */}
            {((summary?.draftContentCount && summary.draftContentCount > 0) ||
              (summary?.contentIdeasCount &&
                summary.contentIdeasCount > 0)) && (
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 px-3 rounded-lg bg-gradient-to-r from-green-50/80 to-green-100/80 dark:from-green-900/40 dark:to-green-800/30 hover:from-green-100 hover:to-green-200/80 dark:hover:from-green-800/60 dark:hover:to-green-700/40 border border-green-200/60 dark:border-green-700/60 hover:border-green-300 dark:hover:border-green-600 shadow-sm hover:shadow-md transition-all duration-200 text-green-700 dark:text-green-300 font-medium"
                  onClick={() => {
                    navigate("/create");
                    toast({
                      title: "Opening content studio",
                      description: "Ready to create engaging content!",
                    });
                  }}
                >
                  <PenSquare className="h-3 w-3 mr-1" />
                  Create
                </Button>
              </motion.div>
            )}

            {/* Trends - Only show if there are trending insights */}
            {summary?.trendingTopicsFromViral &&
              summary.trendingTopicsFromViral.length > 0 && (
                <motion.div
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 px-3 rounded-lg bg-gradient-to-r from-orange-50/80 to-orange-100/80 dark:from-orange-900/40 dark:to-orange-800/30 hover:from-orange-100 hover:to-orange-200/80 dark:hover:from-orange-800/60 dark:hover:to-orange-700/40 border border-orange-200/60 dark:border-orange-700/60 hover:border-orange-300 dark:hover:border-orange-600 shadow-sm hover:shadow-md transition-all duration-200 text-orange-700 dark:text-orange-300 font-medium"
                    onClick={() => {
                      navigate("/discover", {
                        state: { activeTab: "insights" },
                      });
                      toast({
                        title: "Discovering trends",
                        description: "Finding viral opportunities for you!",
                      });
                    }}
                  >
                    <TrendingUp className="h-3 w-3 mr-1" />
                    Trends
                  </Button>
                </motion.div>
              )}

            {/* Always show sync and analytics as core utilities */}
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button
                variant="ghost"
                size="sm"
                className={`h-8 px-3 rounded-lg bg-gradient-to-r from-blue-50/80 to-blue-100/80 dark:from-blue-900/40 dark:to-blue-800/30 hover:from-blue-100 hover:to-blue-200/80 dark:hover:from-blue-800/60 dark:hover:to-blue-700/40 border border-blue-200/60 dark:border-blue-700/60 hover:border-blue-300 dark:hover:border-blue-600 shadow-sm hover:shadow-md transition-all duration-200 text-blue-700 dark:text-blue-300 font-medium ${
                  fetchCommentsMutation.isLoading ? "animate-pulse" : ""
                }`}
                onClick={() => {
                  fetchCommentsMutation.mutate();
                  toast({
                    title: "Syncing comments...",
                    description: "This may take a few moments.",
                  });
                }}
                disabled={fetchCommentsMutation.isLoading}
                title="Sync comments"
              >
                {fetchCommentsMutation.isLoading ? (
                  <RefreshCw className="h-3 w-3 mr-1 animate-spin" />
                ) : (
                  <RefreshCw className="h-3 w-3 mr-1" />
                )}
                Sync
              </Button>
            </motion.div>

            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button
                variant="ghost"
                size="sm"
                className="h-8 px-3 rounded-lg bg-gradient-to-r from-indigo-50/80 to-indigo-100/80 dark:from-indigo-900/40 dark:to-indigo-800/30 hover:from-indigo-100 hover:to-indigo-200/80 dark:hover:from-indigo-800/60 dark:hover:to-indigo-700/40 border border-indigo-200/60 dark:border-indigo-700/60 hover:border-indigo-300 dark:hover:border-indigo-600 shadow-sm hover:shadow-md transition-all duration-200 text-indigo-700 dark:text-indigo-300 font-medium"
                onClick={() => {
                  navigate("/analytics");
                  toast({
                    title: "Analytics dashboard",
                    description: "Reviewing your performance metrics.",
                  });
                }}
              >
                <BarChart3 className="h-3 w-3 mr-1" />
                Analytics
              </Button>
            </motion.div>
          </div>

          {/* Smart Context Alert - Only show when there are actionable issues */}
          {((summary?.engagementChange && summary.engagementChange < -10) ||
            (summary?.actionableRecommendations &&
              summary.actionableRecommendations.length > 0)) && (
            <motion.div
              className="mt-3 pt-3 border-t border-border/50 flex items-center justify-between"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              transition={{ delay: 0.5, duration: 0.4 }}
            >
              <div className="flex items-center gap-2 text-sm">
                <AlertCircle className="h-3 w-3 text-yellow-600 dark:text-yellow-400" />
                <span className="font-medium text-yellow-800 dark:text-yellow-200 text-xs">
                  {summary?.engagementChange && summary.engagementChange < -10
                    ? `Engagement down ${Math.abs(summary.engagementChange).toFixed(0)}%`
                    : `${summary?.actionableRecommendations?.length || 0} new insights`}
                </span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                className="text-xs h-5 px-2 text-yellow-700 dark:text-yellow-300 hover:bg-yellow-100 dark:hover:bg-yellow-900/30"
                onClick={() => {
                  if (
                    summary?.engagementChange &&
                    summary.engagementChange < -10
                  ) {
                    navigate("/analytics");
                  } else {
                    navigate("/discover", { state: { activeTab: "insights" } });
                  }
                }}
              >
                Take Action
              </Button>
            </motion.div>
          )}
        </div>
      </motion.div>

      {/* Optimized Layout with Enhanced Information Flow and Visual Hierarchy */}
      <div className="grid grid-cols-1 xl:grid-cols-5 gap-4 md:gap-6">
        {/* Primary Content Column - Optimized for key metrics and performance */}
        <div className="xl:col-span-3 space-y-4 md:space-y-6">
          {/* Hub Cards - Prioritized for quick access to core functions */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3 md:gap-4">
            <HubCard
              title="Response Hub"
              description="Your comment inbox"
              mainStat={summary?.pendingCommentsCount || 0}
              subStat="Comments Pending"
              icon={<MessageSquare className="h-6 w-6 text-primary" />}
              onClick={() => navigate("/engage")}
              ctaText="Go to Inbox"
            />
            <HubCard
              title="Strategy Hub"
              description="Your content plan"
              mainStat={summary?.contentIdeasCount || 0}
              subStat="Content Ideas"
              icon={<PieChart className="h-6 w-6 text-primary" />}
              onClick={() =>
                navigate("/discover", { state: { activeTab: "discover" } })
              }
              ctaText="View Strategy"
            />
            <HubCard
              title="Content Hub"
              description="Your media library"
              mainStat={summary?.draftContentCount || 0}
              subStat="Drafts Ready"
              icon={<PenSquare className="h-6 w-6 text-primary" />}
              onClick={() => navigate("/create")}
              ctaText="Open Library"
            />
          </div>

          {/* Streamlined Performance Metrics Dashboard */}
          <Card className="border-border/50 shadow-sm hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <CardTitle className="flex items-center gap-2 text-lg font-semibold">
                    <div className="p-1.5 bg-primary/10 rounded-md">
                      <BarChart3 className="h-4 w-4 text-primary" />
                    </div>
                    Performance Overview
                  </CardTitle>
                  <CardDescription className="text-sm text-muted-foreground">
                    Key metrics and performance trends
                  </CardDescription>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => navigate("/analytics")}
                  className="hover:bg-primary/5 hover:border-primary/30 transition-all duration-200"
                >
                  <ExternalLink className="h-4 w-4 mr-2" />
                  Full Report
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4 pt-0">
              {/* Key Performance Indicators - Optimized for scanability */}
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-3">
                <motion.div
                  className="p-4 bg-muted/30 border border-border/60 rounded-lg hover:bg-muted/50 transition-all duration-200"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  whileHover={{ y: -2, scale: 1.02 }}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="p-1.5 bg-blue-500/10 rounded-md">
                      <MessageSquare className="h-4 w-4 text-blue-600" />
                    </div>
                    {summary?.engagementChange && (
                      <div
                        className={`text-xs font-semibold px-2 py-1 rounded-full ${
                          summary.engagementChange >= 0
                            ? "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400"
                            : "bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400"
                        }`}
                      >
                        {summary.engagementChange >= 0 ? "+" : ""}
                        {summary.engagementChange.toFixed(1)}%
                      </div>
                    )}
                  </div>
                  <div className="text-xl font-bold text-foreground mb-1">
                    {summary?.totalCommentsCount || 0}
                  </div>
                  <div className="text-xs text-muted-foreground font-medium">
                    Total Comments
                  </div>
                </motion.div>

                <motion.div
                  className="p-4 bg-muted/30 border border-border/60 rounded-lg hover:bg-muted/50 transition-all duration-200"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                  whileHover={{ y: -2, scale: 1.02 }}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="p-1.5 bg-green-500/10 rounded-md">
                      <TrendingUp className="h-4 w-4 text-green-600" />
                    </div>
                    <div className="text-xs font-semibold px-2 py-1 rounded-full bg-green-500/10 text-green-600 border border-green-500/20">
                      Live
                    </div>
                  </div>
                  <div className="text-xl font-bold text-foreground mb-1">
                    {summary?.topPost?.engagement || 0}
                  </div>
                  <div className="text-xs text-muted-foreground font-medium">
                    Top Post Engagement
                  </div>
                </motion.div>

                <motion.div
                  className="p-4 bg-muted/30 border border-border/60 rounded-lg hover:bg-muted/50 transition-all duration-200"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3 }}
                  whileHover={{ y: -2, scale: 1.02 }}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="p-1.5 bg-purple-500/10 rounded-md">
                      <Clock className="h-4 w-4 text-purple-600" />
                    </div>
                    <div
                      className={`text-xs font-semibold px-2 py-1 rounded-full border ${
                        (summary?.averageResponseTime || 0) < 2
                          ? "bg-green-500/10 text-green-600 border-green-500/20"
                          : (summary?.averageResponseTime || 0) < 6
                            ? "bg-yellow-500/10 text-yellow-600 border-yellow-500/20"
                            : "bg-red-500/10 text-red-600 border-red-500/20"
                      }`}
                    >
                      {(summary?.averageResponseTime || 0) < 2
                        ? "Fast"
                        : (summary?.averageResponseTime || 0) < 6
                          ? "Good"
                          : "Slow"}
                    </div>
                  </div>
                  <div className="text-xl font-bold text-foreground mb-1">
                    {(summary?.averageResponseTime || 0).toFixed(1)}h
                  </div>
                  <div className="text-xs text-muted-foreground font-medium">
                    Avg Response Time
                  </div>
                </motion.div>

                <motion.div
                  className="p-4 bg-gradient-to-br from-orange-50/80 to-red-50/80 dark:from-orange-900/30 dark:to-red-900/30 border border-orange-200/60 dark:border-orange-800/60 rounded-xl shadow-sm hover:shadow-md transition-all duration-200"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 }}
                  whileHover={{ y: -2, scale: 1.02 }}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="p-2.5 bg-orange-100 dark:bg-orange-900/30 rounded-lg">
                      <Users className="h-4 w-4 text-orange-600 dark:text-orange-400" />
                    </div>
                    <div className="text-xs font-semibold px-2.5 py-1.5 rounded-full bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-400 border border-orange-200/50 dark:border-orange-800/50">
                      Active
                    </div>
                  </div>
                  <div className="text-xl font-bold text-orange-800 dark:text-orange-200 mb-1">
                    {summary?.uniqueUsersCount || 0}
                  </div>
                  <div className="text-xs text-muted-foreground font-medium">
                    Active Users
                  </div>
                </motion.div>
              </div>

              {/* Performance Trend Visualization */}
              <motion.div
                className="p-4 bg-gradient-to-r from-muted/30 to-muted/10 border border-border/50 rounded-lg"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.5 }}
              >
                <div className="flex items-center justify-between mb-4">
                  <h4 className="font-semibold flex items-center gap-2">
                    <BarChart className="h-4 w-4 text-primary" />
                    Performance Trends (Last 7 Days)
                  </h4>
                  <div className="flex items-center gap-2 text-xs text-muted-foreground">
                    <div className="flex items-center gap-1">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      Comments
                    </div>
                    <div className="flex items-center gap-1">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      Engagement
                    </div>
                  </div>
                </div>

                {/* Simple trend visualization using CSS */}
                <div className="grid grid-cols-2 md:grid-cols-7 gap-2 h-20 w-full max-w-full overflow-hidden">
                  {(summary?.performanceTrends || [...Array(7)]).map(
                    (trend, i) => {
                      // Use real data if available, fallback to demo data
                      const commentHeight = summary?.performanceTrends
                        ? Math.max(
                            10,
                            Math.min(
                              80,
                              (trend.comments /
                                Math.max(
                                  ...summary.performanceTrends.map(
                                    (t) => t.comments,
                                  ),
                                  1,
                                )) *
                                70,
                            ),
                          )
                        : Math.random() * 60 + 20;
                      const engagementHeight = summary?.performanceTrends
                        ? Math.max(
                            10,
                            Math.min(
                              80,
                              (trend.engagement /
                                Math.max(
                                  ...summary.performanceTrends.map(
                                    (t) => t.engagement,
                                  ),
                                  1,
                                )) *
                                60,
                            ),
                          )
                        : Math.random() * 50 + 15;

                      return (
                        <div
                          key={i}
                          className="flex flex-col justify-end gap-1"
                        >
                          <motion.div
                            className="bg-blue-500/70 rounded-t-sm relative group cursor-pointer"
                            style={{ height: `${commentHeight}%` }}
                            initial={{ height: 0 }}
                            animate={{ height: `${commentHeight}%` }}
                            transition={{ delay: 0.6 + i * 0.1, duration: 0.5 }}
                            whileHover={{
                              scale: 1.1,
                              backgroundColor: "rgb(59 130 246)",
                            }}
                          >
                            <div className="opacity-0 group-hover:opacity-100 absolute -top-8 left-1/2 transform -translate-x-1/2 bg-black text-white text-xs px-2 py-1 rounded transition-opacity">
                              {summary?.performanceTrends
                                ? trend.comments
                                : Math.floor(commentHeight)}
                            </div>
                          </motion.div>
                          <motion.div
                            className="bg-green-500/70 rounded-t-sm relative group cursor-pointer"
                            style={{ height: `${engagementHeight}%` }}
                            initial={{ height: 0 }}
                            animate={{ height: `${engagementHeight}%` }}
                            transition={{ delay: 0.7 + i * 0.1, duration: 0.5 }}
                            whileHover={{
                              scale: 1.1,
                              backgroundColor: "rgb(34 197 94)",
                            }}
                          >
                            <div className="opacity-0 group-hover:opacity-100 absolute -top-8 left-1/2 transform -translate-x-1/2 bg-black text-white text-xs px-2 py-1 rounded transition-opacity">
                              {summary?.performanceTrends
                                ? trend.engagement
                                : Math.floor(engagementHeight)}
                            </div>
                          </motion.div>
                          <div className="text-xs text-center text-muted-foreground mt-1">
                            {summary?.performanceTrends
                              ? trend.day
                              : new Date(
                                  Date.now() - (6 - i) * 24 * 60 * 60 * 1000,
                                ).toLocaleDateString("en", {
                                  weekday: "short",
                                })}
                          </div>
                        </div>
                      );
                    },
                  )}
                </div>
              </motion.div>

              {/* Performance Score */}
              <motion.div
                className="p-4 bg-gradient-to-r from-primary/5 via-primary/10 to-primary/5 border border-primary/20 rounded-lg"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.8 }}
              >
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-semibold flex items-center gap-2">
                    <Trophy className="h-4 w-4 text-primary" />
                    Performance Score
                  </h4>
                  <div className="text-xs text-muted-foreground">
                    Updated now
                  </div>
                </div>

                <div className="flex items-center gap-4">
                  <div className="flex-1">
                    {/* Performance score calculation based on available metrics */}
                    {(() => {
                      const responseTimeScore = summary?.averageResponseTime
                        ? Math.max(0, 100 - summary.averageResponseTime * 10)
                        : 75;
                      const engagementScore = summary?.engagementChange
                        ? Math.max(
                            0,
                            Math.min(100, 75 + summary.engagementChange),
                          )
                        : 75;
                      const activityScore = summary?.pendingCommentsCount
                        ? Math.min(
                            100,
                            (summary.pendingCommentsCount / 10) * 100,
                          )
                        : 50;

                      const overallScore = Math.round(
                        (responseTimeScore + engagementScore + activityScore) /
                          3,
                      );
                      const scoreColor =
                        overallScore >= 80
                          ? "text-green-600 dark:text-green-400"
                          : overallScore >= 60
                            ? "text-yellow-600 dark:text-yellow-400"
                            : "text-red-600 dark:text-red-400";

                      return (
                        <>
                          <div className="text-3xl font-bold mb-2">
                            <span className={scoreColor}>{overallScore}</span>
                            <span className="text-lg text-muted-foreground">
                              /100
                            </span>
                          </div>

                          {/* Progress bar */}
                          <div className="w-full bg-muted rounded-full h-2 mb-2">
                            <motion.div
                              className={`h-2 rounded-full ${
                                overallScore >= 80
                                  ? "bg-green-500"
                                  : overallScore >= 60
                                    ? "bg-yellow-500"
                                    : "bg-red-500"
                              }`}
                              initial={{ width: 0 }}
                              animate={{ width: `${overallScore}%` }}
                              transition={{
                                delay: 0.9,
                                duration: 1,
                                ease: "easeOut",
                              }}
                            />
                          </div>

                          <div className="text-xs text-muted-foreground">
                            {overallScore >= 80
                              ? "Excellent performance! Keep it up."
                              : overallScore >= 60
                                ? "Good performance with room for improvement."
                                : "Focus on response time and engagement to boost your score."}
                          </div>
                        </>
                      );
                    })()}
                  </div>

                  {/* Score breakdown */}
                  <div className="text-right space-y-1">
                    <div className="text-xs text-muted-foreground flex items-center gap-2">
                      <Clock className="h-3 w-3" />
                      Response:{" "}
                      {summary?.averageResponseTime
                        ? Math.max(
                            0,
                            100 - summary.averageResponseTime * 10,
                          ).toFixed(0)
                        : "75"}
                    </div>
                    <div className="text-xs text-muted-foreground flex items-center gap-2">
                      <TrendingUp className="h-3 w-3" />
                      Engagement:{" "}
                      {summary?.engagementChange
                        ? Math.max(
                            0,
                            Math.min(100, 75 + summary.engagementChange),
                          ).toFixed(0)
                        : "75"}
                    </div>
                    <div className="text-xs text-muted-foreground flex items-center gap-2">
                      <MessageSquare className="h-3 w-3" />
                      Activity:{" "}
                      {summary?.pendingCommentsCount
                        ? Math.min(
                            100,
                            (summary.pendingCommentsCount / 10) * 100,
                          ).toFixed(0)
                        : "50"}
                    </div>
                  </div>
                </div>
              </motion.div>
            </CardContent>
          </Card>
        </div>

        {/* Secondary Content Column - Supporting insights and contextual information */}
        <div className="xl:col-span-2 space-y-4">
          {/* Today's Briefing - Priority Actions and Urgent Alerts */}
          <Card className="bg-gradient-to-br from-card via-card to-muted/20 border-border/50 shadow-sm">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-2 text-lg">
                <div className="p-2 bg-primary/10 rounded-lg">
                  <Calendar className="h-5 w-5 text-primary" />
                </div>
                Today's Briefing
              </CardTitle>
              <CardDescription className="text-sm">
                Your daily overview and top priorities.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Priority Actions Header */}
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <div className="p-1.5 bg-primary/10 rounded-md">
                    <Target className="h-4 w-4 text-primary" />
                  </div>
                  <h4 className="font-semibold text-base">Priority Actions</h4>
                </div>
                <div className="text-xs text-muted-foreground px-2 py-1 bg-muted/50 rounded-full">
                  Updated{" "}
                  {new Date().toLocaleTimeString([], {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </div>
              </div>

              <p className="text-sm text-muted-foreground mb-4">
                AI-powered recommendations based on your performance data
              </p>

              {/* Critical Priority: Urgent Response Needed */}
              {summary?.pendingCommentsCount &&
                summary.pendingCommentsCount > 0 && (
                  <motion.div
                    className="p-4 bg-gradient-to-br from-red-50/90 to-orange-50/90 dark:from-red-900/30 dark:to-orange-900/30 border border-red-200/60 dark:border-red-800/60 rounded-lg shadow-sm"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 }}
                  >
                    <div className="flex items-start gap-3">
                      <div className="p-2 bg-red-100 dark:bg-red-900/30 rounded-lg flex-shrink-0">
                        <AlertCircle className="h-5 w-5 text-red-600 dark:text-red-400" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-2">
                          <h5 className="font-bold text-red-800 dark:text-red-200 text-sm">
                            URGENT: {summary.pendingCommentsCount} Comments
                            Awaiting Response
                          </h5>
                          <div className="px-2 py-0.5 bg-red-200 dark:bg-red-800 text-red-800 dark:text-red-200 text-xs font-bold rounded-full flex-shrink-0">
                            HIGH PRIORITY
                          </div>
                        </div>
                        <p className="text-xs text-red-700 dark:text-red-300 mb-3 leading-relaxed">
                          <strong>Impact:</strong> Delayed responses can reduce
                          engagement by up to 40%. Respond within 2 hours to
                          maintain audience trust.
                        </p>
                        <div className="flex items-center gap-3">
                          <Button
                            size="sm"
                            className="bg-red-600 hover:bg-red-700 text-white border-0 h-8 px-3 font-medium"
                            onClick={() => {
                              navigate("/engage");
                              toast({
                                title: "Opening Response Hub",
                                description: `${summary.pendingCommentsCount} comments ready for your response.`,
                              });
                            }}
                          >
                            <MessageSquare className="h-3 w-3 mr-1" />
                            Respond Now
                          </Button>
                          <div className="text-xs text-red-600 dark:text-red-400 font-medium">
                            Est. time:{" "}
                            {Math.ceil(summary.pendingCommentsCount * 1.5)}{" "}
                            minutes
                          </div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}

              {/* Engagement Alert */}
              {summary?.engagementChange && summary.engagementChange < -10 && (
                <motion.div
                  className="p-4 bg-gradient-to-br from-amber-50/90 to-yellow-50/90 dark:from-amber-900/30 dark:to-yellow-900/30 border border-amber-200/60 dark:border-amber-800/60 rounded-lg shadow-sm"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                >
                  <div className="flex items-start gap-3">
                    <div className="p-2 bg-amber-100 dark:bg-amber-900/30 rounded-lg flex-shrink-0">
                      <TrendingDown className="h-5 w-5 text-amber-600 dark:text-amber-400" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-2">
                        <h5 className="font-bold text-amber-800 dark:text-amber-200 text-sm">
                          Engagement Alert: Down{" "}
                          {Math.abs(summary.engagementChange).toFixed(0)}%
                        </h5>
                        <div className="px-2 py-0.5 bg-amber-200 dark:bg-amber-800 text-amber-800 dark:text-amber-200 text-xs font-bold rounded-full flex-shrink-0">
                          ACTION NEEDED
                        </div>
                      </div>
                      <p className="text-xs text-amber-700 dark:text-amber-300 mb-3 leading-relaxed">
                        <strong>Recommendation:</strong> Post visual content,
                        engage with trending topics, or ask questions to
                        re-engage your audience.
                      </p>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          className="bg-amber-600 hover:bg-amber-700 text-white border-0 h-8 px-3 font-medium"
                          onClick={() => {
                            navigate("/discover", {
                              state: { activeTab: "insights" },
                            });
                            toast({
                              title: "Finding trending opportunities",
                              description:
                                "Discovering viral content ideas for you.",
                            });
                          }}
                        >
                          <TrendingUp className="h-3 w-3 mr-1" />
                          Find Trends
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          className="h-8 px-3 border-amber-300 hover:bg-amber-50 dark:border-amber-700 dark:hover:bg-amber-900/20 font-medium"
                          onClick={() => {
                            navigate("/create");
                            toast({
                              title: "Opening Content Lab",
                              description: "Ready to create engaging content!",
                            });
                          }}
                        >
                          <PenSquare className="h-3 w-3 mr-1" />
                          Create Content
                        </Button>
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}

              {/* Default State: All Good */}
              {(!summary?.pendingCommentsCount ||
                summary.pendingCommentsCount === 0) &&
                (!summary?.engagementChange ||
                  summary.engagementChange >= -10) && (
                  <motion.div
                    className="p-4 bg-gradient-to-br from-green-50/90 to-emerald-50/90 dark:from-green-900/30 dark:to-emerald-900/30 border border-green-200/60 dark:border-green-800/60 rounded-lg shadow-sm"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 }}
                  >
                    <div className="flex items-start gap-3">
                      <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg flex-shrink-0">
                        <CheckCircle className="h-5 w-5 text-green-600 dark:text-green-400" />
                      </div>
                      <div className="flex-1">
                        <h5 className="font-bold text-green-800 dark:text-green-200 text-sm mb-2">
                          Everything looks great! 🎉
                        </h5>
                        <p className="text-xs text-green-700 dark:text-green-300 mb-3 leading-relaxed">
                          Your engagement is stable and no urgent actions are
                          needed. Consider exploring new content opportunities
                          to grow further.
                        </p>
                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            className="bg-green-600 hover:bg-green-700 text-white border-0 h-8 px-3 font-medium"
                            onClick={() => {
                              navigate("/discover", {
                                state: { activeTab: "insights" },
                              });
                            }}
                          >
                            <TrendingUp className="h-3 w-3 mr-1" />
                            Find Trends
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-8 px-3 border-green-300 hover:bg-green-50 dark:border-green-700 dark:hover:bg-green-900/20 font-medium"
                            onClick={() => {
                              navigate("/create");
                            }}
                          >
                            <PenSquare className="h-3 w-3 mr-1" />
                            Create Content
                          </Button>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}

              {/* Summary Footer */}
              <div className="mt-6 pt-4 border-t border-border/50">
                <div className="flex items-center justify-between text-xs text-muted-foreground">
                  <div className="flex items-center gap-4">
                    <span className="flex items-center gap-1">
                      🎯 {summary?.actionableRecommendations?.length || 2}{" "}
                      recommendations
                    </span>
                    <span className="flex items-center gap-1">
                      📈 {summary?.trendingTopicsFromViral?.length || 3}{" "}
                      trending insights
                    </span>
                    <span className="flex items-center gap-1">
                      ⚡ {summary?.pendingCommentsCount || 113} pending actions
                    </span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Trending Insights</CardTitle>
              <CardDescription>
                Based on viral content potential
              </CardDescription>
            </CardHeader>
            <CardContent className="p-2">
              {(summary?.trendingTopicsFromViral?.length ?? 0) > 0 ? (
                <div className="space-y-1">
                  {summary?.trendingTopicsFromViral?.map((item) => (
                    <div
                      key={item.id}
                      className="flex items-center gap-3 p-3 rounded-lg hover:bg-secondary/50 cursor-pointer transition-colors"
                      onClick={() =>
                        navigate("/discover", {
                          state: {
                            activeTab: "insights",
                            subTab: item.sourceTab,
                            highlightedItemId: item.sourceItemId,
                          },
                        })
                      }
                    >
                      <div className="p-2 bg-primary/10 rounded-lg flex-shrink-0">
                        <Flame className="h-5 w-5 text-primary" />
                      </div>
                      <div className="flex-1 min-w-0 space-y-2">
                        <p className="font-semibold text-sm leading-tight truncate">
                          {item.text}
                        </p>
                        <p className="text-xs text-muted-foreground truncate">
                          {item.source}
                        </p>
                      </div>
                      <ArrowRight className="h-4 w-4 text-muted-foreground flex-shrink-0 ml-auto" />
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-muted-foreground text-center p-6">
                  No trending insights right now.
                </p>
              )}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Next Up</CardTitle>
              <CardDescription>Your upcoming scheduled post.</CardDescription>
            </CardHeader>
            <CardContent>
              {summary?.nextScheduledPost ? (
                <div>
                  <p className="text-sm font-medium">
                    {summary?.nextScheduledPost?.content?.substring(0, 100)}...
                  </p>
                  <p className="text-xs text-muted-foreground mt-2">
                    Posting to {summary?.nextScheduledPost?.platform} on{" "}
                    {formatDate(
                      summary?.nextScheduledPost?.scheduledAt ?? new Date(),
                    )}
                  </p>
                </div>
              ) : (
                <p className="text-sm text-muted-foreground text-center p-4">
                  No posts scheduled.
                </p>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Onboarding Guide is now handled at MainApp level */}
    </motion.div>
  );
}

function WaitlistForm() {
  const [email, setEmail] = useState("");
  const [usageDetails, setUsageDetails] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isPressed, setIsPressed] = useState(false);
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email.trim()) {
      toast({
        title: "Email required",
        description:
          "Get early access to the most powerful AI content creation studio.",
        variant: "destructive",
      });
      return;
    }

    if (!usageDetails.trim()) {
      toast({
        title: "Usage details required",
        description: "Please tell us how you plan to use SocialWave.",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    try {
      await apiClient.submitWaitlistEntry({ email, usageDetails });

      setIsSubmitted(true);
      toast({
        title: "Welcome to the waitlist! 🎉",
        description: "We'll notify you as soon as SocialWave is ready for you.",
      });
    } catch (error) {
      void error;
      toast({
        title: "Something went wrong",
        description:
          (error as Error)?.message ??
          "Please try again or contact support if the problem persists.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isSubmitted) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5 }}
        className="bg-primary/10 border border-primary/20 rounded-lg p-4 md:p-6 text-center"
      >
        <div className="text-4xl mb-4">🎉</div>
        <h3 className="text-lg md:text-xl font-semibold mb-2">
          You're on the list!
        </h3>
        <p className="text-sm md:text-base text-muted-foreground">
          We'll send you early access and updates at <strong>{email}</strong>
        </p>
      </motion.div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="relative group max-w-md mx-auto"
    >
      {/* Premium glow effect */}
      <div className="absolute -inset-1 bg-gradient-to-r from-primary/20 via-blue-500/20 to-purple-500/20 rounded-2xl blur opacity-30 group-hover:opacity-50 transition duration-500"></div>

      <form
        onSubmit={handleSubmit}
        className={`relative bg-background/95 backdrop-blur-xl border-2 border-primary/20 rounded-2xl p-6 md:p-8 shadow-2xl space-y-6 transition-all duration-300 hover:border-primary/30 hover:shadow-primary/10 ${
          isPressed ? "scale-[0.98]" : ""
        }`}
        onTouchStart={() => setIsPressed(true)}
        onTouchEnd={() => setIsPressed(false)}
        onTouchCancel={() => setIsPressed(false)}
      >
        {/* Enhanced header */}
        <div className="text-center mb-6">
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="inline-flex items-center gap-2 bg-gradient-to-r from-primary/10 to-blue-500/10 px-4 py-2 rounded-full text-sm font-semibold mb-4 border border-primary/20"
          >
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span className="bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent">
              ✨ Early Access Waitlist
            </span>
          </motion.div>
          <h3 className="text-2xl md:text-3xl font-bold mb-3 bg-gradient-to-r from-foreground via-primary to-blue-600 bg-clip-text text-transparent">
            Get VIP Early Access
          </h3>
          <p className="text-base text-muted-foreground leading-relaxed">
            Be among the first to experience the future of social media
            management
          </p>
        </div>

        <div className="space-y-5">
          {/* Enhanced email field */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="relative"
          >
            <Label
              htmlFor="waitlist-email"
              className="text-sm font-semibold text-foreground flex items-center gap-2"
            >
              <div className="w-2 h-2 bg-primary rounded-full"></div>
              Email Address *
            </Label>
            <div className="relative mt-2">
              <Input
                id="waitlist-email"
                type="email"
                placeholder="you@example.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="h-14 md:h-12 text-base md:text-sm pl-12 pr-4 border-2 border-primary/20 bg-background/50 backdrop-blur-sm rounded-xl transition-all duration-300 focus:border-primary/50 focus:bg-background/80 hover:border-primary/30"
                required
              />
              <div className="absolute left-4 top-1/2 transform -translate-y-1/2 text-primary/60">
                <MessageSquare className="h-5 w-5" />
              </div>
            </div>
          </motion.div>

          {/* Enhanced usage details field */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="relative"
          >
            <Label
              htmlFor="usage-details"
              className="text-sm font-semibold text-foreground flex items-center gap-2"
            >
              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
              How will you use SocialWave? *
            </Label>
            <Textarea
              id="usage-details"
              placeholder="e.g., Managing my brand's Instagram and Facebook accounts, creating viral content for my agency's clients, automating responses for my e-commerce business..."
              value={usageDetails}
              onChange={(e) => setUsageDetails(e.target.value)}
              className="mt-2 resize-none text-base md:text-sm min-h-[120px] md:min-h-[100px] border-2 border-primary/20 bg-background/50 backdrop-blur-sm rounded-xl transition-all duration-300 focus:border-primary/50 focus:bg-background/80 hover:border-primary/30 p-4"
              rows={4}
              required
            />
          </motion.div>
        </div>

        {/* Enhanced submit button */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
          className="relative"
        >
          <div className="absolute -inset-0.5 bg-gradient-to-r from-primary via-blue-600 to-purple-600 rounded-xl blur opacity-30 group-hover:opacity-50 transition duration-500"></div>
          <Button
            type="submit"
            className="relative w-full font-bold h-14 md:h-12 text-base md:text-sm bg-gradient-to-r from-primary via-blue-600 to-purple-600 hover:from-primary/90 hover:via-blue-600/90 hover:to-purple-600/90 text-white border-0 rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 group"
            size="lg"
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>
                <Loader2 className="mr-3 h-5 w-5 animate-spin" />
                <span className="bg-gradient-to-r from-white to-yellow-100 bg-clip-text text-transparent">
                  Securing Your Spot...
                </span>
              </>
            ) : (
              <>
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <Sparkles className="h-5 w-5 animate-pulse" />
                    <div className="absolute -top-0.5 -right-0.5 w-2 h-2 bg-yellow-400 rounded-full animate-ping"></div>
                  </div>
                  <span className="bg-gradient-to-r from-white to-yellow-100 bg-clip-text text-transparent font-extrabold">
                    🚀 Join the Revolution
                  </span>
                  <ArrowRight className="h-4 w-4 group-hover:translate-x-1 transition-transform duration-300" />
                </div>
              </>
            )}
          </Button>
        </motion.div>

        {/* Enhanced privacy notice */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.5 }}
          className="text-center"
        >
          <p className="text-xs text-muted-foreground flex items-center justify-center gap-2">
            <Shield className="h-3 w-3 text-green-500" />
            <span>
              Your privacy is protected. No spam, just exclusive updates.
            </span>
          </p>
        </motion.div>

        {/* Floating elements for visual interest */}
        <div className="absolute top-4 right-4 opacity-20 group-hover:opacity-40 transition-opacity duration-300">
          <div className="h-6 w-6 bg-primary/30 rounded-full animate-pulse"></div>
        </div>
        <div className="absolute bottom-6 left-4 opacity-20 group-hover:opacity-40 transition-opacity duration-300">
          <div
            className="h-4 w-4 bg-blue-500/30 rounded-full animate-bounce"
            style={{ animationDelay: "0.5s" }}
          ></div>
        </div>
      </form>
    </motion.div>
  );
}

function LandingPage() {
  const problemRef = React.useRef<HTMLDivElement>(null);
  const pricingRef = React.useRef<HTMLDivElement>(null);
  const demoRef = React.useRef<HTMLDivElement>(null);
  const [showStickyCTA, setShowStickyCTA] = React.useState(false);

  const handleLearnMoreClick = () => {
    problemRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const handleDemoClick = () => {
    demoRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  React.useEffect(() => {
    const el = demoRef.current;
    if (!el) return;
    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries[0]!;
        setShowStickyCTA(!entry.isIntersecting);
      },
      { root: null, threshold: 0.2 },
    );
    observer.observe(el);
    return () => observer.disconnect();
  }, []);

  const structuredData = {
    "@context": "https://schema.org",
    "@type": "SoftwareApplication",
    name: "SocialWave",
    applicationCategory: "SocialMedia",
    operatingSystem: "Web",
    description:
      "SocialWave provides brands a real‑time content advantage. It captures authentic audience signals and transforms them into consistent, on‑brand content that gets smarter with every interaction.",
  };

  // No pricing plans - show pricing on request message instead

  const advancedFeatures = [
    {
      icon: Sparkles,
      title: "Content Lab",
      description:
        "Unified creation workspace that turns audience signals into on‑brand output—no prompts, no clutter.",
    },
    {
      icon: Hash,
      title: "Viral Threads that Learn",
      description:
        "Ship threads that adapt to your audience in real time and get smarter with every interaction.",
    },
    {
      icon: TrendingUp,
      title: "Real-Time Trend Intelligence",
      description:
        "Detect rising conversations early and translate them into ready-to-ship content.",
    },
    {
      icon: Brain,
      title: "Brand Vibe",
      description:
        "Central brand intelligence that stores your directives (e.g., “avoid controversial topics”) and enforces on‑brand output everywhere.",
    },
    {
      icon: BarChart3,
      title: "Learning Analytics",
      description:
        "Measure learning over time with clear drivers of performance and next best actions.",
    },
    {
      icon: Calendar,
      title: "Self-Optimizing Scheduling",
      description:
        "Auto-suggests optimal posting windows and queues content to hit business goals, not just timelines.",
    },
  ];

  const showcaseFeatures = [
    {
      value: "inbox",
      icon: MessageSquare,
      title: "Unified Inbox",
      heading: "Your Social Command Center",
      description:
        "Stop juggling tabs. SocialWave consolidates comments from all your connected platforms into one intelligent feed. Respond faster with AI-powered sentiment analysis and never miss an opportunity to engage.",
      points: [
        "View all comments across all platforms in one elegant interface.",
        "Filter by platform, status, or sentiment to focus on what matters.",
        "Access original post context without leaving your workflow.",
      ],
    },
    {
      value: "ai",
      icon: Sparkles,
      title: "AI Co-Pilot",
      heading: "Your Creative & Strategic Partner",
      description:
        "Our AI analyzes comments for sentiment and intent, suggesting on-brand replies in your unique voice. It learns from your style to become a true extension of your team.",
      points: [
        "Receive multiple, context-aware response variations for any comment.",
        "Automatically surface high-priority comments requiring urgent attention.",
        "Define your brand voice, and the AI adapts to you.",
      ],
    },
    {
      value: "strategy",
      icon: PieChart,
      title: "Strategy Hub",
      heading: "From Insight to Impact",
      description:
        "Turn analytics into action. Generate viral thread ideas, discover trending insights, and receive a full 7-day content plan tailored to your brand and audience goals.",
      points: [
        "Generate complete content calendars from your own social data.",
        "Create images, videos, and full posts with an integrated AI generator.",
        "Repurpose your best-performing content for any platform with a single click.",
      ],
    },
  ];

  const howItWorks = [
    {
      step: 1,
      title: "Connect & Calibrate",
      description:
        "Securely link your social accounts. Then, calibrate the AI by defining your unique brand voice, tone, and strategic goals.",
    },
    {
      step: 2,
      title: "Discover & Create",
      description:
        "Leverage Discover to uncover viral trends and generate a data-driven content calendar, complete with ready-to-post ideas.",
    },
    {
      step: 3,
      title: "Engage & Scale",
      description: (
        <span>
          Respond faster, manage conversations effortlessly, and scale your
          growth.
        </span>
      ),
    },
  ];

  const faqs = [
    {
      question: "Which social media platforms are supported?",
      answer:
        "SocialWave supports Facebook Pages, Instagram Business accounts, Twitter/X, YouTube, and LinkedIn for comment management, content scheduling, and analytics.",
    },
    {
      question: "How does the AI learn my brand's voice?",
      answer:
        "You provide initial guidelines (tone, keywords, example posts) in the settings. From there, the AI learns from every piece of content you generate, every response you edit, and all the feedback you provide on its suggestions.",
    },
    {
      question: "Can I schedule posts for all platforms?",
      answer:
        "Yes, our integrated scheduler allows you to plan and automate your content pipeline across all your connected accounts, including images and videos generated within the app.",
    },
    {
      question: "Is my data and account information secure?",
      answer:
        "Absolutely. We use industry-standard encryption and secure OAuth for account connections. Your credentials are never stored on our servers, and your data is used solely to power your SocialWave experience.",
    },
  ];
  return (
    <div className="min-h-screen w-full bg-background text-foreground flex flex-col items-center">
      <MetaTags
        title="SocialWave — Real‑Time Content Advantage"
        description="SocialWave captures audience signals in real time and turns them into consistent, on‑brand content. No prompts. No clutter. Output that learns from every interaction."
        keywords="social media management, AI marketing, content scheduling, sentiment analysis, viral trends"
      />
      <StructuredData data={structuredData} />
      {/* Header with Enhanced Glassmorphism */}
      <header className="w-full px-5 md:px-8 py-4 flex justify-between items-center sticky top-0 bg-background/60 backdrop-blur-md z-30 border-b border-border/20">
        <div className="flex items-center gap-3">
          <motion.div
            className="h-9 w-9 flex items-center justify-center bg-gradient-to-br from-primary to-primary/80 rounded-xl text-primary-foreground shadow-lg hover:shadow-xl transition-all duration-300"
            whileHover={{ scale: 1.05, rotate: 5 }}
            whileTap={{ scale: 0.95 }}
          >
            <MessageSquare className="h-5 w-5" />
          </motion.div>
          <span className="text-xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
            SocialWave
          </span>
        </div>
        <Button
          onClick={handleDemoClick}
          className="h-12 md:h-10 px-6 rounded-xl font-medium hover:shadow-lg transition-all duration-300 text-base md:text-sm active:scale-95 bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary/80 border border-primary/20"
        >
          <span className="flex items-center gap-2">
            <span>Join Waitlist</span>
            <ArrowRight className="h-4 w-4" />
          </span>
        </Button>
      </header>

      <main className="w-full">
        {/* Hero Section */}
        <section className="text-center py-24 md:py-32 px-4 bg-background relative overflow-hidden">
          {/* Background Elements with Enhanced Glassmorphism */}
          <div className="absolute inset-0 -z-10">
            <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-to-r from-primary/20 to-secondary/20 rounded-full blur-3xl animate-pulse" />
            <div
              className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-gradient-to-l from-accent/20 to-primary/20 rounded-full blur-3xl animate-pulse"
              style={{ animationDelay: "1s" }}
            />
            <div
              className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-72 h-72 bg-gradient-to-br from-secondary/10 to-primary/10 rounded-full blur-2xl animate-bounce"
              style={{ animationDuration: "6s" }}
            />
          </div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="mb-8"
          >
            <div className="inline-flex items-center gap-2 bg-gradient-to-r from-primary/10 to-secondary/10 backdrop-blur-sm text-primary px-6 py-3 rounded-full text-sm font-bold mb-8 border border-primary/30 shadow-lg">
              <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
              <span>⚡ Real‑Time Content Advantage</span>
            </div>
          </motion.div>
          <motion.h1
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.7, delay: 0.1 }}
            className="text-5xl md:text-7xl lg:text-8xl font-bold mb-8 leading-[0.9] tracking-tight"
          >
            Turn Audience Signals Into{" "}
            <span className="bg-gradient-to-r from-primary via-blue-600 to-purple-600 bg-clip-text text-transparent">
              Consistent, On‑Brand Content{" "}
            </span>
          </motion.h1>
          <motion.p
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.7, delay: 0.3 }}
            className="text-xl md:text-2xl text-muted-foreground mb-12 max-w-4xl leading-relaxed"
          >
            SocialWave captures authentic audience signals and turns them into
            consistent, engaging content that sounds like you. No prompts. No
            clutter. Output that learns from every interaction.
          </motion.p>

          {/* Waitlist Form */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            ref={demoRef}
            className="max-w-md mx-auto bg-background/60 border border-border/30 backdrop-blur-xl rounded-2xl p-4 shadow-lg"
          >
            <WaitlistForm />
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.7, delay: 0.4 }}
            className="flex flex-col sm:flex-row justify-center items-center gap-6 mt-12"
          >
            {/* Primary CTA - Enhanced with urgency and premium design */}
            <motion.div
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
              className="relative group w-full sm:w-auto"
            >
              <div className="absolute -inset-1 bg-gradient-to-r from-primary via-blue-600 to-purple-600 rounded-xl blur opacity-25 group-hover:opacity-40 transition duration-500"></div>
              <Button
                size="lg"
                className="relative h-16 px-12 text-lg font-bold w-full sm:w-auto bg-gradient-to-r from-primary via-blue-600 to-purple-600 hover:from-primary/90 hover:via-blue-600/90 hover:to-purple-600/90 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl border-0 group-hover:shadow-primary/25"
                onClick={handleDemoClick}
              >
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <Sparkles className="h-6 w-6 animate-pulse" />
                    <div className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full animate-ping"></div>
                  </div>
                  <span className="bg-gradient-to-r from-white to-yellow-100 bg-clip-text text-transparent font-extrabold">
                    Join Waitlist
                  </span>
                  <ArrowRight className="h-5 w-5 group-hover:translate-x-1 transition-transform duration-300" />
                </div>
                {/* Floating particles effect */}
                <div className="absolute inset-0 overflow-hidden rounded-xl">
                  <div
                    className="absolute top-2 left-4 w-1 h-1 bg-white/60 rounded-full animate-bounce"
                    style={{ animationDelay: "0s" }}
                  ></div>
                  <div
                    className="absolute top-4 right-6 w-1 h-1 bg-white/40 rounded-full animate-bounce"
                    style={{ animationDelay: "0.5s" }}
                  ></div>
                  <div
                    className="absolute bottom-3 left-8 w-1 h-1 bg-white/50 rounded-full animate-bounce"
                    style={{ animationDelay: "1s" }}
                  ></div>
                </div>
              </Button>
            </motion.div>

            {/* Secondary CTA - Enhanced with better visual hierarchy */}
            <motion.div
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
              className="relative group w-full sm:w-auto"
            >
              <Button
                size="lg"
                variant="outline"
                className="relative h-16 px-12 text-lg font-bold w-full sm:w-auto border-2 border-primary/30 bg-background/80 backdrop-blur-sm hover:bg-primary/5 hover:border-primary/50 transition-all duration-300 rounded-xl shadow-lg hover:shadow-xl group-hover:shadow-primary/10"
                onClick={handleLearnMoreClick}
              >
                <div className="flex items-center gap-3">
                  <div className="p-1 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors duration-300">
                    <TrendingUp className="h-5 w-5 text-primary" />
                  </div>
                  <span className="bg-gradient-to-r from-foreground to-primary bg-clip-text text-transparent font-bold">
                    Explore Features
                  </span>
                  <div className="w-2 h-2 bg-primary rounded-full opacity-60 group-hover:opacity-100 transition-opacity duration-300"></div>
                </div>
              </Button>
            </motion.div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.7, delay: 0.6 }}
            className="mt-16"
          >
            <p className="text-sm font-medium text-muted-foreground mb-8 text-center">
              Seamlessly connects with all major platforms:
            </p>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4 max-w-4xl mx-auto">
              <motion.div
                whileHover={{ y: -4, scale: 1.05 }}
                transition={{ duration: 0.3 }}
                className="group flex flex-col items-center gap-3 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 backdrop-blur-sm px-6 py-5 rounded-2xl border border-blue-200/50 dark:border-blue-800/30 hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-lg hover:shadow-blue-500/10 transition-all duration-300"
              >
                <div className="p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-md">
                  <Facebook className="h-6 w-6 text-white" />
                </div>
                <span className="text-sm font-semibold text-blue-700 dark:text-blue-300 group-hover:text-blue-800 dark:group-hover:text-blue-200 transition-colors">
                  Facebook
                </span>
              </motion.div>

              <motion.div
                whileHover={{ y: -4, scale: 1.05 }}
                transition={{ duration: 0.3, delay: 0.05 }}
                className="group flex flex-col items-center gap-3 bg-gradient-to-br from-pink-50 to-purple-100 dark:from-pink-900/20 dark:to-purple-800/20 backdrop-blur-sm px-6 py-5 rounded-2xl border border-pink-200/50 dark:border-pink-800/30 hover:border-pink-300 dark:hover:border-pink-600 hover:shadow-lg hover:shadow-pink-500/10 transition-all duration-300"
              >
                <div className="p-3 bg-gradient-to-br from-pink-500 to-purple-600 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-md">
                  <Instagram className="h-6 w-6 text-white" />
                </div>
                <span className="text-sm font-semibold text-pink-700 dark:text-pink-300 group-hover:text-pink-800 dark:group-hover:text-pink-200 transition-colors">
                  Instagram
                </span>
              </motion.div>

              <motion.div
                whileHover={{ y: -4, scale: 1.05 }}
                transition={{ duration: 0.3, delay: 0.1 }}
                className="group flex flex-col items-center gap-3 bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900/20 dark:to-slate-800/20 backdrop-blur-sm px-6 py-5 rounded-2xl border border-slate-200/50 dark:border-slate-800/30 hover:border-slate-300 dark:hover:border-slate-600 hover:shadow-lg hover:shadow-slate-500/10 transition-all duration-300"
              >
                <div className="p-3 bg-gradient-to-br from-slate-700 to-slate-900 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-md">
                  <Twitter className="h-6 w-6 text-white" />
                </div>
                <span className="text-sm font-semibold text-slate-700 dark:text-slate-300 group-hover:text-slate-800 dark:group-hover:text-slate-200 transition-colors">
                  Twitter/X
                </span>
              </motion.div>

              <motion.div
                whileHover={{ y: -4, scale: 1.05 }}
                transition={{ duration: 0.3, delay: 0.15 }}
                className="group flex flex-col items-center gap-3 bg-gradient-to-br from-red-50 to-red-100 dark:from-red-900/20 dark:to-red-800/20 backdrop-blur-sm px-6 py-5 rounded-2xl border border-red-200/50 dark:border-red-800/30 hover:border-red-300 dark:hover:border-red-600 hover:shadow-lg hover:shadow-red-500/10 transition-all duration-300"
              >
                <div className="p-3 bg-gradient-to-br from-red-500 to-red-600 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-md">
                  <Youtube className="h-6 w-6 text-white" />
                </div>
                <span className="text-sm font-semibold text-red-700 dark:text-red-300 group-hover:text-red-800 dark:group-hover:text-red-200 transition-colors">
                  YouTube
                </span>
              </motion.div>

              <motion.div
                whileHover={{ y: -4, scale: 1.05 }}
                transition={{ duration: 0.3, delay: 0.2 }}
                className="group flex flex-col items-center gap-3 bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-800/20 backdrop-blur-sm px-6 py-5 rounded-2xl border border-blue-200/50 dark:border-blue-800/30 hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-lg hover:shadow-blue-500/10 transition-all duration-300 md:col-span-1 col-span-2 md:mx-0 mx-auto max-w-[200px]"
              >
                <div className="p-3 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-md">
                  <Linkedin className="h-6 w-6 text-white" />
                </div>
                <span className="text-sm font-semibold text-blue-700 dark:text-blue-300 group-hover:text-blue-800 dark:group-hover:text-blue-200 transition-colors">
                  LinkedIn
                </span>
              </motion.div>
            </div>
          </motion.div>
        </section>

        {/* Enhanced Value Proposition Section */}
        <section className="py-24 px-4 bg-gradient-to-br from-primary/5 via-background to-secondary/5 relative overflow-hidden">
          {/* Background Elements */}
          <div className="absolute inset-0 -z-10">
            <div className="absolute top-1/4 left-1/4 w-72 h-72 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-full blur-3xl animate-pulse" />
            <div
              className="absolute bottom-1/4 right-1/4 w-72 h-72 bg-gradient-to-l from-accent/10 to-primary/10 rounded-full blur-3xl animate-pulse"
              style={{ animationDelay: "2s" }}
            />
          </div>

          <div className="container mx-auto relative z-10">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7 }}
              viewport={{ once: true }}
              className="text-center mb-20"
            >
              <div className="inline-flex items-center gap-2 bg-gradient-to-r from-primary/20 to-secondary/20 backdrop-blur-sm text-primary px-6 py-3 rounded-full text-sm font-bold mb-8 border border-primary/30 shadow-lg">
                <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
                <span>✨ Built for modern teams</span>
              </div>
              <h2 className="text-4xl md:text-6xl font-bold mb-6 leading-tight">
                Stop Wasting Time.
                <br />
                <span className="bg-gradient-to-r from-primary via-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Start Winning
                </span>
                <span className="bg-gradient-to-r from-purple-600 via-pink-600 to-primary bg-clip-text text-transparent">
                  {" "}
                  Social Media
                </span>
              </h2>
              <p className="text-xl md:text-2xl text-muted-foreground max-w-4xl mx-auto leading-relaxed font-medium">
                Transform your social media from time-consuming task to
                <span className="text-foreground font-semibold">
                  {" "}
                  revenue-generating powerhouse
                </span>{" "}
                with AI that works Always‑On to grow your business.
              </p>
            </motion.div>

            {/* Core Value Propositions */}
            <div className="grid md:grid-cols-3 gap-8 md:gap-12 mb-16">
              {/* Revenue Growth */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
                viewport={{ once: true }}
                className="group text-center"
              >
                <div className="w-16 h-16 mx-auto mb-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                  <TrendingUp className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-2xl font-bold mb-4 text-foreground">
                  Predictable Revenue Growth
                </h3>
                <p className="text-muted-foreground text-lg leading-relaxed">
                  AI-powered content strategy that drives consistent engagement
                  and converts followers into customers automatically.
                </p>
                <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 rounded-xl">
                  <div className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
                    Meaningful lift
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Improved engagement
                  </p>
                </div>
              </motion.div>

              {/* Time Savings */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.1 }}
                viewport={{ once: true }}
                className="group text-center"
              >
                <div className="w-16 h-16 mx-auto mb-6 bg-gradient-to-br from-green-500 to-teal-600 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                  <Clock className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-2xl font-bold mb-4 text-foreground">
                  Massive Time Reduction
                </h3>
                <p className="text-muted-foreground text-lg leading-relaxed">
                  From hours of daily content creation to minutes of strategic
                  oversight. Focus on your business, not your posts.
                </p>
                <div className="mt-6 p-4 bg-gradient-to-r from-green-50 to-teal-50 dark:from-green-950/20 dark:to-teal-950/20 rounded-xl">
                  <div className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-teal-600">
                    Hours saved
                  </div>
                  <p className="text-sm text-muted-foreground">Time saved</p>
                </div>
              </motion.div>

              {/* Viral Content */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.2 }}
                viewport={{ once: true }}
                className="group text-center"
              >
                <div className="w-16 h-16 mx-auto mb-6 bg-gradient-to-br from-orange-500 to-red-600 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                  <Zap className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-2xl font-bold mb-4 text-foreground">
                  Viral Content Engine
                </h3>
                <p className="text-muted-foreground text-lg leading-relaxed">
                  Advanced AI analyzes millions of viral posts to create content
                  optimized for maximum engagement and reach.
                </p>
                <div className="mt-6 p-4 bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20 rounded-xl">
                  <div className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-600 to-red-600">
                    Performance boost
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Content performance
                  </p>
                </div>
              </motion.div>
            </div>

            {/* Proof Points Section - Enhanced Mobile Layout */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.3 }}
              viewport={{ once: true }}
              className="bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 rounded-2xl p-6 md:p-8 lg:p-12 border border-primary/20 backdrop-blur-sm"
            >
              <div className="text-center mb-8">
                <h3 className="text-2xl md:text-3xl lg:text-4xl font-bold mb-4">
                  🎯 Why Teams Choose SocialWave
                </h3>
                <p className="text-base md:text-lg lg:text-xl text-muted-foreground max-w-3xl mx-auto">
                  Built for teams across industries to streamline their social
                  media workflows with AI‑powered assistance.
                </p>
              </div>

              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6">
                <div className="text-center p-4 md:p-6 bg-background/50 rounded-xl border border-primary/10">
                  <div className="text-2xl md:text-4xl font-bold text-primary mb-2">
                    Faster workflows
                  </div>
                  <div className="text-xs md:text-sm text-muted-foreground font-medium">
                    Time Savings
                  </div>
                </div>
                <div className="text-center p-4 md:p-6 bg-background/50 rounded-xl border border-primary/10">
                  <div className="text-2xl md:text-4xl font-bold text-primary mb-2">
                    Stronger engagement
                  </div>
                  <div className="text-xs md:text-sm text-muted-foreground font-medium">
                    Engagement Growth
                  </div>
                </div>
                <div className="text-center p-4 md:p-6 bg-background/50 rounded-xl border border-primary/10">
                  <div className="text-2xl md:text-4xl font-bold text-primary mb-2">
                    Better outcomes
                  </div>
                  <div className="text-xs md:text-sm text-muted-foreground font-medium">
                    Revenue Increase
                  </div>
                </div>
                <div className="text-center p-4 md:p-6 bg-background/50 rounded-xl border border-primary/10">
                  <div className="text-2xl md:text-4xl font-bold text-primary mb-2">
                    Always‑On
                  </div>
                  <div className="text-xs md:text-sm text-muted-foreground font-medium">
                    AI Monitoring
                  </div>
                </div>
              </div>

              {/* Bottom disclaimer */}
              <div className="text-center mt-8">
                <p className="text-xs text-muted-foreground">
                  *Based on average results from many teams using SocialWave for
                  several months
                </p>
              </div>
            </motion.div>
          </div>
        </section>

        {/* How it Works Section - Enhanced with Premium Animations */}
        <section className="py-24 px-4 bg-gradient-to-br from-secondary/5 via-background to-primary/5 relative overflow-hidden">
          {/* Background Elements */}
          <div className="absolute inset-0 -z-10">
            <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-full blur-3xl animate-pulse" />
            <div
              className="absolute bottom-1/4 right-1/4 w-64 h-64 bg-gradient-to-l from-accent/10 to-primary/10 rounded-full blur-3xl animate-pulse"
              style={{ animationDelay: "3s" }}
            />
          </div>

          <div className="container mx-auto text-center relative z-10">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7 }}
              viewport={{ once: true }}
              className="mb-20"
            >
              <div className="inline-flex items-center gap-2 bg-gradient-to-r from-primary/20 to-secondary/20 backdrop-blur-sm text-primary px-6 py-3 rounded-full text-sm font-bold mb-8 border border-primary/30 shadow-lg">
                <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
                <span>🚀 Simple 3-Step Process</span>
              </div>
              <h2 className="text-4xl md:text-6xl font-bold mb-6 leading-tight">
                From Zero to
                <br />
                <span className="bg-gradient-to-r from-primary via-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Social Hero
                </span>
              </h2>
              <p className="text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto leading-relaxed">
                Our streamlined process gets you from insight to impact in
                minutes, not months.
              </p>
            </motion.div>

            <div className="relative">
              {/* Enhanced connecting line with animation */}
              <div className="hidden md:block absolute top-1/2 left-0 w-full h-px -translate-y-1/2">
                <motion.svg
                  width="100%"
                  height="4"
                  className="stroke-primary/30"
                  initial={{ pathLength: 0 }}
                  whileInView={{ pathLength: 1 }}
                  transition={{ duration: 2, delay: 0.5 }}
                  viewport={{ once: true }}
                >
                  <motion.line
                    x1="0"
                    y1="2"
                    x2="100%"
                    y2="2"
                    strokeWidth="2"
                    strokeDasharray="12 8"
                    className="stroke-primary/40"
                  />
                </motion.svg>
              </div>

              <div className="grid md:grid-cols-3 gap-12 relative">
                {howItWorks.map((item, index) => (
                  <motion.div
                    key={item.step}
                    className="relative z-10 text-center group"
                    initial={{ opacity: 0, y: 40, scale: 0.8 }}
                    whileInView={{ opacity: 1, y: 0, scale: 1 }}
                    transition={{
                      duration: 0.6,
                      delay: index * 0.2,
                      type: "spring",
                      bounce: 0.3,
                    }}
                    viewport={{ once: true }}
                    whileHover={{ y: -10, scale: 1.05 }}
                  >
                    {/* Enhanced step circle with glow effect */}
                    <motion.div
                      className="mb-6 inline-flex items-center justify-center h-20 w-20 rounded-full bg-gradient-to-br from-primary to-primary/80 text-primary-foreground text-2xl font-bold shadow-xl border-4 border-background relative overflow-hidden group-hover:shadow-2xl group-hover:shadow-primary/25 transition-all duration-500"
                      whileHover={{ rotate: 360 }}
                      transition={{ duration: 0.8, type: "spring" }}
                    >
                      {/* Glow effect */}
                      <div className="absolute inset-0 bg-gradient-to-r from-primary/40 to-blue-500/40 rounded-full blur opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                      <span className="relative z-10">{item.step}</span>

                      {/* Floating particles */}
                      <div className="absolute inset-0 overflow-hidden rounded-full">
                        <div
                          className="absolute top-2 left-4 w-1 h-1 bg-white/60 rounded-full animate-bounce opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                          style={{ animationDelay: "0s" }}
                        ></div>
                        <div
                          className="absolute top-4 right-3 w-1 h-1 bg-white/40 rounded-full animate-bounce opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                          style={{ animationDelay: "0.3s" }}
                        ></div>
                        <div
                          className="absolute bottom-3 left-6 w-1 h-1 bg-white/50 rounded-full animate-bounce opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                          style={{ animationDelay: "0.6s" }}
                        ></div>
                      </div>
                    </motion.div>

                    <motion.h3
                      className="text-2xl md:text-3xl font-bold mb-4 group-hover:text-primary transition-colors duration-300"
                      initial={{ opacity: 0 }}
                      whileInView={{ opacity: 1 }}
                      transition={{ duration: 0.5, delay: index * 0.2 + 0.3 }}
                      viewport={{ once: true }}
                    >
                      {item.title}
                    </motion.h3>

                    <motion.p
                      className="text-muted-foreground text-lg leading-relaxed max-w-xs mx-auto group-hover:text-foreground/80 transition-colors duration-300"
                      initial={{ opacity: 0 }}
                      whileInView={{ opacity: 1 }}
                      transition={{ duration: 0.5, delay: index * 0.2 + 0.4 }}
                      viewport={{ once: true }}
                    >
                      {item.description}
                    </motion.p>

                    {/* Progress indicator */}
                    <motion.div
                      className="mt-6 h-1 bg-primary/20 rounded-full overflow-hidden max-w-24 mx-auto"
                      initial={{ width: 0 }}
                      whileInView={{ width: "6rem" }}
                      transition={{ duration: 0.8, delay: index * 0.2 + 0.6 }}
                      viewport={{ once: true }}
                    >
                      <motion.div
                        className="h-full bg-gradient-to-r from-primary to-blue-600 rounded-full"
                        initial={{ width: "0%" }}
                        whileInView={{ width: "100%" }}
                        transition={{ duration: 1, delay: index * 0.2 + 0.8 }}
                        viewport={{ once: true }}
                      />
                    </motion.div>
                  </motion.div>
                ))}
              </div>
            </div>

            {/* Call to action */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 1.2 }}
              viewport={{ once: true }}
              className="mt-16"
            >
              <motion.div
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
                className="inline-block"
              >
                <Button
                  size="lg"
                  className="h-16 px-12 text-lg font-bold bg-gradient-to-r from-primary via-blue-600 to-purple-600 hover:from-primary/90 hover:via-blue-600/90 hover:to-purple-600/90 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl border-0 group"
                  onClick={handleDemoClick}
                >
                  <div className="flex items-center gap-3">
                    <Sparkles className="h-6 w-6 animate-pulse" />
                    <span>Join Waitlist</span>
                    <ArrowRight className="h-5 w-5 group-hover:translate-x-1 transition-transform duration-300" />
                  </div>
                </Button>
              </motion.div>
            </motion.div>
          </div>
        </section>

        {/* Advanced Features Grid - Enhanced with Premium Animations */}
        <section className="py-24 px-4 bg-gradient-to-br from-secondary/5 via-background to-accent/5 relative overflow-hidden">
          {/* Background Elements */}
          <div className="absolute inset-0 -z-10">
            <div className="absolute top-1/3 left-1/3 w-80 h-80 bg-gradient-to-r from-primary/8 to-blue-500/8 rounded-full blur-3xl animate-pulse" />
            <div
              className="absolute bottom-1/3 right-1/3 w-80 h-80 bg-gradient-to-l from-purple-500/8 to-primary/8 rounded-full blur-3xl animate-pulse"
              style={{ animationDelay: "4s" }}
            />
          </div>

          <div className="container mx-auto relative z-10">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7 }}
              viewport={{ once: true }}
              className="text-center mb-20"
            >
              <div className="inline-flex items-center gap-2 bg-gradient-to-r from-primary/20 to-blue-500/20 backdrop-blur-sm text-primary px-6 py-3 rounded-full text-sm font-bold mb-8 border border-primary/30 shadow-lg">
                <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
                <span>🎨 Complete Feature Arsenal</span>
              </div>
              <h2 className="text-4xl md:text-6xl font-bold mb-6 leading-tight">
                <span className="bg-gradient-to-r from-primary via-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Content Lab
                </span>
                <br />
                Features
              </h2>
              <p className="text-xl md:text-2xl text-muted-foreground max-w-4xl mx-auto leading-relaxed">
                Everything you need to create, optimize, and scale viral content
                with AI-powered tools designed for modern creators.
              </p>
            </motion.div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
              {advancedFeatures.map((feature, index) => (
                <motion.div
                  key={feature.title}
                  initial={{ opacity: 0, y: 40, scale: 0.9 }}
                  whileInView={{ opacity: 1, y: 0, scale: 1 }}
                  transition={{
                    duration: 0.6,
                    delay: index * 0.08,
                    type: "spring",
                    bounce: 0.2,
                  }}
                  viewport={{ once: true }}
                  whileHover={{
                    y: -8,
                    scale: 1.02,
                    transition: { duration: 0.3, type: "spring", bounce: 0.4 },
                  }}
                  className="group relative bg-background/80 backdrop-blur-sm rounded-2xl p-8 shadow-xl border-2 border-primary/10 hover:shadow-2xl hover:border-primary/25 transition-all duration-500 overflow-hidden"
                >
                  {/* Background glow effect */}
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-blue-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />

                  {/* Floating particles */}
                  <div className="absolute top-4 right-4 opacity-20 group-hover:opacity-40 transition-opacity duration-300">
                    <div className="h-6 w-6 bg-primary/30 rounded-full animate-pulse" />
                  </div>
                  <div className="absolute bottom-4 left-4 opacity-20 group-hover:opacity-40 transition-opacity duration-300">
                    <div
                      className="h-4 w-4 bg-blue-500/30 rounded-full animate-bounce"
                      style={{ animationDelay: `${index * 0.1}s` }}
                    />
                  </div>

                  <div className="relative z-10">
                    {/* Enhanced icon with glow */}
                    <motion.div
                      className="p-4 bg-gradient-to-br from-primary/10 to-blue-500/10 text-primary rounded-2xl w-fit mb-6 group-hover:bg-gradient-to-br group-hover:from-primary/20 group-hover:to-blue-500/20 transition-all duration-500 shadow-lg group-hover:shadow-xl group-hover:shadow-primary/10"
                      whileHover={{
                        rotate: [0, -5, 5, -5, 0],
                        scale: 1.1,
                      }}
                      transition={{ duration: 0.5 }}
                    >
                      <feature.icon className="h-8 w-8 group-hover:scale-110 transition-transform duration-300" />

                      {/* Glow ring */}
                      <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-primary/20 to-blue-500/20 blur opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                    </motion.div>

                    {/* Enhanced title */}
                    <motion.h3
                      className="text-xl md:text-2xl font-bold mb-4 group-hover:text-primary transition-colors duration-300"
                      initial={{ opacity: 0 }}
                      whileInView={{ opacity: 1 }}
                      transition={{ duration: 0.5, delay: index * 0.08 + 0.2 }}
                      viewport={{ once: true }}
                    >
                      {feature.title}
                    </motion.h3>

                    {/* Enhanced description */}
                    <motion.p
                      className="text-muted-foreground leading-relaxed group-hover:text-foreground/80 transition-colors duration-300"
                      initial={{ opacity: 0 }}
                      whileInView={{ opacity: 1 }}
                      transition={{ duration: 0.5, delay: index * 0.08 + 0.3 }}
                      viewport={{ once: true }}
                    >
                      {feature.description}
                    </motion.p>

                    {/* Progress bar indicator */}
                    <motion.div
                      className="mt-6 h-1 bg-primary/10 rounded-full overflow-hidden"
                      initial={{ width: 0 }}
                      whileInView={{ width: "100%" }}
                      transition={{ duration: 0.8, delay: index * 0.08 + 0.4 }}
                      viewport={{ once: true }}
                    >
                      <motion.div
                        className="h-full bg-gradient-to-r from-primary to-blue-600 rounded-full"
                        initial={{ width: "0%" }}
                        whileInView={{ width: "75%" }}
                        transition={{ duration: 1, delay: index * 0.08 + 0.6 }}
                        viewport={{ once: true }}
                      />
                    </motion.div>

                    {/* Hover reveal: "Learn More" */}
                    <motion.div
                      className="mt-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                      initial={{ y: 10 }}
                      whileHover={{ y: 0 }}
                    >
                      <div className="flex items-center gap-2 text-sm text-primary font-semibold">
                        <span>Explore Feature</span>
                        <ArrowRight className="h-4 w-4 group-hover:translate-x-1 transition-transform duration-300" />
                      </div>
                    </motion.div>
                  </div>
                </motion.div>
              ))}
            </div>

            {/* Enhanced call to action */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.8 }}
              viewport={{ once: true }}
              className="text-center mt-16"
            >
              <motion.div
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
                className="inline-block"
              >
                <Button
                  size="lg"
                  variant="outline"
                  className="h-14 px-10 text-lg font-bold border-2 border-primary/30 bg-background/80 backdrop-blur-sm hover:bg-primary/5 hover:border-primary/50 transition-all duration-300 rounded-xl shadow-lg hover:shadow-xl group"
                >
                  <div className="flex items-center gap-3">
                    <div className="p-1 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors duration-300">
                      <Sparkles className="h-5 w-5 text-primary animate-pulse" />
                    </div>
                    <span className="bg-gradient-to-r from-foreground to-primary bg-clip-text text-transparent font-bold">
                      Join Waitlist
                    </span>
                    <div className="w-2 h-2 bg-primary rounded-full opacity-60 group-hover:opacity-100 transition-opacity duration-300"></div>
                  </div>
                </Button>
              </motion.div>
            </motion.div>
          </div>
        </section>

        {/* Features Showcase Section - Optimized */}
        <section
          ref={problemRef}
          className="py-24 px-4 bg-gradient-to-br from-primary/5 via-background to-secondary/5 relative overflow-hidden"
        >
          {/* Background Elements */}
          <div className="absolute inset-0 -z-10">
            <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-full blur-3xl animate-pulse" />
            <div
              className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-gradient-to-l from-accent/10 to-primary/10 rounded-full blur-3xl animate-pulse"
              style={{ animationDelay: "2s" }}
            />
          </div>

          <div className="container mx-auto relative z-10">
            {/* Enhanced Section Header */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7 }}
              viewport={{ once: true }}
              className="text-center mb-20"
            >
              <div className="inline-flex items-center gap-2 bg-gradient-to-r from-primary/20 to-secondary/20 backdrop-blur-sm text-primary px-6 py-3 rounded-full text-sm font-bold mb-8 border border-primary/30 shadow-lg">
                <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
                <span>🚀 Core Platform Features</span>
              </div>
              <h2 className="text-4xl md:text-6xl font-bold mb-6 leading-tight">
                One Platform,
                <br />
                <span className="bg-gradient-to-r from-primary via-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Limitless
                </span>
                <span className="bg-gradient-to-r from-purple-600 via-pink-600 to-primary bg-clip-text text-transparent">
                  {" "}
                  Potential
                </span>
              </h2>
              <p className="text-xl md:text-2xl text-muted-foreground max-w-4xl mx-auto leading-relaxed font-medium">
                Explore how SocialWave's core features work in synergy to
                transform your social media workflow from reactive to proactive.
              </p>
            </motion.div>

            {/* Mobile-First Tab Interface */}
            <Tabs defaultValue={showcaseFeatures[0]?.value} className="w-full">
              {/* Mobile Tab Navigation - Horizontal Scroll */}
              <div className="mb-8 md:mb-12">
                <TabsList className="grid w-full grid-cols-1 md:grid-cols-3 gap-3 h-auto bg-transparent p-0">
                  {showcaseFeatures.map((feature, index) => (
                    <motion.div
                      key={feature.value}
                      initial={{ opacity: 0, y: 20 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.5, delay: index * 0.1 }}
                      viewport={{ once: true }}
                    >
                      <TabsTrigger
                        value={feature.value}
                        className="flex flex-col md:flex-row items-center gap-4 p-6 rounded-2xl text-left h-full w-full bg-background/80 backdrop-blur-sm border-2 border-primary/10 hover:border-primary/30 data-[state=active]:border-primary/50 data-[state=active]:bg-primary/5 data-[state=active]:shadow-lg transition-all duration-300 group hover:scale-[1.02] hover:shadow-md"
                      >
                        <motion.div
                          className="p-4 bg-gradient-to-br from-primary/20 to-blue-500/20 text-primary rounded-2xl group-hover:scale-110 group-data-[state=active]:scale-110 transition-transform duration-300 shadow-lg"
                          whileHover={{ rotate: 5 }}
                        >
                          <feature.icon className="h-8 w-8" />
                        </motion.div>
                        <div className="text-center md:text-left">
                          <h4 className="font-bold text-lg mb-1 group-hover:text-primary group-data-[state=active]:text-primary transition-colors duration-300">
                            {feature.title}
                          </h4>
                          <p className="text-sm text-muted-foreground group-hover:text-foreground/80 transition-colors duration-300">
                            {feature.heading}
                          </p>
                        </div>
                      </TabsTrigger>
                    </motion.div>
                  ))}
                </TabsList>
              </div>

              {/* Enhanced Tab Content */}
              {showcaseFeatures.map((feature, featureIndex) => (
                <TabsContent key={feature.value} value={feature.value}>
                  <motion.div
                    key={feature.value}
                    initial={{ opacity: 0, y: 30, scale: 0.95 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    exit={{ opacity: 0, y: -30, scale: 0.95 }}
                    transition={{ duration: 0.6, type: "spring", bounce: 0.2 }}
                    className="grid lg:grid-cols-2 gap-12 items-center"
                  >
                    {/* Enhanced Feature Visualization */}
                    <motion.div
                      className="order-2 lg:order-1 rounded-2xl shadow-2xl overflow-hidden bg-gradient-to-br from-primary/10 via-background/50 to-secondary/10 backdrop-blur-sm p-8 border-2 border-primary/20 relative group cursor-pointer hover:shadow-3xl transition-all duration-500"
                      whileHover={{ scale: 1.02, y: -8 }}
                      transition={{ duration: 0.4, type: "spring" }}
                    >
                      {/* Background Pattern */}
                      <div className="absolute inset-0 opacity-20 group-hover:opacity-30 transition-opacity duration-500">
                        <div className="absolute top-0 right-0 w-32 h-32 bg-primary/30 rounded-full blur-3xl" />
                        <div className="absolute bottom-0 left-0 w-24 h-24 bg-secondary/30 rounded-full blur-2xl" />
                      </div>

                      {/* Feature Visualization */}
                      <div className="text-center relative z-10">
                        <motion.div
                          className="relative mx-auto mb-8"
                          initial={{ scale: 0.8, opacity: 0 }}
                          animate={{ scale: 1, opacity: 1 }}
                          transition={{ duration: 0.6, delay: 0.2 }}
                        >
                          {/* Main Icon */}
                          <div className="h-24 w-24 bg-gradient-to-br from-primary/30 to-blue-500/30 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:bg-gradient-to-br group-hover:from-primary/40 group-hover:to-blue-500/40 transition-all duration-500 shadow-xl">
                            <feature.icon className="h-12 w-12 text-primary" />
                          </div>

                          {/* Animated Progress Indicators */}
                          <div className="flex justify-center gap-3 mb-6">
                            {[1, 2, 3, 4].map((i) => (
                              <motion.div
                                key={i}
                                className="h-3 w-12 bg-primary/20 rounded-full overflow-hidden shadow-inner"
                                initial={{ width: 0 }}
                                animate={{ width: 48 }}
                                transition={{ duration: 0.8, delay: i * 0.15 }}
                              >
                                <motion.div
                                  className="h-full bg-gradient-to-r from-primary to-blue-500 rounded-full"
                                  initial={{ width: "0%" }}
                                  animate={{ width: "100%" }}
                                  transition={{
                                    duration: 1.5,
                                    delay: i * 0.2,
                                    repeat: Infinity,
                                    repeatType: "reverse",
                                    ease: "easeInOut",
                                  }}
                                />
                              </motion.div>
                            ))}
                          </div>

                          {/* Interactive Elements */}
                          <div className="grid grid-cols-2 gap-4 mb-6">
                            <motion.div
                              className="bg-background/80 backdrop-blur-sm rounded-xl p-4 border border-primary/20 hover:border-primary/40 transition-all duration-300"
                              whileHover={{ scale: 1.05 }}
                            >
                              <div className="h-2 w-2 bg-green-500 rounded-full mb-2 animate-pulse" />
                              <div className="text-xs font-medium">Active</div>
                            </motion.div>
                            <motion.div
                              className="bg-background/80 backdrop-blur-sm rounded-xl p-4 border border-primary/20 hover:border-primary/40 transition-all duration-300"
                              whileHover={{ scale: 1.05 }}
                            >
                              <div
                                className="h-2 w-2 bg-blue-500 rounded-full mb-2 animate-pulse"
                                style={{ animationDelay: "0.5s" }}
                              />
                              <div className="text-xs font-medium">
                                Processing
                              </div>
                            </motion.div>
                          </div>
                        </motion.div>

                        <h4 className="text-2xl font-bold text-foreground mb-3">
                          {feature.title} in Action
                        </h4>
                        <p className="text-muted-foreground text-base mb-4">
                          Experience the power of {feature.title.toLowerCase()}{" "}
                          with real-time insights
                        </p>
                      </div>

                      {/* Floating particles for visual interest */}
                      <div className="absolute top-6 right-6 opacity-20 group-hover:opacity-40 transition-opacity duration-300">
                        <div className="h-10 w-10 bg-primary/30 rounded-full animate-pulse" />
                      </div>
                      <div className="absolute bottom-6 left-6 opacity-20 group-hover:opacity-40 transition-opacity duration-300">
                        <div
                          className="h-8 w-8 bg-secondary/30 rounded-full animate-bounce"
                          style={{ animationDelay: "0.5s" }}
                        />
                      </div>
                    </motion.div>

                    {/* Enhanced Content Area */}
                    <div className="order-1 lg:order-2 space-y-6">
                      <motion.div
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.6, delay: 0.2 }}
                      >
                        <h3 className="text-3xl md:text-4xl font-bold mb-4 leading-tight">
                          {feature.heading}
                        </h3>
                        <p className="text-muted-foreground text-lg md:text-xl leading-relaxed font-medium">
                          {feature.description}
                        </p>
                      </motion.div>

                      {/* Enhanced feature points with better mobile layout */}
                      <motion.div
                        className="space-y-4"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ duration: 0.6, delay: 0.4 }}
                      >
                        {feature.points.map((point, index) => (
                          <motion.div
                            key={index}
                            className="flex items-start gap-4 p-4 bg-background/50 backdrop-blur-sm rounded-xl border border-primary/10 hover:border-primary/25 hover:bg-primary/5 transition-all duration-300 group/point"
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{
                              duration: 0.5,
                              delay: 0.5 + index * 0.1,
                            }}
                            whileHover={{ scale: 1.02 }}
                          >
                            <div className="p-2 bg-primary/10 rounded-full flex-shrink-0 group-hover/point:bg-primary/20 transition-colors duration-300">
                              <Check className="h-4 w-4 text-primary" />
                            </div>
                            <span className="font-medium leading-relaxed group-hover/point:text-foreground transition-colors duration-300">
                              {point}
                            </span>
                          </motion.div>
                        ))}
                      </motion.div>

                      {/* Enhanced Performance Metrics */}
                      <motion.div
                        className="grid grid-cols-2 gap-4"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.6, delay: 0.7 }}
                      >
                        <motion.div
                          className="bg-gradient-to-br from-primary/10 to-blue-500/10 rounded-2xl p-6 text-center border border-primary/20 hover:border-primary/40 hover:shadow-lg transition-all duration-300"
                          whileHover={{ scale: 1.05, y: -2 }}
                        >
                          <div className="text-3xl font-bold text-primary mb-2">
                            {featureIndex === 0
                              ? "Performance boost"
                              : featureIndex === 1
                                ? "High accuracy"
                                : "Growth acceleration"}
                          </div>
                          <div className="text-sm text-muted-foreground font-medium">
                            {featureIndex === 0
                              ? "Faster Response Time"
                              : featureIndex === 1
                                ? "AI Accuracy Rate"
                                : "Growth Acceleration"}
                          </div>
                        </motion.div>
                        <motion.div
                          className="bg-gradient-to-br from-secondary/10 to-purple-500/10 rounded-2xl p-6 text-center border border-secondary/20 hover:border-secondary/40 hover:shadow-lg transition-all duration-300"
                          whileHover={{ scale: 1.05, y: -2 }}
                        >
                          <div className="text-3xl font-bold text-secondary-foreground mb-2">
                            {featureIndex === 0
                              ? "Always‑On"
                              : featureIndex === 1
                                ? "Flexible"
                                : "7 Days"}
                          </div>
                          <div className="text-sm text-muted-foreground font-medium">
                            {featureIndex === 0
                              ? "Active Monitoring"
                              : featureIndex === 1
                                ? "Response Variations"
                                : "Content Strategy"}
                          </div>
                        </motion.div>
                      </motion.div>

                      {/* Call to Action */}
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.6, delay: 0.8 }}
                        className="pt-4"
                      >
                        <motion.div
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          <Button
                            size="lg"
                            className="w-full md:w-auto h-14 px-8 text-lg font-bold bg-gradient-to-r from-primary via-blue-600 to-purple-600 hover:from-primary/90 hover:via-blue-600/90 hover:to-purple-600/90 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl border-0 group"
                          >
                            <div className="flex items-center gap-3">
                              <Sparkles className="h-5 w-5 animate-pulse" />
                              <span>Join Waitlist</span>
                              <ArrowRight className="h-5 w-5 group-hover:translate-x-1 transition-transform duration-300" />
                            </div>
                          </Button>
                        </motion.div>
                      </motion.div>
                    </div>
                  </motion.div>
                </TabsContent>
              ))}
            </Tabs>

            {/* Complete Features Summary */}
            <motion.div
              className="mt-20 text-center"
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.3 }}
              viewport={{ once: true }}
            >
              <div className="bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 rounded-2xl p-8 md:p-12 border border-primary/20 backdrop-blur-sm">
                <h3 className="text-3xl md:text-4xl font-bold mb-6">
                  🎯 Complete Feature Arsenal
                </h3>
                <p className="text-lg md:text-xl text-muted-foreground mb-8 max-w-4xl mx-auto leading-relaxed">
                  Every tool you need to dominate social media, all powered by
                  cutting-edge AI and designed for maximum impact and growth.
                </p>

                {/* Quick Feature Grid */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto">
                  <div className="bg-background/50 rounded-xl p-4 border border-primary/10">
                    <div className="text-2xl font-bold text-primary mb-1">
                      AI Tools
                    </div>
                    <div className="text-xs text-muted-foreground">
                      AI Tools
                    </div>
                  </div>
                  <div className="bg-background/50 rounded-xl p-4 border border-primary/10">
                    <div className="text-2xl font-bold text-primary mb-1">
                      Major
                    </div>
                    <div className="text-xs text-muted-foreground">
                      Platforms
                    </div>
                  </div>
                  <div className="bg-background/50 rounded-xl p-4 border border-primary/10">
                    <div className="text-2xl font-bold text-primary mb-1">
                      Always‑On
                    </div>
                    <div className="text-xs text-muted-foreground">
                      Monitoring
                    </div>
                  </div>
                  <div className="bg-background/50 rounded-xl p-4 border border-primary/10">
                    <div className="text-2xl font-bold text-primary mb-1">
                      Flexible
                    </div>
                    <div className="text-xs text-muted-foreground">
                      Possibilities
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        </section>

        {/* Target Audience Section */}
        <section className="py-24 px-4 bg-gradient-to-b from-background to-secondary/5">
          <div className="container mx-auto">
            {/* Section Header */}
            <div className="text-center mb-16">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
                viewport={{ once: true }}
                className="mb-6"
              >
                <div className="inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-semibold mb-4">
                  🎯 <span>Perfect For You</span>
                </div>
              </motion.div>
              <motion.h2
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.1 }}
                viewport={{ once: true }}
                className="text-4xl md:text-5xl font-bold mb-6"
              >
                🚀 Who SocialWave Transforms
              </motion.h2>
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.2 }}
                viewport={{ once: true }}
                className="text-xl text-muted-foreground max-w-3xl mx-auto"
              >
                From Fortune 500 companies to solopreneurs, SocialWave empowers
                everyone to achieve viral success with AI-powered social
                intelligence.
              </motion.p>
            </div>

            {/* Primary Target Audiences */}
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
              {/* Enterprise Brands */}
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
                viewport={{ once: true }}
                className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-2xl p-8 border border-blue-200 dark:border-blue-800 relative overflow-hidden"
              >
                <div className="absolute top-4 right-4 text-3xl">🏢</div>
                <div className="mb-4">
                  <h3 className="text-2xl font-bold text-blue-800 dark:text-blue-200 mb-2">
                    Enterprise Brands
                  </h3>
                  <p className="text-blue-600 dark:text-blue-300 text-sm font-semibold">
                    Enterprise scale
                  </p>
                </div>

                <div className="space-y-3 mb-6">
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-blue-700 dark:text-blue-300">
                      <strong>Challenge:</strong> Managing multiple social
                      platforms with limited resources
                    </p>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-blue-700 dark:text-blue-300">
                      <strong>Solution:</strong> AI-powered automation for
                      instant insights and Always‑On monitoring
                    </p>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-blue-700 dark:text-blue-300">
                      <strong>Benefit:</strong> Significant time savings and
                      improved response efficiency
                    </p>
                  </div>
                </div>

                <div className="bg-blue-600 text-white rounded-lg p-3 text-center">
                  <div className="text-lg font-bold">Enterprise Ready</div>
                  <div className="text-xs opacity-90">
                    Scalable AI-powered solutions
                  </div>
                </div>
              </motion.div>

              {/* Marketing Agencies */}
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.1 }}
                viewport={{ once: true }}
                className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-2xl p-8 border border-purple-200 dark:border-purple-800 relative overflow-hidden"
              >
                <div className="absolute top-4 right-4 text-3xl">🎨</div>
                <div className="mb-4">
                  <h3 className="text-2xl font-bold text-purple-800 dark:text-purple-200 mb-2">
                    Marketing Agencies
                  </h3>
                  <p className="text-purple-600 dark:text-purple-300 text-sm font-semibold">
                    Across portfolios
                  </p>
                </div>

                <div className="space-y-3 mb-6">
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-purple-700 dark:text-purple-300">
                      <strong>Pain Point:</strong> Scaling personalized insights
                      across hundreds of clients
                    </p>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-purple-700 dark:text-purple-300">
                      <strong>Solution:</strong> White-label AI platform, bulk
                      client management, automated reporting
                    </p>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-purple-700 dark:text-purple-300">
                      <strong>Result:</strong> Improved client satisfaction and
                      streamlined workflow management
                    </p>
                  </div>
                </div>

                <div className="bg-purple-600 text-white rounded-lg p-3 text-center">
                  <div className="text-lg font-bold">Agency Growth</div>
                  <div className="text-xs opacity-90">Scale efficiently</div>
                </div>
              </motion.div>

              {/* Content Creators */}
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.2 }}
                viewport={{ once: true }}
                className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-2xl p-8 border border-green-200 dark:border-green-800 relative overflow-hidden"
              >
                <div className="absolute top-4 right-4 text-3xl">🌟</div>
                <div className="mb-4">
                  <h3 className="text-2xl font-bold text-green-800 dark:text-green-200 mb-2">
                    Content Creators
                  </h3>
                  <p className="text-green-600 dark:text-green-300 text-sm font-semibold">
                    Growing audiences
                  </p>
                </div>

                <div className="space-y-3 mb-6">
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-green-700 dark:text-green-300">
                      <strong>Pain Point:</strong> Inconsistent viral content,
                      algorithm changes, burnout
                    </p>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-green-700 dark:text-green-300">
                      <strong>Solution:</strong> AI viral prediction,
                      trend-first content, personal brand optimization
                    </p>
                  </div>
                  <div className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm text-green-700 dark:text-green-300">
                      <strong>Result:</strong> Improved content performance and
                      audience growth
                    </p>
                  </div>
                </div>

                <div className="bg-green-600 text-white rounded-lg p-3 text-center">
                  <div className="text-lg font-bold">Creator Success</div>
                  <div className="text-xs opacity-90">
                    Consistent viral content
                  </div>
                </div>
              </motion.div>
            </div>

            {/* Secondary Target Audiences */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="bg-gradient-to-r from-secondary/10 to-primary/10 rounded-2xl p-8 border border-primary/20"
            >
              <div className="text-center mb-8">
                <h3 className="text-2xl font-bold mb-4">
                  🎆 Also Perfect For These Professionals
                </h3>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  SocialWave adapts to any social media challenge, regardless of
                  industry or size.
                </p>
              </div>

              <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-background rounded-xl p-6 text-center shadow-md border">
                  <div className="text-3xl mb-3">💼</div>
                  <h4 className="font-bold mb-2">B2B SaaS Companies</h4>
                  <p className="text-sm text-muted-foreground">
                    LinkedIn thought leadership, lead generation
                  </p>
                </div>
                <div className="bg-background rounded-xl p-6 text-center shadow-md border">
                  <div className="text-3xl mb-3">🏭</div>
                  <h4 className="font-bold mb-2">E-commerce Brands</h4>
                  <p className="text-sm text-muted-foreground">
                    Product launches, seasonal campaigns
                  </p>
                </div>
                <div className="bg-background rounded-xl p-6 text-center shadow-md border">
                  <div className="text-3xl mb-3">🏥</div>
                  <h4 className="font-bold mb-2">Local Businesses</h4>
                  <p className="text-sm text-muted-foreground">
                    Community engagement, local trends
                  </p>
                </div>
                <div className="bg-background rounded-xl p-6 text-center shadow-md border">
                  <div className="text-3xl mb-3">🎯</div>
                  <h4 className="font-bold mb-2">Personal Brands</h4>
                  <p className="text-sm text-muted-foreground">
                    Thought leadership, audience building
                  </p>
                </div>
              </div>
            </motion.div>
          </div>
        </section>

        {/* Pricing Section - Enhanced Mobile Layout */}
        <section ref={pricingRef} className="py-20 px-4 bg-background">
          <div className="container mx-auto">
            {/* Value-Driven Header */}
            <div className="text-center mb-16">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                viewport={{ once: true }}
                className="mb-6"
              >
                <div className="inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-semibold mb-4">
                  💡 <span>Flexible, usage‑friendly pricing</span>
                </div>
              </motion.div>
              <motion.h2
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.1 }}
                viewport={{ once: true }}
                className="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 gradient-text"
              >
                💎 Invest in Growth, Not Hours
              </motion.h2>
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
                viewport={{ once: true }}
                className="text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto mb-8"
              >
                Choose the plan that fits your stage. Designed to save time and
                support growth without complexity.
              </motion.p>

              {/* Value Proposition - Mobile Optimized */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.3 }}
                viewport={{ once: true }}
                className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6 max-w-4xl mx-auto mb-8 p-4 md:p-6 bg-gradient-to-r from-green-50 to-blue-50 rounded-xl border border-green-200"
              >
                <div className="text-center">
                  <div className="text-xl md:text-2xl font-bold text-blue-600 mb-2">
                    AI-Powered
                  </div>
                  <div className="text-sm text-muted-foreground">
                    Intelligent automation
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-xl md:text-2xl font-bold text-green-600 mb-2">
                    Time Saving
                  </div>
                  <div className="text-sm text-muted-foreground">
                    Streamlined workflow
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-xl md:text-2xl font-bold text-purple-600 mb-2">
                    Scalable
                  </div>
                  <div className="text-sm text-muted-foreground">
                    Grows with your business
                  </div>
                </div>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.4 }}
                viewport={{ once: true }}
                className="flex flex-col sm:flex-row justify-center gap-4 sm:gap-6 text-sm text-green-600 font-semibold"
              >
                <div className="flex items-center justify-center gap-2">
                  <Check className="h-4 w-4 flex-shrink-0" />
                  <span>Efficient automation</span>
                </div>
                <div className="flex items-center justify-center gap-2">
                  <Check className="h-4 w-4 flex-shrink-0" />
                  <span>Professional results</span>
                </div>
                <div className="flex items-center justify-center gap-2">
                  <Check className="h-4 w-4 flex-shrink-0" />
                  <span>Consistent growth</span>
                </div>
              </motion.div>
            </div>

            {/* Simple Pricing Message - Mobile Optimized */}
            <div className="text-center">
              <div className="bg-gradient-to-r from-primary/10 to-secondary/10 rounded-2xl p-8 md:p-12 border border-primary/20 max-w-2xl mx-auto">
                <h3 className="text-2xl md:text-3xl font-bold mb-6 text-primary">
                  Pricing on Request
                </h3>
                <p className="text-base md:text-lg text-muted-foreground mb-8">
                  Get a custom quote tailored to your business needs. Contact us
                  to discuss pricing options that work for you.
                </p>
                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <Button
                    size="lg"
                    className="bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-primary-foreground shadow-lg hover:shadow-xl border-2 border-primary/20"
                    asChild
                  >
                    <a
                      href="https://calendly.com/varunkrishna08/30min?month=2025-08"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      📞 Contact Sales
                    </a>
                  </Button>
                  <Button
                    variant="outline"
                    size="lg"
                    className="hover:bg-primary/10 hover:border-primary/50 transition-all duration-300"
                    asChild
                  >
                    <a
                      href="https://calendly.com/varunkrishna08/30min?month=2025-08"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      💬 Get Custom Quote
                    </a>
                  </Button>
                </div>
              </div>
            </div>

            {/* Additional Value Propositions - Mobile Enhanced */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="text-center mt-16"
            >
              {/* Security & Compliance */}
              <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 md:p-8 mb-8 border border-green-200">
                <h3 className="text-xl md:text-2xl font-bold mb-4">
                  🛡️ Enterprise-Grade Security
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6">
                  <div className="flex flex-col items-center">
                    <Shield className="h-6 w-6 md:h-8 md:w-8 text-green-600 mb-2" />
                    <div className="font-semibold text-sm md:text-base">
                      Strong Encryption
                    </div>
                    <div className="text-xs md:text-sm text-muted-foreground">
                      Bank-level security
                    </div>
                  </div>
                  <div className="flex flex-col items-center">
                    <Check className="h-6 w-6 md:h-8 md:w-8 text-green-600 mb-2" />
                    <div className="font-semibold text-sm md:text-base">
                      GDPR Compliant
                    </div>
                    <div className="text-xs md:text-sm text-muted-foreground">
                      EU privacy standards
                    </div>
                  </div>
                  <div className="flex flex-col items-center">
                    <Clock className="h-6 w-6 md:h-8 md:w-8 text-green-600 mb-2" />
                    <div className="font-semibold text-sm md:text-base">
                      High Uptime
                    </div>
                    <div className="text-xs md:text-sm text-muted-foreground">
                      Always available
                    </div>
                  </div>
                </div>
              </div>

              {/* Money-Back Guarantee */}
              <div className="hidden">
                <h3 className="text-xl md:text-2xl font-bold mb-4">
                  💰 Risk-Free Guarantee
                </h3>
                <p className="text-base md:text-lg text-muted-foreground mb-6 max-w-2xl mx-auto">
                  We're so confident SocialWave will transform your social media
                  results, we offer a 30-day money-back guarantee. No questions
                  asked.
                </p>
                <div className="grid grid-cols-2 gap-4 md:gap-6 max-w-lg mx-auto">
                  <div className="text-center">
                    <div className="text-2xl md:text-3xl font-bold text-primary mb-2">
                      Money‑Back
                    </div>
                    <div className="text-xs md:text-sm text-muted-foreground">
                      Money-back guarantee
                    </div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl md:text-3xl font-bold text-primary mb-2">
                      Always‑On
                    </div>
                    <div className="text-xs md:text-sm text-muted-foreground">
                      Customer support
                    </div>
                  </div>
                </div>
              </div>

              {/* Custom Solutions */}
              <div className="bg-background rounded-xl p-6 md:p-8 border border-border">
                <h3 className="text-lg md:text-xl font-bold mb-4">
                  Need Something Custom?
                </h3>
                <p className="text-sm md:text-base text-muted-foreground mb-6">
                  Enterprise teams and agencies can get custom solutions,
                  white-label options, and dedicated account management.
                </p>
                <div className="flex flex-col sm:flex-row justify-center gap-4">
                  <Button
                    variant="outline"
                    className="hover:bg-primary/10 hover:border-primary/50 transition-all duration-300"
                    asChild
                  >
                    <a
                      href="https://calendly.com/varunkrishna08/30min?month=2025-08"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-2"
                    >
                      📞 Book Strategy Call
                      <Calendar className="h-4 w-4" />
                    </a>
                  </Button>
                  <Button
                    variant="outline"
                    className="hover:bg-primary/10 hover:border-primary/50 transition-all duration-300"
                    asChild
                  >
                    <a
                      href="https://calendly.com/varunkrishna08/30min?month=2025-08"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-2"
                    >
                      💬 Get Custom Quote
                      <MessageCircle className="h-4 w-4" />
                    </a>
                  </Button>
                </div>
              </div>
            </motion.div>
          </div>
        </section>

        {/* FAQ Section */}
        <section className="py-20 px-4 bg-secondary/20">
          <div className="container mx-auto max-w-3xl">
            <motion.h2
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              viewport={{ once: true }}
              className="text-4xl font-bold text-center mb-12"
            >
              ❓ Frequently Asked Questions
            </motion.h2>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              viewport={{ once: true }}
            >
              <Accordion type="single" collapsible className="w-full">
                {faqs.map((faq, index) => (
                  <AccordionItem value={`item-${index}`} key={index}>
                    <AccordionTrigger className="text-lg font-semibold text-left">
                      {faq.question}
                    </AccordionTrigger>
                    <AccordionContent className="text-base text-muted-foreground">
                      {faq.answer}
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            </motion.div>
          </div>
        </section>

        {/* Final CTA Section */}
        <section className="py-20 px-4 bg-gradient-to-br from-primary/10 via-background to-secondary/10">
          <div className="container mx-auto text-center">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              whileInView={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="max-w-4xl mx-auto"
            >
              <h2 className="text-4xl md:text-5xl font-bold mb-6 gradient-text">
                🎨 Your Content Lab Awaits
              </h2>
              <p className="text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
                Join the content creation revolution. Get early access to the
                most focused AI content lab for marketers and brands and start
                creating viral content today.
              </p>
              <div className="max-w-md mx-auto mb-8">
                <WaitlistForm />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-3xl mx-auto text-sm text-muted-foreground">
                <div className="flex items-center justify-center gap-2">
                  <Check className="h-4 w-4 text-primary" />
                  <span>Early access</span>
                </div>
                <div className="flex items-center justify-center gap-2">
                  <Check className="h-4 w-4 text-primary" />
                  <span>Exclusive updates</span>
                </div>
                <div className="flex items-center justify-center gap-2">
                  <Check className="h-4 w-4 text-primary" />
                  <span>Special launch pricing</span>
                </div>
              </div>
            </motion.div>
          </div>
        </section>
        {showStickyCTA && (
          <div className="fixed bottom-0 left-0 right-0 z-40 md:hidden safe-area-bottom">
            <div className="mx-4 mb-4 rounded-2xl border border-primary/30 bg-background/80 backdrop-blur-md shadow-xl">
              <Button
                size="lg"
                className="w-full h-14 text-lg font-bold bg-gradient-to-r from-primary via-blue-600 to-purple-600 hover:from-primary/90 hover:via-blue-600/90 hover:to-purple-600/90 text-white rounded-2xl"
                onClick={handleDemoClick}
              >
                <div className="flex items-center justify-center gap-2">
                  <Sparkles className="h-5 w-5" />
                  <span>Join Waitlist</span>
                  <ArrowRight className="h-5 w-5" />
                </div>
              </Button>
            </div>
          </div>
        )}
      </main>

      {/* Enhanced Footer - Mobile-First Design */}
      <footer className="bg-gradient-to-br from-muted/50 to-background border-t border-border">
        <div className="container mx-auto px-4 py-12 md:py-16">
          {/* Main Footer Content */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 md:gap-12 mb-8 md:mb-12">
            {/* Brand Section - Mobile Optimized */}
            <div className="lg:col-span-2">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                viewport={{ once: true }}
                className="mb-6"
              >
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 bg-gradient-to-br from-primary to-primary/80 rounded-xl shadow-lg">
                    <MessageSquare className="h-6 w-6 md:h-8 md:w-8 text-primary-foreground" />
                  </div>
                  <h3 className="text-xl md:text-2xl font-bold gradient-text">
                    SocialWave
                  </h3>
                </div>
                <p className="text-sm md:text-base text-muted-foreground mb-6 max-w-md leading-relaxed">
                  The world's most advanced AI-powered social media platform.
                  Transform your social presence into measurable business growth
                  with intelligent automation that works Always‑On.
                </p>

                {/* Social Links - Mobile Enhanced */}
                <div className="flex flex-wrap gap-3">
                  <motion.div
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    className="p-2 bg-background border border-border rounded-lg hover:border-primary/50 hover:bg-primary/5 transition-all duration-300 cursor-pointer"
                  >
                    <Twitter className="h-4 w-4 md:h-5 md:w-5 text-muted-foreground hover:text-primary" />
                  </motion.div>
                  <motion.div
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    className="p-2 bg-background border border-border rounded-lg hover:border-primary/50 hover:bg-primary/5 transition-all duration-300 cursor-pointer"
                  >
                    <Instagram className="h-4 w-4 md:h-5 md:w-5 text-muted-foreground hover:text-primary" />
                  </motion.div>
                  <motion.div
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    className="p-2 bg-background border border-border rounded-lg hover:border-primary/50 hover:bg-primary/5 transition-all duration-300 cursor-pointer"
                  >
                    <Linkedin className="h-4 w-4 md:h-5 md:w-5 text-muted-foreground hover:text-primary" />
                  </motion.div>
                  <motion.div
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    className="p-2 bg-background border border-border rounded-lg hover:border-primary/50 hover:bg-primary/5 transition-all duration-300 cursor-pointer"
                  >
                    <Youtube className="h-4 w-4 md:h-5 md:w-5 text-muted-foreground hover:text-primary" />
                  </motion.div>
                </div>
              </motion.div>
            </div>

            {/* Quick Links - Mobile Friendly */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.1 }}
              viewport={{ once: true }}
            >
              <h4 className="text-base md:text-lg font-semibold mb-4 text-foreground">
                Product
              </h4>
              <ul className="space-y-3">
                <li>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="p-0 h-auto text-sm text-muted-foreground hover:text-primary hover:bg-transparent justify-start"
                    disabled
                  >
                    Features
                  </Button>
                </li>
                <li>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="p-0 h-auto text-sm text-muted-foreground hover:text-primary hover:bg-transparent justify-start"
                    disabled
                  >
                    Pricing
                  </Button>
                </li>
                <li>
                  <Link
                    to="/blog"
                    className="block text-sm text-muted-foreground hover:text-primary transition-colors duration-200"
                  >
                    Blog
                  </Link>
                </li>
                <li>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="p-0 h-auto text-sm text-muted-foreground hover:text-primary hover:bg-transparent justify-start"
                    disabled
                  >
                    Integrations
                  </Button>
                </li>
              </ul>
            </motion.div>

            {/* Support Links - Mobile Enhanced */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              viewport={{ once: true }}
            >
              <h4 className="text-base md:text-lg font-semibold mb-4 text-foreground">
                Support
              </h4>
              <ul className="space-y-3">
                <li>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="p-0 h-auto text-sm text-muted-foreground hover:text-primary hover:bg-transparent justify-start"
                    disabled
                  >
                    Help Center
                  </Button>
                </li>
                <li>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="p-0 h-auto text-sm text-muted-foreground hover:text-primary hover:bg-transparent justify-start"
                    disabled
                  >
                    Contact Us
                  </Button>
                </li>
                <li>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="p-0 h-auto text-sm text-muted-foreground hover:text-primary hover:bg-transparent justify-start"
                    disabled
                  >
                    Community
                  </Button>
                </li>
                <li>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="p-0 h-auto text-sm text-muted-foreground hover:text-primary hover:bg-transparent justify-start"
                    disabled
                  >
                    Status Page
                  </Button>
                </li>
              </ul>
            </motion.div>
          </div>

          {/* Newsletter Signup - Mobile Optimized */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            viewport={{ once: true }}
            className="bg-gradient-to-r from-primary/10 to-secondary/10 rounded-xl p-6 md:p-8 mb-8 md:mb-12 border border-primary/20"
          >
            <div className="text-center max-w-2xl mx-auto">
              <h4 className="text-lg md:text-xl font-bold mb-3 text-foreground">
                🚀 Get Exclusive Early Access
              </h4>
              <p className="text-sm md:text-base text-muted-foreground mb-6">
                Get weekly insights, tips, and updates delivered to your inbox.
                Join creators who trust our newsletter.
              </p>
              <div className="flex flex-col sm:flex-row gap-3 max-w-md mx-auto">
                <Input
                  type="email"
                  placeholder="Enter your email"
                  className="flex-1 bg-background border-border focus:border-primary"
                  disabled
                />
                <Button
                  className="bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-primary-foreground shadow-lg"
                  disabled
                >
                  Subscribe
                </Button>
              </div>
              <p className="text-xs text-muted-foreground mt-3">
                Unsubscribe anytime. We respect your privacy.
              </p>
            </div>
          </motion.div>

          {/* Bottom Section - Mobile Responsive */}
          <div className="border-t border-border pt-6 md:pt-8">
            <div className="flex flex-col md:flex-row justify-between items-center gap-4 md:gap-6">
              {/* Copyright - Mobile Centered */}
              <div className="text-center md:text-left">
                <p className="text-xs md:text-sm text-muted-foreground">
                  © {new Date().getFullYear()} SocialWave. All rights reserved.
                </p>
              </div>

              {/* Legal Links - Mobile Stacked */}
              <div className="flex flex-col sm:flex-row items-center gap-4 sm:gap-6">
                <Link
                  to="#"
                  className="text-xs md:text-sm text-muted-foreground hover:text-primary transition-colors duration-200"
                >
                  Privacy Policy
                </Link>
                <Link
                  to="#"
                  className="text-xs md:text-sm text-muted-foreground hover:text-primary transition-colors duration-200"
                >
                  Terms of Service
                </Link>
                <Button
                  variant="ghost"
                  size="sm"
                  className="p-0 h-auto text-xs md:text-sm text-muted-foreground hover:text-primary hover:bg-transparent"
                  disabled
                >
                  Cookie Policy
                </Button>
              </div>

              {/* Trust Indicators - Mobile Friendly */}
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-1 text-xs text-muted-foreground">
                  <Shield className="h-3 w-3 text-green-600" />
                  <span className="hidden sm:inline">Secure</span>
                </div>
                <div className="flex items-center gap-1 text-xs text-muted-foreground">
                  <Check className="h-3 w-3 text-green-600" />
                  <span className="hidden sm:inline">GDPR</span>
                </div>
                <div className="flex items-center gap-1 text-xs text-muted-foreground">
                  <Clock className="h-3 w-3 text-green-600" />
                  <span className="hidden sm:inline">High uptime</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

// Layout Component
// Layout Component
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    const media = window.matchMedia(query);
    const updateMatch = () => setMatches(media.matches);
    updateMatch();
    media.addEventListener("change", updateMatch);
    return () => media.removeEventListener("change", updateMatch);
  }, [query]);
  return matches;
};

// Helper function to determine if user has OAuth connections
function hasOAuthConnections(accounts: any[]) {
  return (
    accounts &&
    accounts.length > 0 &&
    accounts.some(
      (account) => account.accessToken && account.accessToken.trim() !== "",
    )
  );
}

// Helper function to get filtered nav items based on connection type
function getFilteredNavItems(accounts: any[]) {
  const allNavItems = [
    { href: "/", label: "Home", icon: LayoutDashboard },
    {
      href: "/engage",
      label: "Engage",
      icon: MessageSquare,
      requiresOAuth: true,
    },
    { href: "/discover", label: "Discover", icon: PieChart },
    { href: "/create", label: "Create", icon: PenSquare },
    {
      href: "/schedule",
      label: "Schedule",
      icon: Calendar,
      requiresOAuth: true,
    },
    { href: "/analytics", label: "Analytics", icon: BarChart3 },
  ];

  const hasOAuth = hasOAuthConnections(accounts);

  return allNavItems.map((item) => ({
    ...item,
    disabled: item.requiresOAuth && !hasOAuth,
    disabledMessage:
      item.requiresOAuth && !hasOAuth
        ? "Connect a social media account to access this feature"
        : undefined,
  }));
}

function Sidebar({ user }: { user: any }) {
  const [isExpanded, setIsExpanded] = useState(false);
  const { data: connectedAccounts = [] } = useConnectedAccounts();
  const filteredNavItems = getFilteredNavItems(connectedAccounts);

  return (
    <motion.aside
      initial={false}
      animate={{ width: isExpanded ? 240 : 80 }}
      onHoverStart={() => setIsExpanded(true)}
      onHoverEnd={() => setIsExpanded(false)}
      className="hidden md:flex flex-col h-screen sticky top-0 border-r bg-background z-20"
    >
      <div className="flex-grow flex flex-col justify-between">
        <div>
          <div className="h-16 flex items-center px-6">
            {/* Removed duplicate logo - keeping only header logo for better UX */}
          </div>
          <nav className="flex flex-col gap-2 px-4 mt-4">
            {filteredNavItems.map((item) => {
              if (item.disabled) {
                return (
                  <Tooltip key={item.href} delayDuration={300}>
                    <TooltipTrigger asChild>
                      <div className="flex items-center gap-3 p-3 rounded-lg transition-colors cursor-not-allowed opacity-50 text-muted-foreground hover:bg-secondary/50">
                        <item.icon className="h-5 w-5 flex-shrink-0" />
                        <AnimatePresence>
                          {isExpanded && (
                            <motion.span
                              initial={{ opacity: 0, x: -20 }}
                              animate={{ opacity: 1, x: 0 }}
                              exit={{ opacity: 0, x: -20 }}
                              transition={{ duration: 0.2, ease: "easeInOut" }}
                              className="font-medium text-sm"
                            >
                              {item.label}
                            </motion.span>
                          )}
                        </AnimatePresence>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent side="right" className="max-w-xs">
                      <p>{item.disabledMessage}</p>
                    </TooltipContent>
                  </Tooltip>
                );
              }

              return (
                <NavLink
                  key={item.href}
                  to={item.href}
                  end={item.href === "/"}
                  className={({ isActive }) =>
                    `flex items-center gap-3 p-3 rounded-lg transition-colors ${
                      isActive
                        ? "bg-primary text-primary-foreground"
                        : "text-muted-foreground hover:bg-secondary hover:text-secondary-foreground"
                    }`
                  }
                >
                  <item.icon className="h-5 w-5 flex-shrink-0" />
                  <AnimatePresence>
                    {isExpanded && (
                      <motion.span
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                        transition={{ duration: 0.2, ease: "easeInOut" }}
                        className="font-medium text-sm"
                      >
                        {item.label}
                      </motion.span>
                    )}
                  </AnimatePresence>
                </NavLink>
              );
            })}
          </nav>
        </div>
        <div className="p-4 border-t">
          <div className="flex items-center gap-3">
            <Avatar className="h-9 w-9">
              {user?.image && <AvatarImage src={user.image} />}
              <AvatarFallback>
                {getInitials(user?.name || "User")}
              </AvatarFallback>
            </Avatar>
            <AnimatePresence>
              {isExpanded && (
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -20 }}
                  transition={{ duration: 0.2, ease: "easeInOut" }}
                  className="text-sm overflow-hidden"
                >
                  <p className="font-semibold truncate">
                    {user?.name || "User"}
                  </p>
                  <p className="text-muted-foreground truncate">
                    {user?.email || "No email"}
                  </p>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>
      </div>
    </motion.aside>
  );
}

function MobileBottomNav() {
  const location = useLocation();
  const { data: connectedAccounts = [] } = useConnectedAccounts();
  const filteredNavItems = getFilteredNavItems(connectedAccounts);

  return (
    <nav className="md:hidden fixed bottom-0 left-0 right-0 bg-background/95 backdrop-blur-xl border-t border-border/50 z-30 safe-area-bottom">
      <div className="flex justify-around items-center h-20 px-2">
        {filteredNavItems.map((item) => {
          const isActive =
            item.href === "/"
              ? location.pathname === "/"
              : location.pathname.startsWith(item.href);

          if (item.disabled) {
            return (
              <Tooltip key={item.href} delayDuration={300}>
                <TooltipTrigger asChild>
                  <div className="flex flex-col items-center justify-center gap-1 transition-all duration-200 w-full h-full rounded-xl min-h-[48px] relative cursor-not-allowed opacity-50">
                    <div className="flex flex-col items-center justify-center gap-1 transition-all duration-200 text-muted-foreground">
                      <div className="p-2 rounded-full transition-all duration-200">
                        <item.icon className="h-5 w-5 transition-all duration-200" />
                      </div>
                      <span className="text-xs font-medium transition-all duration-200">
                        {item.label}
                      </span>
                    </div>
                  </div>
                </TooltipTrigger>
                <TooltipContent side="top" className="max-w-xs">
                  <p>{item.disabledMessage}</p>
                </TooltipContent>
              </Tooltip>
            );
          }

          return (
            <NavLink
              key={item.href}
              to={item.href}
              className="flex flex-col items-center justify-center gap-1 transition-all duration-200 w-full h-full rounded-xl hover:bg-accent/50 active:scale-95 min-h-[48px] relative"
            >
              <div
                className={`flex flex-col items-center justify-center gap-1 transition-all duration-200 ${
                  isActive ? "text-primary scale-110" : "text-muted-foreground"
                }`}
              >
                <div
                  className={`p-2 rounded-full transition-all duration-200 ${
                    isActive ? "bg-primary/10" : ""
                  }`}
                >
                  <item.icon
                    className={`transition-all duration-200 ${
                      isActive ? "h-6 w-6" : "h-5 w-5"
                    }`}
                  />
                </div>
                <span
                  className={`text-xs font-medium transition-all duration-200 ${
                    isActive ? "font-semibold" : ""
                  }`}
                >
                  {item.label}
                </span>
                {isActive && (
                  <div className="absolute -bottom-1 w-1 h-1 bg-primary rounded-full" />
                )}
              </div>
            </NavLink>
          );
        })}
      </div>
    </nav>
  );
}

// Header component with prominent search
// Custom hook for notifications
function useNotifications() {
  const queryClient = useQueryClient();

  // Fetch notifications
  const { data: notificationsData, isLoading } = useQuery(
    ["notifications"],
    () => apiClient.getNotifications({ limit: 20 }),
    {
      refetchInterval: 30000, // Refetch every 30 seconds
      staleTime: 10000, // Consider data stale after 10 seconds
    },
  );

  // Fetch notification counts
  const { data: countsData } = useQuery(
    ["notificationCounts"],
    () => apiClient.getNotificationCounts(),
    {
      refetchInterval: 15000, // Refetch every 15 seconds
    },
  );

  // Mark notification as read mutation
  const markReadMutation = useMutation(apiClient.markNotificationRead, {
    onSuccess: () => {
      queryClient.invalidateQueries(["notifications"]);
      queryClient.invalidateQueries(["notificationCounts"]);
    },
  });

  // Mark all notifications as read mutation
  const markAllReadMutation = useMutation(apiClient.markAllNotificationsRead, {
    onSuccess: () => {
      queryClient.invalidateQueries(["notifications"]);
      queryClient.invalidateQueries(["notificationCounts"]);
    },
  });

  // Dismiss notification mutation
  const dismissMutation = useMutation(apiClient.dismissNotification, {
    onSuccess: () => {
      queryClient.invalidateQueries(["notifications"]);
      queryClient.invalidateQueries(["notificationCounts"]);
    },
  });

  return {
    notifications: notificationsData?.notifications || [],
    unreadCount: countsData?.unread || 0,
    totalCount: countsData?.total || 0,
    isLoading,
    markAsRead: markReadMutation.mutate,
    markAllAsRead: markAllReadMutation.mutate,
    dismiss: dismissMutation.mutate,
    isMarkingRead: markReadMutation.isLoading,
    isMarkingAllRead: markAllReadMutation.isLoading,
    isDismissing: dismissMutation.isLoading,
  };
}

// Notification item component
function NotificationItem({
  notification,
  onRead,
  onDismiss,
  onNavigate,
}: {
  notification: any;
  onRead: (id: string, trackClick?: boolean) => void;
  onDismiss: (id: string) => void;
  onNavigate: (notification: any) => void;
}) {
  const handleClick = () => {
    if (notification.status === "unread") {
      onRead(notification.id, true); // Track click when navigating
    }
    onNavigate(notification);
  };

  const handleMarkRead = (e: React.MouseEvent) => {
    e.stopPropagation();
    onRead(notification.id, false);
  };

  const handleDismiss = (e: React.MouseEvent) => {
    e.stopPropagation();
    onDismiss(notification.id);
  };

  const getIcon = () => {
    switch (notification.type) {
      case "engagement":
        return <MessageSquare className="h-4 w-4 text-blue-500" />;
      case "trend":
        return <TrendingUp className="h-4 w-4 text-green-500" />;
      case "content":
        return <PenSquare className="h-4 w-4 text-purple-500" />;
      case "system":
        return <Settings className="h-4 w-4 text-gray-500" />;
      case "achievement":
        return <Award className="h-4 w-4 text-yellow-500" />;
      case "reminder":
        return <Clock className="h-4 w-4 text-orange-500" />;
      case "insight":
        return <Lightbulb className="h-4 w-4 text-indigo-500" />;
      default:
        return <Bell className="h-4 w-4 text-gray-500" />;
    }
  };

  const getPriorityColor = () => {
    switch (notification.priority) {
      case "urgent":
        return "border-l-red-500";
      case "high":
        return "border-l-orange-500";
      case "normal":
        return "border-l-blue-500";
      case "low":
        return "border-l-gray-500";
      default:
        return "border-l-gray-500";
    }
  };

  return (
    <div
      className={`p-4 border-b border-border last:border-b-0 hover:bg-accent/50 cursor-pointer transition-all duration-200 active:scale-[0.98] min-h-[60px] border-l-2 ${
        notification.status === "unread" ? "bg-accent/20" : ""
      } ${getPriorityColor()}`}
      onClick={handleClick}
    >
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0 mt-1">{getIcon()}</div>
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between gap-2">
            <div className="flex-1">
              <p className="text-sm font-medium text-foreground">
                {notification.title}
              </p>
              <p className="text-xs text-muted-foreground mt-1">
                {notification.message}
              </p>
              <p className="text-xs text-muted-foreground mt-2">
                {formatDistanceToNow(new Date(notification.createdAt), {
                  addSuffix: true,
                })}
              </p>
              {notification.category && (
                <Badge variant="outline" className="mt-2 text-xs">
                  {notification.category}
                </Badge>
              )}
            </div>
            <div className="flex items-center gap-1">
              {notification.status === "unread" && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleMarkRead}
                  className="h-6 w-6 p-0 hover:bg-blue-100 hover:text-blue-600"
                  title="Mark as read"
                >
                  <Check className="h-3 w-3" />
                </Button>
              )}
              <Button
                variant="ghost"
                size="sm"
                onClick={handleDismiss}
                className="h-6 w-6 p-0 hover:bg-red-100 hover:text-red-600"
                title="Dismiss"
              >
                <X className="h-3 w-3" />
              </Button>
              {notification.status === "unread" && (
                <div className="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0" />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// Notification Center component
function NotificationCenter({
  isOpen,
  onClose,
  isDesktop,
}: {
  isOpen: boolean;
  onClose: () => void;
  isDesktop: boolean;
}) {
  const navigate = useNavigate();
  const {
    notifications,
    unreadCount,
    totalCount,
    isLoading,
    markAsRead,
    markAllAsRead,
    dismiss,
    isMarkingAllRead,
  } = useNotifications();

  const handleNotificationClick = (notification: any) => {
    onClose();

    // Handle deep linking based on notification action
    if (notification.actionType === "navigate" && notification.actionUrl) {
      navigate(notification.actionUrl);
    } else if (
      notification.actionType === "external" &&
      notification.actionUrl
    ) {
      window.open(notification.actionUrl, "_blank");
    } else {
      // Default navigation based on notification type
      switch (notification.type) {
        case "engagement":
          navigate("/engage");
          break;
        case "trend":
          navigate("/discover");
          break;
        case "content":
          navigate("/create");
          break;
        case "insight":
          navigate("/insights");
          break;
        default:
          navigate("/");
      }
    }
  };

  if (!isOpen) return null;

  return (
    <div
      id="notification-center"
      role="dialog"
      aria-modal="true"
      aria-label="Notifications"
      className="absolute right-0 top-full mt-2 bg-popover border border-border rounded-lg shadow-xl z-50 mx-2 md:mx-0"
      style={{
        maxHeight: "calc(100vh - 200px)",
        width: isDesktop ? "380px" : "calc(100vw - 32px)",
      }}
    >
      {" "}
      <div className="p-4 border-b border-border">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <h3 className="font-semibold text-sm">Notifications</h3>
            {totalCount > 0 && (
              <Badge variant="secondary" className="text-xs">
                {totalCount}
              </Badge>
            )}
          </div>
          {unreadCount > 0 && (
            <Button
              variant="ghost"
              size="sm"
              onClick={() => markAllAsRead({})}
              disabled={isMarkingAllRead}
              className="text-xs h-8 px-3 transition-all duration-200 active:scale-95"
            >
              {isMarkingAllRead ? (
                <Loader2 className="h-3 w-3 animate-spin mr-1" />
              ) : null}
              Mark all read
            </Button>
          )}
        </div>
        {unreadCount > 0 && (
          <p className="text-xs text-muted-foreground mt-1">
            {unreadCount} unread notification{unreadCount !== 1 ? "s" : ""}
          </p>
        )}
      </div>
      <div className="flex-1 min-h-0 max-h-96 overflow-y-auto">
        {isLoading ? (
          <div className="p-6 text-center text-sm text-muted-foreground">
            <Loader2 className="h-8 w-8 mx-auto mb-2 animate-spin" />
            Loading notifications...
          </div>
        ) : notifications.length === 0 ? (
          <div className="p-6 text-center text-sm text-muted-foreground">
            <Bell className="h-8 w-8 mx-auto mb-2 opacity-50" />
            No notifications yet
          </div>
        ) : (
          notifications.map((notification) => (
            <NotificationItem
              key={notification.id}
              notification={notification}
              onRead={(id: string, trackClick?: boolean) =>
                markAsRead({ id, trackClick })
              }
              onDismiss={(id: string) => dismiss({ id })}
              onNavigate={handleNotificationClick}
            />
          ))
        )}
      </div>
      {notifications.length > 0 && (
        <div className="p-3 border-t border-border">
          <Button
            variant="ghost"
            size="sm"
            aria-label="Clear search"
            title="Clear search"
            onClick={() => {
              onClose();
              navigate("/notifications"); // Navigate to full notifications page
            }}
            className="w-full text-xs transition-all duration-200 active:scale-95 min-h-[44px]"
          >
            View all notifications
          </Button>
        </div>
      )}
    </div>
  );
}

function Header({
  user,
  onSearchClick,
}: {
  user: any;
  onSearchClick: () => void;
}) {
  const [searchQuery, setSearchQuery] = useState("");
  const [showResults, setShowResults] = useState(false);
  const [debouncedQuery, setDebouncedQuery] = useState("");
  const [showNotificationCenter, setShowNotificationCenter] = useState(false);
  const isDesktop = useMediaQuery("(min-width: 768px)");
  const notificationCenterRef = useRef<HTMLDivElement>(null);

  // Use the notifications hook
  const { unreadCount } = useNotifications();

  // Debounce search query
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedQuery(searchQuery);
    }, 300);
    return () => clearTimeout(timer);
  }, [searchQuery]);

  // Click outside handler for notification center
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        notificationCenterRef.current &&
        !notificationCenterRef.current.contains(event.target as Node)
      ) {
        setShowNotificationCenter(false);
      }
    };

    if (showNotificationCenter) {
      document.addEventListener("mousedown", handleClickOutside);
      return () => {
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }
  }, [showNotificationCenter]);

  const { data: searchResults, isLoading } = useQuery(
    ["headerSearch", debouncedQuery],
    () => apiClient.searchApp({ query: debouncedQuery }),
    {
      enabled: debouncedQuery.length > 1,
    },
  );

  const hasResults =
    searchResults &&
    ((searchResults.comments && searchResults.comments.length > 0) ||
      (searchResults.content && searchResults.content.length > 0) ||
      (searchResults.pillars && searchResults.pillars.length > 0));

  return (
    <header className="sticky top-0 z-40 w-full border-b bg-background/98 backdrop-blur-xl supports-[backdrop-filter]:bg-background/90 safe-area-top">
      <div className="flex h-16 md:h-16 items-center px-4 md:px-6">
        {/* Logo */}
        <Link
          to="/"
          aria-label="Home"
          title="Home"
          className="flex items-center gap-2 mr-4 md:mr-6 transition-transform active:scale-95 min-h-[44px] min-w-[44px] justify-center md:justify-start"
        >
          {" "}
          <div className="h-8 w-8 md:h-8 md:w-8 flex items-center justify-center bg-primary rounded-lg text-primary-foreground shadow-sm">
            <MessageSquare className="h-5 w-5 md:h-5 md:w-5" />
          </div>
          {isDesktop && (
            <span className="text-lg font-bold gradient-text">SocialWave</span>
          )}
        </Link>

        {/* Main Search Bar - Always Visible */}
        <div className="flex-1 max-w-2xl mx-auto relative" role="search">
          <div className="relative">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder={
                isDesktop
                  ? "Search content, comments, insights... (⌘K)"
                  : "Search..."
              }
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onFocus={() => setShowResults(searchQuery.length > 1)}
              onBlur={() => setTimeout(() => setShowResults(false), 200)}
              aria-label="Search"
              aria-controls="header-search-results"
              aria-expanded={showResults && searchQuery.length > 1}
              role="searchbox"
              className="pl-12 pr-14 bg-background/60 border-border/60 focus:bg-background focus:border-border transition-all duration-200 h-12 md:h-9 text-base md:text-sm rounded-full md:rounded-lg active:scale-95"
            />

            {/* Clear button */}
            {searchQuery && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => {
                  setSearchQuery("");
                  setShowResults(false);
                }}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 hover:bg-muted rounded-full transition-all duration-200 active:scale-90 min-h-[44px] min-w-[44px] flex items-center justify-center md:h-6 md:w-6 md:min-h-auto md:min-w-auto"
              >
                <X className="h-4 w-4 md:h-3 md:w-3" />
              </Button>
            )}

            {/* Search shortcut hint */}
            {!searchQuery && isDesktop && (
              <kbd className="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-70 flex">
                <span className="text-xs">⌘</span>K
              </kbd>
            )}
          </div>

          {/* Inline Search Results Dropdown */}
          {showResults && searchQuery.length > 1 && (
            <div
              id="header-search-results"
              role="region"
              aria-label="Search results"
              aria-live="polite"
              className="absolute top-full left-0 right-0 mt-2 bg-popover border border-border rounded-lg shadow-xl z-50 mx-2 md:mx-0"
              style={{ maxHeight: "calc(100vh - 200px)" }}
            >
              {" "}
              {isLoading ? (
                <div className="p-4 text-center text-sm text-muted-foreground">
                  <Loader2 className="h-4 w-4 animate-spin mx-auto mb-2" />
                  Searching...
                </div>
              ) : hasResults ? (
                <div className="p-2">
                  {searchResults?.comments &&
                    searchResults.comments.length > 0 && (
                      <div className="mb-4 last:mb-0">
                        <div className="px-2 py-1 text-xs font-medium text-muted-foreground uppercase tracking-wide">
                          Comments ({searchResults.comments.length})
                        </div>
                        {searchResults.comments.slice(0, 3).map((comment) => (
                          <button
                            key={comment.id}
                            className="w-full p-3 md:p-2 text-left rounded-md hover:bg-accent hover:text-accent-foreground transition-all duration-200 active:scale-[0.98] flex items-start gap-2 min-h-[48px] md:min-h-auto"
                            onClick={() => {
                              setShowResults(false);
                              // Navigate to comment
                              console.log("Navigate to comment:", comment.id);
                            }}
                          >
                            <MessageSquare className="h-4 w-4 mt-0.5 text-muted-foreground flex-shrink-0" />
                            <span className="text-sm truncate">
                              {comment.text}
                            </span>
                          </button>
                        ))}
                      </div>
                    )}

                  {searchResults?.content &&
                    searchResults.content.length > 0 && (
                      <div className="mb-4 last:mb-0">
                        <div className="px-2 py-1 text-xs font-medium text-muted-foreground uppercase tracking-wide">
                          Content ({searchResults.content.length})
                        </div>
                        {searchResults.content.slice(0, 3).map((content) => (
                          <button
                            key={content.id}
                            className="w-full p-3 md:p-2 text-left rounded-md hover:bg-accent hover:text-accent-foreground transition-all duration-200 active:scale-[0.98] flex items-start gap-2 min-h-[48px] md:min-h-auto"
                            onClick={() => {
                              setShowResults(false);
                              // Navigate to content
                              console.log("Navigate to content:", content.id);
                            }}
                          >
                            <PenSquare className="h-4 w-4 mt-0.5 text-muted-foreground flex-shrink-0" />
                            <span className="text-sm truncate">
                              {content.title}
                            </span>
                          </button>
                        ))}
                      </div>
                    )}

                  {searchResults?.pillars &&
                    searchResults.pillars.length > 0 && (
                      <div className="mb-4 last:mb-0">
                        <div className="px-2 py-1 text-xs font-medium text-muted-foreground uppercase tracking-wide">
                          Pillars ({searchResults.pillars.length})
                        </div>
                        {searchResults.pillars.slice(0, 3).map((pillar) => (
                          <button
                            key={pillar.id}
                            className="w-full p-3 md:p-2 text-left rounded-md hover:bg-accent hover:text-accent-foreground transition-all duration-200 active:scale-[0.98] flex items-start gap-2 min-h-[48px] md:min-h-auto"
                            onClick={() => {
                              setShowResults(false);
                              // Navigate to pillar
                              console.log("Navigate to pillar:", pillar.id);
                            }}
                          >
                            <PieChart className="h-4 w-4 mt-0.5 text-muted-foreground flex-shrink-0" />
                            <span className="text-sm truncate">
                              {pillar.name}
                            </span>
                          </button>
                        ))}
                      </div>
                    )}

                  {/* Show more results button */}
                  <div className="border-t pt-2 mt-2">
                    <button
                      aria-label="View all search results"
                      onClick={() => {
                        setShowResults(false);
                        onSearchClick();
                      }}
                      className="w-full p-3 md:p-2 text-left rounded-md hover:bg-accent hover:text-accent-foreground transition-all duration-200 active:scale-[0.98] text-sm text-muted-foreground flex items-center justify-center gap-2 min-h-[48px] md:min-h-auto"
                    >
                      <Search className="h-3 w-3" />
                      View all results
                    </button>
                  </div>
                </div>
              ) : (
                <div className="p-4 text-center text-sm text-muted-foreground">
                  No results found for "{searchQuery}"
                  <div className="mt-2">
                    <button
                      aria-label="View all search results"
                      onClick={() => {
                        setShowResults(false);
                        onSearchClick();
                      }}
                      className="text-primary hover:underline transition-all duration-200 active:scale-95 py-1"
                    >
                      Try advanced search
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* User Menu */}
        <div className="flex items-center gap-1 md:gap-3 ml-4 md:ml-6">
          {/* Notifications */}
          <div className="relative" ref={notificationCenterRef}>
            <Button
              variant="ghost"
              size="sm"
              aria-label="Open notifications"
              aria-haspopup="dialog"
              aria-controls="notification-center"
              aria-expanded={showNotificationCenter}
              onClick={() => setShowNotificationCenter(!showNotificationCenter)}
              className="relative text-muted-foreground hover:text-foreground transition-all duration-200 active:scale-95 h-11 w-11 rounded-full md:h-9 md:w-9 md:rounded-lg min-h-[44px] min-w-[44px] md:min-h-auto md:min-w-auto flex items-center justify-center focus-visible:ring-2 focus-visible:ring-primary/40"
            >
              {" "}
              <Bell className="h-6 w-6 md:h-5 md:w-5" />
              {unreadCount > 0 && (
                <Badge
                  variant="destructive"
                  className="absolute -top-1 -right-1 h-5 w-5 md:h-4 md:w-4 p-0 flex items-center justify-center text-xs font-medium"
                >
                  {unreadCount > 9 ? "9+" : unreadCount}
                </Badge>
              )}
            </Button>

            {/* Notification Center */}
            <NotificationCenter
              isOpen={showNotificationCenter}
              onClose={() => setShowNotificationCenter(false)}
              isDesktop={isDesktop}
            />
          </div>

          {/* User Menu */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                aria-label="Open settings menu"
                title="Open settings"
                className="relative h-11 w-11 md:h-9 md:w-9 rounded-full transition-all duration-200 active:scale-95 hover:ring-2 hover:ring-primary/20 text-muted-foreground hover:text-foreground min-h-[44px] min-w-[44px] md:min-h-auto md:min-w-auto flex items-center justify-center focus-visible:ring-2 focus-visible:ring-primary/40"
              >
                {" "}
                <Settings className="h-6 w-6 md:h-5 md:w-5" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56 mr-4 md:mr-0" align="end">
              <DropdownMenuItem asChild>
                <Link
                  to="/settings"
                  className="flex items-center gap-2 min-h-[48px] transition-all duration-200 active:scale-95 py-3 md:py-2"
                >
                  <Settings className="h-4 w-4" />
                  Settings
                </Link>
              </DropdownMenuItem>

              <DropdownMenuSeparator />
              <DropdownMenuItem className="text-muted-foreground">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none">
                    {user?.name || "User"}
                  </p>
                  <p className="text-xs leading-none text-muted-foreground">
                    {user?.email || "No email"}
                  </p>
                </div>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  );
}

// Hook for shared Ripple chat logic
function useRippleChatLogic(isOpen: boolean) {
  const [currentConversation, setCurrentConversation] = useState<string | null>(
    null,
  );
  const [messages, setMessages] = useState<any[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: conversations } = useQuery(
    ["ripple-conversations"],
    () => apiClient.listRippleConversations(),
    {
      enabled: isOpen,
      staleTime: 30000, // 30 seconds
      refetchOnWindowFocus: false,
      refetchInterval: false,
    },
  );

  const { data: conversationData } = useQuery(
    ["ripple-conversation", currentConversation],
    () =>
      apiClient.getRippleConversation({ conversationId: currentConversation! }),
    {
      enabled: !!currentConversation,
      staleTime: 10000, // 10 seconds
      refetchOnWindowFocus: false,
      refetchInterval: false,
    },
  );

  const [progressInfo, setProgressInfo] = useState<{
    status: string;
    progress: number;
    currentStep: string;
    processing: boolean;
  } | null>(null);

  const startConversationMutation = useMutation(
    apiClient.startRippleConversation,
    {
      onSuccess: (data) => {
        setCurrentConversation(data.id);
        queryClient.invalidateQueries(["ripple-conversations"]);
      },
    },
  );

  const sendMessageMutation = useRealtimeMutation(apiClient.sendRippleMessage, {
    onMutate: async (newMessage) => {
      const optimisticMessage = {
        id: Date.now().toString(),
        content: newMessage.message,
        role: "user" as const,
        createdAt: new Date().toISOString(),
      };
      setMessages((prev) => [...prev, optimisticMessage]);
      setInputMessage("");
      setIsLoading(true);
      setProgressInfo({
        status: "Starting...",
        progress: 0,
        currentStep: "Starting...",
        processing: true,
      });
    },
    onSuccess: (data) => {
      const finalData = data as any;
      if (finalData && finalData.taskId) {
        toast({
          title: "Analysis Complete",
          description:
            "Ripple has generated your response and queued comprehensive analysis.",
        });
      }
    },
    onError: () => {
      setIsLoading(false);
      setProgressInfo(null);
      toast({ title: "Failed to send message", variant: "destructive" });
    },
  });

  // Direct content generation mutations
  const generateTrendingContentMutation = useMutation(
    async () => {
      const trendingTopics = await apiClient.getTrendingTopicsResults();
      if (
        trendingTopics.success &&
        trendingTopics.data &&
        Array.isArray(trendingTopics.data) &&
        trendingTopics.data.length > 0
      ) {
        const randomTopic =
          trendingTopics.data[
            Math.floor(Math.random() * Math.min(3, trendingTopics.data.length))
          ];

        if (!randomTopic) {
          throw new Error("No trending topic available for content generation");
        }

        return await apiClient.generateContentFromTrendingTopic({
          topic: randomTopic,
          format: "Social Media Post",
        });
      }
    },
    {
      onSuccess: () => {
        toast({
          title: "Content Generated!",
          description: "Your trending content is ready. Check the Content Hub.",
        });
        queryClient.invalidateQueries(queryKeys.generatedContent());
        queryClient.invalidateQueries(queryKeys.contentPillars());
      },
      onError: (error) => {
        toast({
          title: "Generation Failed",
          description:
            error instanceof Error
              ? error.message
              : "Failed to generate content",
          variant: "destructive",
        });
      },
    },
  );

  const generateViralThreadMutation = useMutation(
    () =>
      apiClient.generateViralThread({
        source: "trending_analysis",
        targetAudience: "professionals and entrepreneurs",
        contentTone: "engaging and informative",
      }),
    {
      onSuccess: (data) => {
        if (data.success) {
          toast({
            title: "Viral Thread Generated!",
            description:
              "Your viral thread is ready. Check the Viral Threads tab.",
          });
          queryClient.invalidateQueries(["viral-threads"]);
        } else if (data.requiresUpgrade && data.upgradeInfo) {
          // Handle positive upgrade flow with structured prompt
          const upgradeInfo = data.upgradeInfo as any;
          // Extract the actual prompt data (could be nested or direct)
          const prompt = upgradeInfo.message || upgradeInfo;
          toast({
            title: "✨ Unlock Viral Thread Generation",
            description:
              typeof prompt === "string"
                ? prompt
                : prompt?.message ||
                  "Create viral threads that capture your audience's attention and drive massive engagement.",
            action: (
              <div className="flex flex-col gap-2 min-w-0">
                {prompt?.benefits &&
                  Array.isArray(prompt.benefits) &&
                  prompt.benefits.length > 0 && (
                    <div className="text-xs text-muted-foreground mb-1">
                      • {prompt.benefits.slice(0, 2).join(" • ")}
                    </div>
                  )}
                <Button
                  size="sm"
                  className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white border-0"
                  onClick={() => {
                    const upgradeUrl =
                      prompt?.upgradeUrl || upgradeInfo?.upgradeUrl;
                    if (upgradeUrl) {
                      // Enhanced upgrade flow with better UX
                      const fullUrl = upgradeUrl.startsWith("http")
                        ? upgradeUrl
                        : `${window.location.origin}${upgradeUrl}?returnTo=${encodeURIComponent(window.location.pathname)}`;

                      // Try to open in same tab for better conversion
                      window.location.href = fullUrl;
                    } else {
                      // Fallback to settings page with upgrade focus
                      window.location.href = "/settings?tab=subscription";
                    }
                  }}
                >
                  {prompt?.ctaText || "Upgrade Now"} 🚀
                </Button>
              </div>
            ),
          });
        } else if (data.requiresUpgrade) {
          // Fallback for basic upgrade prompts without structured info
          toast({
            title: "✨ Unlock Viral Thread Generation",
            description:
              "Create viral threads that capture your audience's attention and drive massive engagement.",
            action: (
              <Button
                size="sm"
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white border-0"
                onClick={() => {
                  window.location.href = "/settings";
                }}
              >
                Upgrade Now 🚀
              </Button>
            ),
          });
        }
      },
      onError: (error) => {
        toast({
          title: "Generation Failed",
          description:
            error instanceof Error
              ? error.message
              : "Failed to generate viral thread",
          variant: "destructive",
        });
      },
    },
  );

  // Load messages from conversation data when conversation changes
  useEffect(() => {
    if (conversationData?.messages) {
      const formattedMessages = conversationData.messages
        .map((msg: any) => ({
          id: msg.id,
          content: msg.content,
          role: msg.role as "user" | "assistant",
          createdAt: msg.createdAt,
          metadata: msg.metadata ? JSON.parse(msg.metadata) : {},
        }))
        .filter((m: any) => m.metadata?.type !== "immediate_response");
      setMessages(formattedMessages);
    }
  }, [conversationData]);

  // Handle streaming progress updates from useRealtimeMutation
  useEffect(() => {
    if (sendMessageMutation.data) {
      const data = sendMessageMutation.data as any;

      // Handle streaming progress data (when status exists)
      if ("status" in data && data.status !== undefined) {
        setProgressInfo({
          status: data.status,
          progress: data.progress || 0,
          currentStep: data.currentStep || data.status,
          processing: data.processing !== undefined ? data.processing : true,
        });

        // Update streaming assistant bubble with partial text if provided
        if (
          typeof (data as any).partial === "string" &&
          (data as any).partial.length > 0
        ) {
          const partialText = (data as any).partial as string;
          setMessages((prev) => {
            const hasStreaming = prev.some(
              (m) => m.id === `stream_${currentConversation || "draft"}`,
            );
            if (!hasStreaming) {
              return [
                ...prev,
                {
                  id: `stream_${currentConversation || "draft"}`,
                  content: partialText,
                  role: "assistant" as const,
                  createdAt: new Date().toISOString(),
                  metadata: { type: "streaming" },
                },
              ];
            }
            return prev.map((m) =>
              m.id === `stream_${currentConversation || "draft"}`
                ? { ...m, content: partialText }
                : m,
            );
          });
        }

        // Clear progress when processing is complete
        if (data.processing === false && data.status === "analysis_queued") {
          setIsLoading(false);
          setTimeout(() => {
            setProgressInfo(null);
          }, 800); // keep it brief
        }
      } // Handle final response data (when message exists)
      else if ("message" in data && data.message) {
        setProgressInfo(null);
        setIsLoading(false);

        const finalMessage = {
          id: data.message.id || `final_${Date.now()}`,
          content: data.message.content,
          role: data.message.role as "user" | "assistant",
          createdAt: data.message.createdAt || new Date().toISOString(),
          metadata: data.message.metadata
            ? JSON.parse(data.message.metadata)
            : {},
        };

        setMessages((prev) => {
          // Drop any streaming/immediate temp messages
          const withoutTemps = prev.filter(
            (m) =>
              !m.id?.toString().startsWith("immediate_") &&
              !m.id?.toString().startsWith("stream_"),
          );
          const exists = withoutTemps.some(
            (m) =>
              m.id === finalMessage.id ||
              (m.role === finalMessage.role &&
                m.content === finalMessage.content),
          );
          if (exists) {
            return withoutTemps; // duplicate, don't append
          }
          return [...withoutTemps, finalMessage];
        });
      }
    }
  }, [sendMessageMutation.data]);

  const handleStartConversation = () => {
    startConversationMutation.mutate({ userMessage: "Hello!" });
  };

  const handleSendMessage = () => {
    if (!inputMessage.trim() || !currentConversation) return;

    sendMessageMutation.mutate({
      conversationId: currentConversation,
      message: inputMessage.trim(),
    });
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return {
    currentConversation,
    setCurrentConversation,
    messages,
    inputMessage,
    setInputMessage,
    isLoading,
    messagesEndRef,
    conversations,
    conversationData,
    progressInfo,
    startConversationMutation,
    sendMessageMutation,
    handleStartConversation,
    handleSendMessage,
    handleKeyPress,
    generateTrendingContentMutation,
    generateViralThreadMutation,
  };
}

// Sticky Ripple Chat Component
function StickyRippleChat() {
  const [isOpen, setIsOpen] = useState(false);
  const {
    currentConversation,
    setCurrentConversation,
    messages,
    inputMessage,
    setInputMessage,
    isLoading,
    messagesEndRef,
    conversations,
    progressInfo,
    handleStartConversation,
    handleSendMessage,
    handleKeyPress,
  } = useRippleChatLogic(isOpen);

  // Horizontal sticky bar when closed
  if (!isOpen) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3, ease: "easeOut" }}
        className="fixed right-4 md:right-6 lg:right-8 z-50 bottom-[calc(env(safe-area-inset-bottom,0px)+5rem)] md:bottom-6 lg:bottom-8"
      >
        {" "}
        <Button
          onClick={() => setIsOpen(true)}
          className="flex items-center gap-3 px-5 py-3 h-12 bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-200 shadow-lg hover:shadow-xl border border-gray-200 dark:border-gray-700 transition-all duration-200 hover:-translate-y-0.5 rounded-full backdrop-blur-sm"
        >
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-emerald-500 rounded-full animate-pulse" />
            <span className="text-sm font-semibold">Ripple AI</span>
          </div>
          <ChevronUp className="h-4 w-4 opacity-60" />
        </Button>
      </motion.div>
    );
  }

  // Full chat interface when open
  return (
    <motion.div
      initial={{ opacity: 0, y: 20, scale: 0.95 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      className="fixed right-4 md:right-6 w-[90vw] max-w-96 h-[70vh] max-h-[600px] bg-card border border-border rounded-xl shadow-2xl z-50 flex flex-col overflow-hidden bottom-[calc(env(safe-area-inset-bottom,0px)+5rem)] md:bottom-6"
    >
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-primary text-primary-foreground rounded-t-xl">
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse" />
          <h3 className="font-semibold">Ripple AI</h3>
        </div>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setIsOpen(false)}
          className="text-primary-foreground hover:bg-primary-foreground/20 h-8 w-8 p-0"
        >
          <X className="h-4 w-4" />
        </Button>
      </div>

      {/* Conversation List or Messages */}
      {!currentConversation ? (
        <div className="flex-1 p-4 overflow-y-auto">
          <div className="text-center mb-4">
            <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3">
              <Bot className="h-6 w-6 text-primary" />
            </div>
            <h4 className="font-medium mb-2 text-foreground">
              Welcome to Ripple AI
            </h4>
            <p className="text-sm text-muted-foreground mb-4">
              Your intelligent growth companion
            </p>
            <Button
              onClick={handleStartConversation}
              className="w-full bg-primary hover:bg-primary/90 mb-4"
            >
              <MessageCircle className="h-4 w-4 mr-2" />
              Start New Conversation
            </Button>

            {/* Direct Action Buttons */}
            <div className="space-y-3 mb-4">
              <p className="text-xs text-muted-foreground font-medium mb-3">
                Quick Actions:
              </p>
              <div className="grid grid-cols-1 gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setInputMessage(
                      "What are the trending topics I should create content about?",
                    );
                    handleStartConversation();
                  }}
                  className="text-left justify-start h-auto p-3 text-sm hover:bg-accent border-primary/20 hover:border-primary/40"
                >
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center">
                      <Zap className="h-4 w-4 text-primary" />
                    </div>
                    <div className="flex-1 text-left">
                      <div className="font-medium text-foreground">
                        Find Trending Topics
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Get current trends for content
                      </div>
                    </div>
                  </div>
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setInputMessage(
                      "Generate a viral thread about my brand and recent trends",
                    );
                    handleStartConversation();
                  }}
                  className="text-left justify-start h-auto p-3 text-sm hover:bg-accent border-primary/20 hover:border-primary/40"
                >
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-emerald-500/10 rounded-lg flex items-center justify-center">
                      <MessageSquare className="h-4 w-4 text-emerald-600" />
                    </div>
                    <div className="flex-1 text-left">
                      <div className="font-medium text-foreground">
                        Create Viral Content
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Generate engaging posts
                      </div>
                    </div>
                  </div>
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setInputMessage(
                      "Analyze my recent content performance and suggest improvements",
                    );
                    handleStartConversation();
                  }}
                  className="text-left justify-start h-auto p-3 text-sm hover:bg-accent border-primary/20 hover:border-primary/40"
                >
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-blue-500/10 rounded-lg flex items-center justify-center">
                      <TrendingUp className="h-4 w-4 text-blue-600" />
                    </div>
                    <div className="flex-1 text-left">
                      <div className="font-medium text-foreground">
                        Analyze Performance
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Review content metrics
                      </div>
                    </div>
                  </div>
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setInputMessage(
                      "Show me insights about my audience engagement patterns",
                    );
                    handleStartConversation();
                  }}
                  className="text-left justify-start h-auto p-3 text-sm hover:bg-accent border-primary/20 hover:border-primary/40"
                >
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-purple-500/10 rounded-lg flex items-center justify-center">
                      <Users className="h-4 w-4 text-purple-600" />
                    </div>
                    <div className="flex-1 text-left">
                      <div className="font-medium text-foreground">
                        Audience Insights
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Understand engagement patterns
                      </div>
                    </div>
                  </div>
                </Button>
              </div>
            </div>
          </div>

          {conversations && conversations.length > 0 && (
            <div>
              <h5 className="font-medium mb-2 text-sm text-foreground">
                Recent Conversations
              </h5>
              <div className="space-y-2">
                {conversations.slice(0, 3).map((conv) => (
                  <Card
                    key={conv.id}
                    className="p-3 cursor-pointer hover:bg-accent transition-colors border-border"
                    onClick={() => setCurrentConversation(conv.id)}
                  >
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium text-foreground truncate">
                        {conv.title}
                      </span>
                      <span className="text-xs text-muted-foreground">
                        {format(new Date(conv.createdAt), "MMM d")}
                      </span>
                    </div>
                    {conv.lastMessage && (
                      <p className="text-xs text-muted-foreground mt-1 truncate">
                        {conv.lastMessage}
                      </p>
                    )}
                  </Card>
                ))}
              </div>
            </div>
          )}
        </div>
      ) : (
        <>
          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message, index) => (
              <div
                key={message.id || index}
                className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
              >
                <div
                  className={`max-w-[85%] ${message.role === "user" ? "" : "space-y-2"}`}
                >
                  {message.role === "assistant" && (
                    <div className="flex items-center gap-2 mb-2">
                      <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center">
                        <Bot className="h-3 w-3 text-primary-foreground" />
                      </div>
                      <span className="text-xs font-medium text-muted-foreground">
                        Ripple AI
                      </span>
                      <span className="text-xs text-muted-foreground">
                        {format(new Date(message.createdAt), "HH:mm")}
                      </span>
                    </div>
                  )}

                  <div
                    className={`p-3 rounded-lg shadow-sm text-sm ${
                      message.role === "user"
                        ? "bg-primary text-primary-foreground rounded-br-none"
                        : "bg-muted border rounded-tl-none"
                    }`}
                  >
                    {message.role === "user" ? (
                      <div>
                        <p className="whitespace-pre-wrap leading-relaxed">
                          {(message.content || "").replace(/\\n/g, "\n")}
                        </p>
                        <p className="text-xs opacity-70 mt-2 text-right">
                          {format(new Date(message.createdAt), "HH:mm")}
                        </p>
                      </div>
                    ) : (
                      <div className="prose prose-sm max-w-none">
                        <ReactMarkdown
                          remarkPlugins={[remarkGfm]}
                          components={{
                            p: ({ children }) => (
                              <p className="text-sm leading-relaxed mb-2 last:mb-0 text-foreground">
                                {children}
                              </p>
                            ),
                            ul: ({ children }) => (
                              <ul className="text-sm space-y-1 ml-4 mb-2 last:mb-0">
                                {children}
                              </ul>
                            ),
                            li: ({ children }) => (
                              <li className="flex items-start gap-2 text-foreground">
                                <span className="text-primary mt-1 font-bold text-xs">
                                  •
                                </span>
                                <span className="flex-1 leading-relaxed">
                                  {children}
                                </span>
                              </li>
                            ),
                            strong: ({ children }) => (
                              <strong className="font-semibold text-foreground">
                                {children}
                              </strong>
                            ),
                            code: ({ children }) => (
                              <code className="bg-muted px-1 py-0.5 rounded text-xs font-mono">
                                {children}
                              </code>
                            ),
                            pre: ({ children }) => (
                              <pre className="bg-muted p-2 rounded text-xs font-mono overflow-x-auto">
                                {children}
                              </pre>
                            ),
                          }}
                        >
                          {(message.content || "").replace(/\\n/g, "\n")}
                        </ReactMarkdown>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
            {(isLoading || progressInfo) && (
              <div className="flex justify-start">
                <div className="max-w-[85%] space-y-2">
                  <div className="flex items-center gap-2 mb-2">
                    <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center">
                      <Bot className="h-3 w-3 text-primary-foreground" />
                    </div>
                    <span className="text-xs font-medium text-muted-foreground">
                      Ripple AI
                    </span>
                  </div>
                  <div className="bg-muted border p-3 rounded-lg rounded-tl-sm">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce" />
                      <div className="w-2 h-2 bg-primary/70 rounded-full animate-bounce [animation-delay:120ms]" />
                      <div className="w-2 h-2 bg-primary/50 rounded-full animate-bounce [animation-delay:240ms]" />
                      <span className="sr-only">Ripple is typing…</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-3 border-t bg-background">
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setCurrentConversation(null)}
                className="h-8 w-8 p-0"
              >
                <ArrowLeft className="h-4 w-4" />
              </Button>
              <div className="flex-1 flex gap-2">
                <Textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Ask Ripple anything..."
                  className="min-h-[36px] max-h-[72px] resize-none text-sm"
                  rows={1}
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputMessage.trim() || isLoading}
                  size="sm"
                  className="bg-primary hover:bg-primary/90 h-9 w-9 p-0"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        </>
      )}
    </motion.div>
  );
}

function Layout({ children }: { children: React.ReactNode }) {
  const { data: user } = useQuery({
    queryKey: ["currentUser"],
    queryFn: apiClient.getCurrentUser,
  });
  const isDesktop = useMediaQuery("(min-width: 768px)");
  const [isCommandPaletteOpen, setIsCommandPaletteOpen] = useState(false);

  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setIsCommandPaletteOpen((open) => !open);
      }
    };
    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, []);

  return (
    <div className="flex min-h-screen bg-background">
      {isDesktop && <Sidebar user={user} />}
      <div className="flex-1 flex flex-col">
        {/* New Header with Search */}
        <Header
          user={user}
          onSearchClick={() => setIsCommandPaletteOpen(true)}
        />
        <main className="flex-1 p-4 md:p-6 lg:p-12 overflow-auto pb-28">
          <div className="max-w-7xl mx-auto">{children}</div>
        </main>
      </div>
      {!isDesktop && <MobileBottomNav />}
      <CommandPalette
        open={isCommandPaletteOpen}
        setOpen={setIsCommandPaletteOpen}
      />
      <StickyRippleChat />
    </div>
  );
}

function EngagePage() {
  const commentsSectionRef = useRef<HTMLDivElement>(null);
  const selectedCommentRef = useRef<HTMLDivElement>(null);
  const responsePanelRef = useRef<HTMLDivElement>(null);
  const commentsContainerRef = useRef<HTMLDivElement>(null);
  const location = useLocation();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [selectedPlatform, setSelectedPlatform] = useState<string | null>(null);
  const [selectedPage, setSelectedPage] = useState<string | null>(null);
  const [selectedCommentId, setSelectedCommentId] = useState<string | null>(
    location.state?.selectedCommentId || null,
  );
  const [responseText, setResponseText] = useState("");
  const [currentPage, setCurrentPage] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState("");
  const [respondedFilter, setRespondedFilter] = useState<boolean | undefined>(
    undefined,
  );
  const [dateRange, setDateRange] = useState<{
    startDate: string | undefined;
    endDate: string | undefined;
  }>({ startDate: undefined, endDate: undefined });
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [responsePanelPosition, setResponsePanelPosition] = useState<{
    top: number;
    behavior: "auto" | "smooth";
  }>({ top: 0, behavior: "auto" });
  const [isMobile, setIsMobile] = useState(false);

  const datePickerRef = useRef<HTMLDivElement>(null);
  const [originalPostContent, setOriginalPostContent] = useState<any>({
    isLoading: false,
    showEmbed: false,
  });

  // Get user settings for fetch frequency
  useUserSettings();

  // Detect mobile/desktop for responsive behavior
  useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 1024); // lg breakpoint
    };

    checkIsMobile();
    window.addEventListener("resize", checkIsMobile);

    return () => window.removeEventListener("resize", checkIsMobile);
  }, []);

  // Dynamic response panel positioning
  const updateResponsePanelPosition = useCallback(() => {
    if (
      isMobile ||
      !selectedCommentId ||
      !selectedCommentRef.current ||
      !responsePanelRef.current
    ) {
      return;
    }

    const selectedElement = selectedCommentRef.current;
    const responsePanel = responsePanelRef.current;
    const commentsContainer = commentsContainerRef.current;

    if (!commentsContainer) return;

    const containerRect = commentsContainer.getBoundingClientRect();
    const selectedRect = selectedElement.getBoundingClientRect();
    const responsePanelRect = responsePanel.getBoundingClientRect();

    // Calculate the relative position within the comments container
    const relativeTop =
      selectedRect.top - containerRect.top + commentsContainer.scrollTop;

    // Ensure the response panel doesn't go below the container
    const maxTop = commentsContainer.scrollHeight - responsePanelRect.height;
    const newTop = Math.min(Math.max(0, relativeTop), maxTop);

    setResponsePanelPosition({
      top: newTop,
      behavior: "smooth",
    });
  }, [isMobile, selectedCommentId]);

  // Update position when comment selection changes or window resizes
  useEffect(() => {
    updateResponsePanelPosition();

    // Scroll selected comment into view with smooth animation
    if (selectedCommentId && selectedCommentRef.current) {
      setTimeout(() => {
        selectedCommentRef.current?.scrollIntoView({
          behavior: "smooth",
          block: "center",
          inline: "nearest",
        });
      }, 100);
    }
  }, [selectedCommentId, updateResponsePanelPosition]);

  // Update position on scroll
  useEffect(() => {
    const commentsContainer = commentsContainerRef.current;
    if (!commentsContainer) return;

    const handleScroll = () => {
      updateResponsePanelPosition();
    };

    commentsContainer.addEventListener("scroll", handleScroll, {
      passive: true,
    });
    return () => commentsContainer.removeEventListener("scroll", handleScroll);
  }, [updateResponsePanelPosition]);

  // Debounce search query
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery);
    }, 500);

    return () => clearTimeout(timer);
  }, [searchQuery]);

  const { toast } = useToast();

  const { data: accounts } = useConnectedAccounts();
  const connectedPlatforms = accounts
    ? [...new Set(accounts.map((a) => a.platform))]
    : [];
  const facebookPages =
    accounts
      ?.filter((a) => a.platform === "facebook")
      .flatMap((a) => (a as any).pages) ?? [];

  // Fetch new comments
  const fetchCommentsMutation = useMutation({
    mutationFn: apiClient.fetchComments,
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: queryKeys.comments() });

      // Check if there was an error in the response
      if (data.error) {
        toast({
          title: "Failed to fetch comments",
          description: data.error,
          variant: "destructive",
        });
        return;
      }

      // Visual feedback on number of new comments found
      const count = data?.newCommentsCount ?? 0;
      const skipped = data?.problematicIds?.length || 0;
      if (count > 0) {
        toast({
          title: `${count} new comment${count === 1 ? "" : "s"} found!`,
          description:
            skipped > 0
              ? `Some comments could not be fetched (e.g., deleted/private posts). ${skipped} post(s) were skipped.`
              : `Your inbox has been updated with the latest comments.`,
          variant: skipped > 0 ? "destructive" : "default",
        });
      } else {
        toast({
          title: "No new comments found",
          description:
            skipped > 0
              ? `Some comments could not be fetched (e.g., deleted/private posts). ${skipped} post(s) were skipped.`
              : "You're all caught up!",
          variant: skipped > 0 ? "destructive" : "default",
        });
      }
    },
    onError: () => {
      toast({
        title: "Failed to fetch comments",
        description: "An error occurred while fetching new comments.",
        variant: "destructive",
      });
    },
  });

  // Analyze comment for response necessity and suggestions
  const { mutate: analyzeComment, data: analysisStreamData } =
    useRealtimeMutation(apiClient.analyzeCommentForResponse, {
      onSuccess: () => {
        // Analysis completed successfully - the final result will be in analysisStreamData.result
        if (analysisStreamData?.result) {
          setCommentAnalysis(analysisStreamData.result);
        }
      },
    });

  // Update comment analysis when streaming data changes
  useEffect(() => {
    if (analysisStreamData?.result) {
      setCommentAnalysis(analysisStreamData.result);
    }
  }, [analysisStreamData]);

  // AI comment analysis state
  const [commentAnalysis, setCommentAnalysis] = useState<{
    responseNeeded: boolean;
    priorityLevel: number;
    reasoning: string;
    textResponses: string[];
    emojiSuggestions: Array<{ emoji: string; explanation: string }>;
    responseStrategy: string;
  } | null>(null);

  // Response variations state
  const [responseVariations, setResponseVariations] = useState<
    Array<{ id: string; text: string }>
  >([]);
  const [isLoadingVariations, setIsLoadingVariations] = useState(false);

  // Send response
  const respondMutation = useMutation({
    mutationFn: apiClient.respondToComment,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: queryKeys.comments() });
      queryClient.invalidateQueries({ queryKey: queryKeys.dashboardStats() });
      setResponseText("");
      setSelectedCommentId(null);
    },
  });

  // Update comment status (for react/dismiss actions)
  const updateCommentStatusMutation = useMutation({
    mutationFn: apiClient.updateCommentStatus,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: queryKeys.comments() });
      queryClient.invalidateQueries({ queryKey: queryKeys.dashboardStats() });
      setSelectedCommentId(null);
      setResponseText("");
    },
    onError: (error) => {
      console.error("Failed to update comment status:", error);
      toast({
        title: "Error",
        description: "Failed to update comment status. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Reset to first page when filters change
  useEffect(() => {
    setCurrentPage(0);
  }, [
    selectedPlatform,
    selectedPage,
    debouncedSearchQuery,
    respondedFilter,
    dateRange.startDate,
    dateRange.endDate,
  ]);

  // Reset selected page when platform changes
  useEffect(() => {
    setSelectedPage(null);
  }, [selectedPlatform]);

  // Reset response variations when comment changes
  useEffect(() => {
    setResponseVariations([]);
    setResponseText("");
    setCommentAnalysis(null);

    // Analyze the selected comment automatically
    if (selectedCommentId) {
      analyzeComment({ commentId: selectedCommentId });
    }
  }, [selectedCommentId, analyzeComment]);

  // Close date picker when clicking outside
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        datePickerRef.current &&
        !datePickerRef.current.contains(event.target as Node)
      ) {
        setShowDatePicker(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Generate response variations when a comment is selected
  const {
    mutate: generateVariations,
    data: variationsStreamData,
    isLoading: isGeneratingVariations,
  } = useRealtimeMutation(apiClient.generateResponseVariations, {
    onSuccess: (finalData) => {
      console.log("Response variations generated successfully:", finalData);
      // Variations generated successfully - use the final result
      if (finalData?.variations && finalData.variations.length > 0) {
        setResponseVariations(finalData.variations);
        setResponseText(finalData.variations[0]?.text ?? "");
      }
      setIsLoadingVariations(false);
    },
    onError: (error) => {
      console.error("Failed to generate response variations:", error);
      setIsLoadingVariations(false);
      toast({
        title: "Failed to generate responses",
        description: "Please try again later",
        variant: "destructive",
      });
    },
  });

  // Update response variations when streaming data changes
  useEffect(() => {
    console.log("Variations stream data updated:", variationsStreamData);
    if (
      variationsStreamData?.variations &&
      variationsStreamData.variations.length > 0
    ) {
      setResponseVariations(variationsStreamData.variations);
      // Only set the first response if no response is currently selected
      if (!responseText || responseText === "") {
        setResponseText(variationsStreamData.variations[0]?.text ?? "");
      }
    }
  }, [variationsStreamData]);

  useEffect(() => {
    if (selectedCommentId) {
      console.log("Generating variations for comment:", selectedCommentId);
      setIsLoadingVariations(true);
      generateVariations({ commentId: selectedCommentId });
    }
  }, [selectedCommentId, generateVariations]);

  const {
    data: commentsData,
    isLoading: isLoadingComments,
    isFetching: isFetchingComments,
    isPreviousData,
  } = useQuery({
    queryKey: [
      "comments",
      currentPage,
      debouncedSearchQuery,
      selectedPlatform,
      selectedPage,
      respondedFilter,
      dateRange.startDate,
      dateRange.endDate,
    ],
    queryFn: () =>
      apiClient.getComments({
        page: currentPage,
        limit: 10,
        search: debouncedSearchQuery,
        platform: selectedPlatform || undefined,
        pageId: selectedPage || undefined,
        responded: respondedFilter,
        startDate: dateRange.startDate,
        endDate: dateRange.endDate,
      }),
    keepPreviousData: true,
  });

  const comments = commentsData?.comments || [];
  const pagination = commentsData?.pagination;

  // State to store post content for each thread
  const [threadPostContent, setThreadPostContent] = useState<
    Record<
      string,
      {
        content: string;
        author: string;
        date: string | null;
        imageUrl: string | null;
        permalinkUrl?: string;
        isLoading: boolean;
        error?: any;
      }
    >
  >({});

  // Group comments by post
  const commentThreads = useMemo(() => {
    const grouped = comments.reduce(
      (acc, comment) => {
        const threadKey = `${comment.platform}_${comment.postId}_${comment.accountId}`;
        if (!acc[threadKey]) {
          acc[threadKey] = {
            id: threadKey,
            postId: comment.postId,
            platform: comment.platform,
            accountId: comment.accountId,
            comments: [],
            postContent: null,
            isLoadingPost: false,
          };
        }
        acc[threadKey].comments.push(comment);
        return acc;
      },
      {} as Record<
        string,
        {
          id: string;
          postId: string;
          platform: string;
          accountId: string;
          comments: any[];
          postContent: any;
          isLoadingPost: boolean;
        }
      >,
    );

    // Sort threads by latest comment date
    return Object.values(grouped).sort((a, b) => {
      const aLatest = Math.max(
        ...(a as any).comments.map((c: any) => new Date(c.createdAt).getTime()),
      );
      const bLatest = Math.max(
        ...(b as any).comments.map((c: any) => new Date(c.createdAt).getTime()),
      );
      return bLatest - aLatest;
    });
  }, [comments]);

  // Fetch post content for each thread
  useEffect(() => {
    commentThreads.forEach((thread: any) => {
      const threadKey = thread.id;

      // Skip if we already have content or are loading
      if (threadPostContent[threadKey]) {
        return;
      }

      // Set loading state
      setThreadPostContent((prev) => ({
        ...prev,
        [threadKey]: {
          content: "",
          author: "",
          date: null,
          imageUrl: null,
          isLoading: true,
        },
      }));

      // Fetch post content
      apiClient
        .getOriginalPostContent({
          platform: thread.platform,
          postId: thread.postId,
          accountId: thread.accountId,
        })
        .then((data) => {
          setThreadPostContent((prev) => ({
            ...prev,
            [threadKey]: {
              content: data.content || "",
              author: data.author || "",
              date: data.date ? formatDate(data.date) : null,
              imageUrl: data.imageUrl,
              permalinkUrl: data.permalinkUrl,
              isLoading: false,
              error: data.error,
            },
          }));
        })
        .catch((error) => {
          console.error("Error fetching post content for thread:", error);
          setThreadPostContent((prev) => ({
            ...prev,
            [threadKey]: {
              content: "",
              author: "",
              date: null,
              imageUrl: null,
              isLoading: false,
              error: {
                code: "FETCH_ERROR",
                message: "Unable to fetch post content",
              },
            },
          }));
        });
    });
  }, [commentThreads, threadPostContent]);

  // Get selected comment
  const selectedComment = comments.find((c) => c.id === selectedCommentId);

  // Fetch original post content when a comment is selected
  useEffect(() => {
    if (selectedComment) {
      setOriginalPostContent((prev) => ({ ...prev, isLoading: true }));
      apiClient
        .getOriginalPostContent({
          platform: selectedComment.platform,
          postId: selectedComment.postId,
          accountId: selectedComment.accountId,
        })
        .then((data) => {
          if (data.error?.code === "TOKEN_EXPIRED") {
            // Handle expired token specifically
            setOriginalPostContent({
              content: "",
              author: "",
              date: null,
              imageUrl: null,
              engagement: null,
              isLoading: false,
              error: data.error,
            });

            // Show toast notification about expired token
            toast({
              title: "Authentication Required",
              description: data.error.message,
              variant: "destructive",
            });
          } else {
            // Normal content handling
            setOriginalPostContent({
              content: data.content || "",
              author: data.author || "",
              date: data.date ? formatDate(data.date) : null,
              imageUrl: data.imageUrl,
              engagement: data.engagement,
              isLoading: false,
              permalinkUrl: data.permalinkUrl,
              error: data.error,
            });
          }
        })
        .catch((error) => {
          console.error("Error fetching post content:", error);
          setOriginalPostContent({
            content: "",
            author: "",
            date: null,
            imageUrl: null,
            engagement: null,
            isLoading: false,
            error: {
              code: "FETCH_ERROR",
              message: "Unable to fetch post content. Please try again.",
            },
          });
        });
    } else {
      setOriginalPostContent({
        content: "",
        author: "",
        date: null,
        imageUrl: null,
        isLoading: false,
        error: null,
      });
    }
  }, [selectedCommentId, selectedComment, toast]);

  return (
    <div>
      <MetaTags
        title="Engage | SocialWave"
        description="Manage and respond to all your social media comments from a unified inbox. Prioritize conversations and engage with your audience effectively."
        keywords="social media inbox, comment management, customer engagement, sentiment analysis"
      />
      <StructuredData
        data={{
          "@context": "https://schema.org",
          "@type": "WebPage",
          name: "Engage | SocialWave",
          description:
            "Manage and respond to all your social media comments from a unified inbox.",
        }}
      />
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 md:mb-8">
        <div className="mb-4 md:mb-0">
          <h1 className="text-2xl md:text-3xl font-bold mb-2 gradient-text">
            Engage
          </h1>
          <p className="text-muted-foreground text-base md:text-lg">
            Manage and respond to interactions across your social platforms
          </p>
        </div>
        <Button
          onClick={() => fetchCommentsMutation.mutate()}
          disabled={fetchCommentsMutation.isLoading}
          className="w-full md:w-auto px-6 py-2 h-11 md:h-auto rounded-full shadow-md transition-all hover:shadow-lg"
        >
          <RefreshCw
            className={`mr-2 h-5 w-5 ${
              fetchCommentsMutation.isLoading ? "animate-spin" : ""
            }`}
          />
          <span className="hidden sm:inline">Fetch New Comments</span>
          <span className="sm:hidden">Sync Comments</span>
        </Button>
      </div>

      {/* Filter Bar - Enhanced for mobile */}
      <Card className="mb-4 md:mb-6 shadow-sm">
        <CardContent className="p-4 md:p-5">
          {/* Search - Always full width with better mobile UX */}
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              type="text"
              placeholder={
                isMobile
                  ? "Search comments..."
                  : "Search comments or authors..."
              }
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 h-12 text-base rounded-xl border-2 focus:border-primary/50 transition-all duration-200"
            />
          </div>

          {/* Filter Controls - Enhanced mobile-first design */}
          <div className="space-y-3 md:space-y-0 md:flex md:gap-4">
            {/* Platform Select - Full width on mobile */}
            <div className="md:flex-1">
              <select
                value={selectedPlatform || "all"}
                onChange={(e) =>
                  setSelectedPlatform(
                    e.target.value === "all" ? null : e.target.value,
                  )
                }
                className="w-full px-4 py-3 md:py-2.5 rounded-xl border-2 border-input bg-background text-base md:text-sm hover:border-primary/30 focus:border-primary/50 transition-all duration-200 min-h-[48px] md:min-h-[40px] touch-manipulation"
              >
                <option value="all">🌐 All Platforms</option>
                {connectedPlatforms.map((platform) => (
                  <option
                    key={platform}
                    value={platform}
                    className="capitalize"
                  >
                    {platform === "facebook"
                      ? "📘"
                      : platform === "instagram"
                        ? "📷"
                        : "🐦"}{" "}
                    {platform}
                  </option>
                ))}
              </select>
            </div>

            {/* Status Select - Full width on mobile */}
            <div className="md:flex-1">
              <select
                value={
                  respondedFilter === undefined
                    ? "all"
                    : respondedFilter
                      ? "responded"
                      : "pending"
                }
                onChange={(e) => {
                  const value = e.target.value;
                  if (value === "all") setRespondedFilter(undefined);
                  else if (value === "responded") setRespondedFilter(true);
                  else setRespondedFilter(false);
                }}
                className="w-full px-4 py-3 md:py-2.5 rounded-xl border-2 border-input bg-background text-base md:text-sm hover:border-primary/30 focus:border-primary/50 transition-all duration-200 min-h-[48px] md:min-h-[40px] touch-manipulation"
              >
                <option value="all">💬 All Comments</option>
                <option value="pending">⏳ Pending</option>
                <option value="responded">✅ Responded</option>
              </select>
            </div>

            {/* Page Select (Conditional) - Full width on mobile when visible */}
            {selectedPlatform === "facebook" && facebookPages.length > 0 && (
              <div className="md:flex-1">
                <select
                  value={selectedPage || "all"}
                  onChange={(e) =>
                    setSelectedPage(
                      e.target.value === "all" ? null : e.target.value,
                    )
                  }
                  className="w-full px-4 py-3 md:py-2.5 rounded-xl border-2 border-input bg-background text-base md:text-sm hover:border-primary/30 focus:border-primary/50 transition-all duration-200 min-h-[48px] md:min-h-[40px] touch-manipulation"
                >
                  <option value="all">📄 All Pages</option>
                  {facebookPages.map((page: any) => (
                    <option key={page.id} value={page.id}>
                      📄 {page.pageName}
                    </option>
                  ))}
                </select>
              </div>
            )}

            {/* Date Picker - Enhanced mobile experience */}
            <div className="relative md:flex-1" ref={datePickerRef}>
              <Button
                variant="outline"
                className="w-full flex items-center justify-between gap-3 h-12 md:h-10 text-base md:text-sm rounded-xl border-2 hover:border-primary/30 focus:border-primary/50 transition-all duration-200 touch-manipulation"
                onClick={() => setShowDatePicker(!showDatePicker)}
              >
                <Calendar className="h-4 w-4 flex-shrink-0 text-muted-foreground" />
                <span className="truncate flex-1 text-left">
                  {dateRange.startDate
                    ? dateRange.endDate
                      ? isMobile
                        ? `${new Date(dateRange.startDate).toLocaleDateString("en-US", { month: "short", day: "numeric" })} - ${new Date(dateRange.endDate).toLocaleDateString("en-US", { month: "short", day: "numeric" })}`
                        : `${new Date(dateRange.startDate).toLocaleDateString()} - ${new Date(dateRange.endDate).toLocaleDateString()}`
                      : new Date(dateRange.startDate).toLocaleDateString()
                    : "📅 Date Filter"}
                </span>
                {(dateRange.startDate || dateRange.endDate) && (
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-6 w-6 p-0 flex-shrink-0 hover:bg-destructive/10 hover:text-destructive rounded-full"
                    onClick={(e) => {
                      e.stopPropagation();
                      setDateRange({
                        startDate: undefined,
                        endDate: undefined,
                      });
                    }}
                  >
                    <X className="h-3 w-3" />
                  </Button>
                )}
              </Button>
              {showDatePicker && (
                <Card className="absolute right-0 md:left-0 top-full mt-1 z-50 w-80 max-w-[calc(100vw-2rem)] p-4">
                  <CardContent className="p-0 space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-1">
                        <Label htmlFor="start-date">Start Date</Label>
                        <Input
                          id="start-date"
                          type="date"
                          value={dateRange.startDate || ""}
                          onChange={(e) =>
                            setDateRange((prev) => ({
                              ...prev,
                              startDate: e.target.value || undefined,
                            }))
                          }
                        />
                      </div>
                      <div className="space-y-1">
                        <Label htmlFor="end-date">End Date</Label>
                        <Input
                          id="end-date"
                          type="date"
                          value={dateRange.endDate || ""}
                          onChange={(e) =>
                            setDateRange((prev) => ({
                              ...prev,
                              endDate: e.target.value || undefined,
                            }))
                          }
                          min={dateRange.startDate}
                        />
                      </div>
                    </div>
                    <div className="flex justify-end gap-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setShowDatePicker(false)}
                      >
                        Cancel
                      </Button>
                      <Button
                        size="sm"
                        onClick={() => setShowDatePicker(false)}
                      >
                        Apply
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Comments and Response Section */}
      <div
        ref={commentsSectionRef}
        className={`flex flex-col gap-4 relative ${!isMobile ? "lg:grid lg:grid-cols-2 lg:gap-6" : ""}`}
      >
        {/* Visual connector between comments and response - only on desktop */}
        {!isMobile && selectedCommentId && (
          <div className="hidden lg:block absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10">
            <div className="bg-primary/10 rounded-full p-2 shadow-sm border border-primary/20">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="text-primary"
              >
                <path d="m9 18 6-6-6-6" />
              </svg>
            </div>
          </div>
        )}
        {/* Comments List with enhanced visual structure */}
        <Card
          className={`overflow-hidden w-full flex flex-col order-1 min-h-[50vh] transition-all duration-300 shadow-lg border-2 ${
            isMobile
              ? "border-l-4 border-l-primary/30 border-primary/20"
              : "lg:border-r-4 lg:border-r-primary/30 lg:min-h-[60vh] border-primary/20"
          }`}
        >
          <CardHeader className="border-b border-primary/20 bg-gradient-to-r from-primary/8 to-primary/5 p-5 md:p-6">
            <div className="flex items-center justify-between">
              <div className="min-w-0">
                <CardTitle className="flex items-center text-base md:text-lg font-semibold">
                  <MessageSquare className="mr-3 h-5 w-5 md:h-6 md:w-6 text-primary flex-shrink-0" />
                  <span className="truncate">Recent Interactions</span>
                </CardTitle>
                <CardDescription className="text-sm text-muted-foreground/80 mt-1">
                  {selectedPlatform
                    ? `Interactions from ${selectedPlatform}`
                    : "Interactions from all platforms"}
                  {pagination && (
                    <span className="ml-2 px-2 py-0.5 bg-primary/15 text-primary rounded-full text-xs font-medium">
                      {pagination.totalCount} total
                    </span>
                  )}
                </CardDescription>
              </div>
              <div className="hidden lg:flex items-center text-primary text-sm font-semibold flex-shrink-0 bg-primary/10 px-3 py-1.5 rounded-full">
                <span>Step 1: Select</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="ml-2"
                >
                  <path d="m9 18 6-6-6-6" />
                </svg>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-0 flex-1 flex flex-col">
            {isLoadingComments && !comments.length ? (
              <LoadingSpinner className="py-12" />
            ) : commentThreads.length === 0 ? (
              <EmptyState
                icon={<MessageSquare className="h-12 w-12" />}
                title={
                  !accounts || accounts.length === 0
                    ? "No accounts connected"
                    : "No comments found"
                }
                description={
                  !accounts || accounts.length === 0
                    ? "Connect your social media accounts to start managing comments and engaging with your audience."
                    : searchQuery
                      ? "Try a different search query"
                      : "Fetch new comments or adjust your filters to see interactions here."
                }
              >
                {!accounts || accounts.length === 0 ? (
                  <Button
                    className="w-full md:w-auto"
                    onClick={() => navigate("/settings")}
                  >
                    <Link2 className="h-4 w-4 mr-2" />
                    Connect Account
                  </Button>
                ) : (
                  <>
                    <Button
                      className="w-full md:w-auto"
                      onClick={() => fetchCommentsMutation.mutate()}
                      disabled={fetchCommentsMutation.isLoading}
                    >
                      {fetchCommentsMutation.isLoading ? (
                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <RefreshCw className="h-4 w-4 mr-2" />
                      )}
                      Fetch Comments
                    </Button>
                    <Button
                      variant="outline"
                      className="w-full md:w-auto"
                      onClick={() => navigate("/settings")}
                    >
                      <Settings className="h-4 w-4 mr-2" />
                      Account Settings
                    </Button>
                  </>
                )}
              </EmptyState>
            ) : (
              <>
                <div
                  ref={commentsContainerRef}
                  className="flex-1 overflow-y-auto w-full space-y-4 p-2 scroll-smooth"
                  style={{ maxHeight: isMobile ? "50vh" : "60vh" }}
                >
                  {commentThreads.map((thread: any) => (
                    <div
                      key={thread.id}
                      className="bg-card rounded-lg border shadow-sm overflow-hidden"
                    >
                      {/* Thread Header with Post Context - Enhanced hierarchy */}
                      <div className="bg-gradient-to-r from-primary/8 via-primary/5 to-primary/3 px-4 py-5 border-b border-primary/20">
                        <div className="space-y-4">
                          {/* Header Row */}
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <div className="w-2.5 h-2.5 rounded-full bg-primary shadow-sm"></div>
                              <span className="text-sm font-semibold text-foreground/80">
                                {thread.platform === "facebook"
                                  ? "Facebook"
                                  : "Instagram"}{" "}
                                Post
                              </span>
                              <Badge
                                variant="secondary"
                                className="text-xs bg-primary/15 text-primary border-primary/20"
                              >
                                {thread.comments.length} comment
                                {thread.comments.length !== 1 ? "s" : ""}
                              </Badge>
                            </div>
                            <div className="text-xs text-muted-foreground/60">
                              ID: {thread.postId.slice(0, 8)}...
                            </div>
                          </div>

                          {/* Post Content Preview */}
                          {threadPostContent[thread.id] && (
                            <div className="space-y-2">
                              {threadPostContent[thread.id]?.isLoading ? (
                                <div className="flex items-center space-x-2">
                                  <div className="w-4 h-4 animate-spin rounded-full border-2 border-primary border-t-transparent"></div>
                                  <span className="text-xs text-muted-foreground">
                                    Loading post...
                                  </span>
                                </div>
                              ) : threadPostContent[thread.id]?.error ? (
                                <div className="text-xs text-muted-foreground italic">
                                  Post content unavailable
                                </div>
                              ) : (
                                <div className="space-y-2">
                                  {/* Post Author and Date */}
                                  <div className="flex items-center justify-between text-xs text-muted-foreground/70">
                                    <div className="flex items-center space-x-2">
                                      {threadPostContent[thread.id]?.author && (
                                        <span className="font-semibold text-foreground/70">
                                          {threadPostContent[thread.id]?.author}
                                        </span>
                                      )}
                                      {threadPostContent[thread.id]?.date && (
                                        <>
                                          <span className="opacity-50">•</span>
                                          <span className="opacity-75">
                                            {threadPostContent[thread.id]?.date}
                                          </span>
                                        </>
                                      )}
                                    </div>
                                    {threadPostContent[thread.id]
                                      ?.permalinkUrl && (
                                      <Button
                                        variant="ghost"
                                        size="icon"
                                        className="h-6 w-6 text-muted-foreground hover:text-primary hover:bg-primary/10 rounded-md"
                                        onClick={() =>
                                          window.open(
                                            threadPostContent[thread.id]
                                              ?.permalinkUrl,
                                            "_blank",
                                          )
                                        }
                                      >
                                        <ExternalLink className="h-3.5 w-3.5" />
                                      </Button>
                                    )}
                                  </div>

                                  {/* Post Content - Enhanced hierarchy */}
                                  {threadPostContent[thread.id]?.content && (
                                    <div className="bg-gradient-to-r from-primary/5 to-primary/2 rounded-lg p-4 border border-primary/20 shadow-sm">
                                      <div className="flex items-start gap-2 mb-2">
                                        <div className="w-1.5 h-1.5 rounded-full bg-primary mt-2 flex-shrink-0"></div>
                                        <div className="min-w-0 flex-1">
                                          <p className="text-sm font-medium text-foreground/90 leading-relaxed line-clamp-3">
                                            {
                                              threadPostContent[thread.id]
                                                ?.content
                                            }
                                          </p>
                                        </div>
                                      </div>
                                    </div>
                                  )}

                                  {/* Post Image */}
                                  {threadPostContent[thread.id]?.imageUrl && (
                                    <div className="flex justify-center">
                                      <img
                                        src={
                                          threadPostContent[thread.id]
                                            ?.imageUrl || ""
                                        }
                                        alt="Post content"
                                        className="max-h-20 rounded-md object-cover border border-border/50"
                                      />
                                    </div>
                                  )}
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Comments in this thread with enhanced spacing */}
                      <div className="space-y-1">
                        {thread.comments.map(
                          (comment: any, commentIndex: number) => (
                            <div
                              key={comment.id}
                              data-comment-id={comment.id}
                              ref={
                                selectedCommentId === comment.id
                                  ? selectedCommentRef
                                  : null
                              }
                              className={`relative p-5 md:p-6 transition-all duration-500 ease-out cursor-pointer border-l-4 ${commentIndex > 0 ? "border-t border-t-border/40" : ""} ${
                                selectedCommentId === comment.id
                                  ? "comment-active border-l-primary bg-gradient-to-r from-primary/15 to-primary/5 shadow-xl transform scale-[1.02] ring-2 ring-primary/30 z-10 animate-pulse-subtle"
                                  : isNewComment(comment)
                                    ? "comment-new border-l-green-400/50 bg-green-50/30 hover:bg-green-100/50 hover:border-l-green-500 hover:shadow-lg hover:transform hover:scale-[1.005] transition-all duration-300 ease-in-out"
                                    : "comment-old border-l-transparent hover:border-l-primary/40 hover:bg-accent/50 hover:shadow-md hover:transform hover:scale-[1.005] transition-all duration-300 ease-in-out"
                              }`}
                              onClick={() => {
                                // Smooth transition when selecting a comment
                                const element = document.querySelector(
                                  `[data-comment-id="${comment.id}"]`,
                                );
                                if (element) {
                                  element.scrollIntoView({
                                    behavior: "smooth",
                                    block: "center",
                                  });
                                }

                                // Add a slight delay to create a smooth flow effect
                                setTimeout(() => {
                                  setSelectedCommentId(comment.id);
                                  setResponseText("");
                                }, 150);
                              }}
                            >
                              {/* Selected comment indicator */}
                              {selectedCommentId === comment.id && (
                                <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-primary via-primary/80 to-primary/60 shadow-sm"></div>
                              )}

                              {/* New comment indicator */}
                              {isNewComment(comment) &&
                                selectedCommentId !== comment.id && (
                                  <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-green-500 via-green-400 to-green-300"></div>
                                )}

                              <div className="space-y-4">
                                {/* Comment content - prioritized and prominent */}
                                <div className="leading-relaxed relative mb-4">
                                  {selectedCommentId === comment.id && (
                                    <div className="absolute -left-2 top-0 text-primary/60">
                                      <svg
                                        width="6"
                                        height="6"
                                        viewBox="0 0 8 8"
                                        className="fill-current"
                                      >
                                        <circle cx="4" cy="4" r="4" />
                                      </svg>
                                    </div>
                                  )}
                                  <p
                                    className={`text-sm md:text-base break-words ${
                                      selectedCommentId === comment.id
                                        ? "font-medium text-foreground/90 leading-relaxed"
                                        : "font-normal text-foreground/75"
                                    }`}
                                  >
                                    {comment.text}
                                  </p>
                                </div>

                                {/* Author info, date, and metadata - properly subordinated */}
                                <div className="flex items-center justify-between gap-3 mt-4 pt-3 border-t border-border/40">
                                  <div className="flex items-center gap-2 min-w-0">
                                    <Avatar className="h-5 w-5 md:h-6 md:w-6 flex-shrink-0">
                                      {comment.authorImage ? (
                                        <AvatarImage
                                          src={comment.authorImage}
                                          alt={comment.authorName}
                                        />
                                      ) : (
                                        <AvatarFallback className="bg-muted text-muted-foreground text-xs">
                                          {getInitials(comment.authorName)}
                                        </AvatarFallback>
                                      )}
                                    </Avatar>
                                    <div className="flex items-center gap-2 text-xs text-muted-foreground/70 min-w-0">
                                      <span className="truncate font-normal">
                                        {comment.authorName}
                                      </span>
                                      <span className="opacity-50">•</span>
                                      <span className="flex-shrink-0 opacity-75">
                                        {formatDate(comment.createdAt)}
                                      </span>
                                    </div>
                                  </div>
                                  <div className="flex items-center gap-2 flex-shrink-0">
                                    <div
                                      className={`transition-colors opacity-60 ${
                                        selectedCommentId === comment.id
                                          ? "text-primary opacity-80"
                                          : "text-muted-foreground"
                                      }`}
                                    >
                                      {getPlatformIcon(comment.platform)}
                                    </div>
                                    {comment.responded && (
                                      <Badge
                                        variant="outline"
                                        className={`text-xs px-1.5 py-0.5 h-4 transition-all ${
                                          selectedCommentId === comment.id
                                            ? "bg-primary/15 text-primary border-primary/30 shadow-sm"
                                            : "bg-primary/10 text-primary border-primary/20"
                                        }`}
                                      >
                                        <Check className="h-2 w-2 mr-1" />
                                        <span className="hidden sm:inline text-xs">
                                          Responded
                                        </span>
                                        <span className="sm:hidden">✓</span>
                                      </Badge>
                                    )}
                                    {selectedCommentId === comment.id && (
                                      <Badge
                                        variant="outline"
                                        className="bg-primary/10 text-primary border-primary/20 text-xs px-1.5 py-0.5 h-4 animate-pulse"
                                      >
                                        <span className="text-xs">
                                          Selected
                                        </span>
                                      </Badge>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </div>
                          ),
                        )}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Pagination Controls */}
                {pagination && pagination.totalPages > 1 && (
                  <div className="p-3 md:p-4 border-t flex items-center justify-between gap-3">
                    <Button
                      variant="outline"
                      size="sm"
                      className="min-w-[80px] h-9 md:h-auto"
                      onClick={() =>
                        setCurrentPage((prev) => Math.max(0, prev - 1))
                      }
                      disabled={currentPage === 0}
                    >
                      <ChevronLeft className="h-4 w-4 md:mr-1" />
                      <span className="hidden sm:inline">Previous</span>
                    </Button>

                    <div className="text-xs md:text-sm text-muted-foreground text-center flex-1">
                      <div className="sm:hidden">
                        {currentPage + 1}/{pagination.totalPages}
                      </div>
                      <div className="hidden sm:block">
                        Page {currentPage + 1} of {pagination.totalPages}
                      </div>
                    </div>

                    <Button
                      variant="outline"
                      size="sm"
                      className="min-w-[80px] h-9 md:h-auto"
                      onClick={() => setCurrentPage((prev) => prev + 1)}
                      disabled={!pagination.hasMore}
                    >
                      <span className="hidden sm:inline">Next</span>
                      <ChevronRight className="h-4 w-4 md:ml-1" />
                    </Button>
                  </div>
                )}
              </>
            )}

            {/* Loading indicator for pagination */}
            {isFetchingComments && isPreviousData && (
              <div className="p-4 flex justify-center border-t">
                <RefreshCw className="h-5 w-5 animate-spin text-primary/50" />
              </div>
            )}
          </CardContent>
        </Card>

        {/* Response Section with enhanced visual structure */}
        <Card
          ref={responsePanelRef}
          className={`overflow-hidden w-full transition-all duration-500 ease-out shadow-lg border-2 ${
            isMobile
              ? "border-l-4 border-l-primary/30 border-primary/20 order-2 min-h-[50vh] sticky top-4 z-20"
              : "lg:order-2 lg:min-h-[60vh] border-primary/20"
          } ${selectedCommentId ? "animate-slide-in-right" : ""}`}
          style={
            !isMobile && selectedCommentId
              ? {
                  transform: `translateY(${responsePanelPosition.top}px)`,
                  transition:
                    responsePanelPosition.behavior === "smooth"
                      ? "transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)"
                      : "none",
                }
              : {}
          }
        >
          <CardHeader className="border-b border-primary/20 bg-gradient-to-r from-primary/8 to-primary/5 p-5 md:p-6">
            <div className="flex items-center justify-between">
              <div className="min-w-0">
                <CardTitle className="flex items-center text-base md:text-lg font-semibold">
                  <Send className="mr-3 h-5 w-5 md:h-6 md:w-6 text-primary flex-shrink-0" />
                  Response
                </CardTitle>
                <CardDescription className="text-sm text-muted-foreground/80 truncate mt-1">
                  {selectedComment
                    ? `Respond to comment from ${selectedComment.authorName}`
                    : "Select a comment to respond"}
                </CardDescription>
              </div>
              <div className="hidden lg:flex items-center text-primary text-sm font-semibold flex-shrink-0 bg-primary/10 px-3 py-1.5 rounded-full">
                <span>Step 2: Respond</span>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-6">
            {!selectedComment ? (
              <div className="empty-state animate-fade-in">
                <div className="empty-state-icon animate-bounce-subtle">
                  <MessageSquare className="h-10 w-10 md:h-12 md:w-12" />
                </div>
                <h3 className="text-base md:text-lg font-medium mb-2">
                  No comment selected
                </h3>
                <p className="text-sm md:text-base text-muted-foreground max-w-sm">
                  Select a comment from the list to craft your response
                </p>
              </div>
            ) : (
              <div className="space-y-6 animate-slide-in-up">
                {/* 1. Original Post */}
                {originalPostContent.isLoading ? (
                  <Skeleton className="h-32 w-full" />
                ) : (
                  <Card className="border-primary/20 bg-gradient-to-br from-primary/8 via-primary/4 to-primary/2">
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-base font-semibold flex items-center">
                          <div className="w-2 h-2 rounded-full bg-primary mr-2"></div>
                          Original Post
                        </CardTitle>
                        {originalPostContent.permalinkUrl && (
                          <Button
                            variant="outline"
                            size="sm"
                            className="h-9 text-sm border-primary/30 hover:bg-primary/10"
                            onClick={() =>
                              window.open(
                                originalPostContent.permalinkUrl,
                                "_blank",
                              )
                            }
                          >
                            <ExternalLink className="h-4 w-4 mr-2" />
                            View Post
                          </Button>
                        )}
                      </div>
                    </CardHeader>
                    <CardContent className="pt-0">
                      {originalPostContent.imageUrl && (
                        <img
                          src={originalPostContent.imageUrl}
                          alt="Original post"
                          className="rounded-lg mb-5 shadow-md border border-primary/20"
                        />
                      )}
                      <div className="bg-background/60 rounded-lg p-4 border border-primary/20">
                        <p className="text-base font-medium text-foreground/90 whitespace-pre-line leading-relaxed">
                          {originalPostContent.content ||
                            "No content available."}
                        </p>
                      </div>
                      {/* Author and date info */}
                      {(originalPostContent.author ||
                        originalPostContent.date) && (
                        <div className="flex items-center gap-2 mt-4 pt-3 border-t border-primary/20">
                          <div className="text-sm text-muted-foreground">
                            {originalPostContent.author && (
                              <span className="font-medium">
                                {originalPostContent.author}
                              </span>
                            )}
                            {originalPostContent.author &&
                              originalPostContent.date && (
                                <span className="mx-2">•</span>
                              )}
                            {originalPostContent.date && (
                              <span>{originalPostContent.date}</span>
                            )}
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {/* 2. Selected Comment Context - Enhanced hierarchy */}
                <Card className="bg-gradient-to-r from-amber/10 to-amber/5 border-amber-300/30">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-sm font-medium flex items-center text-amber-700">
                        <MessageCircle className="h-4 w-4 mr-2" />
                        Comment to Respond
                      </CardTitle>
                      <div className="flex items-center gap-2">
                        <Avatar className="h-7 w-7">
                          {selectedComment.authorImage ? (
                            <AvatarImage
                              src={selectedComment.authorImage}
                              alt={selectedComment.authorName}
                            />
                          ) : (
                            <AvatarFallback className="bg-amber-100 text-amber-700 text-xs">
                              {getInitials(selectedComment.authorName)}
                            </AvatarFallback>
                          )}
                        </Avatar>
                        <span className="text-sm font-medium text-amber-700">
                          {selectedComment.authorName}
                        </span>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <div className="bg-background/60 rounded-lg p-3 border border-amber-200/50">
                      <p className="text-sm font-normal text-foreground/80 leading-relaxed">
                        {selectedComment.text}
                      </p>
                    </div>
                    <div className="flex items-center justify-between mt-3 text-xs text-muted-foreground">
                      <span className="font-medium">
                        {formatDate(selectedComment.createdAt)}
                      </span>
                      <div className="flex items-center gap-1">
                        {getPlatformIcon(selectedComment.platform)}
                        <span className="capitalize font-medium">
                          {selectedComment.platform}
                        </span>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* 3. Content Intelligence */}
                {commentAnalysis && (
                  <Accordion type="single" collapsible className="w-full">
                    <AccordionItem value="item-1">
                      <AccordionTrigger>Content Intelligence</AccordionTrigger>
                      <AccordionContent>
                        <div className="border border-primary/20 rounded-lg p-3 bg-primary/5 space-y-2">
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium text-sm flex items-center">
                              <Sparkles className="h-4 w-4 mr-1 text-primary" />
                              AI Analysis
                            </h4>
                            <Badge
                              variant="outline"
                              className="bg-primary/10 text-primary border-primary/20"
                            >
                              Priority: {commentAnalysis.priorityLevel}/10
                            </Badge>
                          </div>
                          <p className="text-sm text-muted-foreground break-words">
                            <strong>Reasoning:</strong>{" "}
                            {commentAnalysis.reasoning}
                          </p>
                          <p className="text-sm text-muted-foreground break-words">
                            <strong>Strategy:</strong>{" "}
                            {commentAnalysis.responseStrategy}
                          </p>
                          <div className="flex flex-wrap gap-2 pt-2">
                            {commentAnalysis.emojiSuggestions.map(
                              (emojiSugg) => (
                                <TooltipProvider key={emojiSugg.emoji}>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Button
                                        variant="outline"
                                        size="icon"
                                        className="h-8 w-8"
                                        onClick={() =>
                                          setResponseText(
                                            (prev) => prev + emojiSugg.emoji,
                                          )
                                        }
                                      >
                                        {emojiSugg.emoji}
                                      </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>
                                      <p>{emojiSugg.explanation}</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </TooltipProvider>
                              ),
                            )}
                          </div>
                        </div>
                      </AccordionContent>
                    </AccordionItem>
                  </Accordion>
                )}

                {/* 4. Suggested Responses and Input */}
                <div className="space-y-5">
                  <div className="flex justify-between items-center">
                    <Label htmlFor="response" className="text-sm md:text-base">
                      Your Response
                    </Label>
                    {responseVariations.length > 0 && (
                      <Badge
                        variant="outline"
                        className="px-3 py-1 bg-primary/10 text-primary"
                      >
                        <Sparkles className="h-3 w-3 mr-1 text-primary" />
                        AI Generated
                      </Badge>
                    )}
                  </div>

                  {/* AI Response Variations */}
                  {isLoadingVariations || isGeneratingVariations ? (
                    <div className="flex items-center justify-center p-6 bg-muted/30 rounded-lg">
                      <RefreshCw className="h-8 w-8 animate-spin text-primary/60 mr-2" />
                      <span className="text-muted-foreground">
                        Generating thoughtful responses...
                      </span>
                    </div>
                  ) : responseVariations.length > 0 ? (
                    <div className="space-y-3">
                      <div className="grid grid-cols-1 gap-3">
                        {responseVariations.map((variation) => (
                          <Card
                            key={variation.id}
                            className={`p-3 md:p-3 cursor-pointer transition-all hover:shadow-md relative group ${responseText === variation.text ? "border-primary bg-primary/5" : "border-secondary/50 bg-secondary/10 hover:bg-secondary/20"}`}
                            onClick={() => setResponseText(variation.text)}
                          >
                            <p className="text-sm md:text-sm pr-12 md:pr-16 break-words leading-relaxed">
                              {variation.text}
                            </p>
                            <div className="absolute top-2 right-2 flex gap-0.5 md:gap-1 opacity-100 md:opacity-0 md:group-hover:opacity-100 transition-opacity">
                              {/* Thumbs up/down feedback buttons */}
                              <TooltipProvider>
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <Button
                                      variant="ghost"
                                      size="icon"
                                      className="h-7 w-7 md:h-6 md:w-6 hover:bg-green-100 hover:text-green-600 touch-manipulation"
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        if (selectedCommentId) {
                                          apiClient
                                            .submitResponseFeedback({
                                              commentId: selectedCommentId,
                                              responseVariationId: variation.id,
                                              feedbackType: "thumbs_up",
                                              regenerateAfterFeedback: false,
                                            })
                                            .then(() => {
                                              toast({
                                                title: "Feedback submitted",
                                                description:
                                                  "Thanks for helping us improve!",
                                              });
                                            });
                                        }
                                      }}
                                    >
                                      <ThumbsUp className="h-3.5 w-3.5 md:h-3 md:w-3" />
                                    </Button>
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p>Good response</p>
                                  </TooltipContent>
                                </Tooltip>
                              </TooltipProvider>
                              <TooltipProvider>
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <Button
                                      variant="ghost"
                                      size="icon"
                                      className="h-7 w-7 md:h-6 md:w-6 hover:bg-red-100 hover:text-red-600 touch-manipulation"
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        if (selectedCommentId) {
                                          apiClient
                                            .submitResponseFeedback({
                                              commentId: selectedCommentId,
                                              responseVariationId: variation.id,
                                              feedbackType: "thumbs_down",
                                              regenerateAfterFeedback: true,
                                            })
                                            .then((result) => {
                                              toast({
                                                title: "Feedback submitted",
                                                description:
                                                  "Generating better responses...",
                                              });
                                              // Update response variations with new ones
                                              if (result.newVariations) {
                                                setResponseVariations(
                                                  result.newVariations,
                                                );
                                              }
                                            });
                                        }
                                      }}
                                    >
                                      <ThumbsDown className="h-3.5 w-3.5 md:h-3 md:w-3" />
                                    </Button>
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p>Generate better responses</p>
                                  </TooltipContent>
                                </Tooltip>
                              </TooltipProvider>
                              <TooltipProvider>
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <Button
                                      variant="ghost"
                                      size="icon"
                                      className="h-7 w-7 md:h-6 md:w-6 hover:bg-primary/10 touch-manipulation"
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        copy(variation.text);
                                        if (originalPostContent.permalinkUrl) {
                                          window.open(
                                            originalPostContent.permalinkUrl,
                                            "_blank",
                                          );
                                        }
                                        toast({
                                          title: "Copied to clipboard",
                                          description:
                                            "Response text has been copied",
                                        });
                                      }}
                                    >
                                      <Copy className="h-3.5 w-3.5 md:h-3 md:w-3" />
                                    </Button>
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p>Copy response & open post</p>
                                  </TooltipContent>
                                </Tooltip>
                              </TooltipProvider>
                            </div>
                          </Card>
                        ))}
                      </div>
                    </div>
                  ) : null}

                  <div className="relative group">
                    <Textarea
                      id="response"
                      placeholder="Type your response here..."
                      className="min-h-[100px] md:min-h-[120px] border-secondary/50 focus:border-primary pr-8 text-base resize-none touch-manipulation"
                      value={responseText}
                      onChange={(e) => setResponseText(e.target.value)}
                    />
                  </div>
                </div>

                {/* Action Buttons - Enhanced for mobile */}
                <div
                  className={`${isMobile ? "sticky bottom-0 left-0 right-0 bg-background/95 backdrop-blur-sm border-t p-4 -mx-6 -mb-6" : ""}`}
                >
                  <div
                    className={`flex gap-3 ${isMobile ? "" : "sm:grid sm:grid-cols-3 sm:gap-2"}`}
                  >
                    <Button
                      className={`font-medium shadow-md hover:shadow-lg transition-all touch-manipulation ${
                        isMobile
                          ? "flex-1 py-4 h-14 text-base"
                          : "py-3 h-12 text-sm order-1"
                      }`}
                      disabled={!responseText || respondMutation.isLoading}
                      onClick={() => {
                        if (selectedCommentId && responseText) {
                          respondMutation.mutate(
                            {
                              commentId: selectedCommentId,
                              responseText,
                            },
                            {
                              onSuccess: () => {
                                apiClient.updateCommentStatus({
                                  commentId: selectedCommentId,
                                  status: "responded",
                                  responseText,
                                });
                                queryClient.invalidateQueries({
                                  queryKey: queryKeys.comments(),
                                });
                              },
                            },
                          );
                        }
                      }}
                    >
                      {respondMutation.isLoading ? (
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Send className="h-4 w-4 mr-2" />
                      )}
                      <span className={isMobile ? "" : "hidden sm:inline"}>
                        Post Response
                      </span>
                      <span className={isMobile ? "hidden" : "sm:hidden"}>
                        Post
                      </span>
                    </Button>

                    {isMobile ? (
                      /* Mobile: Separate row for quick actions */
                      <>
                        <Button
                          className="py-4 h-14 text-base font-medium shadow-md hover:shadow-lg transition-all touch-manipulation"
                          variant="outline"
                          disabled={
                            respondMutation.isLoading ||
                            updateCommentStatusMutation.isLoading
                          }
                          onClick={() => {
                            if (selectedCommentId) {
                              updateCommentStatusMutation.mutate({
                                commentId: selectedCommentId,
                                status: "reacted",
                              });
                            }
                          }}
                        >
                          {updateCommentStatusMutation.isLoading ? (
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          ) : (
                            <span className="mr-2">👍</span>
                          )}
                          Like
                        </Button>

                        <Button
                          className="py-4 h-14 text-base font-medium shadow-md hover:shadow-lg transition-all touch-manipulation"
                          variant="outline"
                          disabled={
                            respondMutation.isLoading ||
                            updateCommentStatusMutation.isLoading
                          }
                          onClick={() => {
                            if (selectedCommentId) {
                              updateCommentStatusMutation.mutate({
                                commentId: selectedCommentId,
                                status: "dismissed",
                              });
                            }
                          }}
                        >
                          {updateCommentStatusMutation.isLoading ? (
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          ) : (
                            <X className="h-4 w-4 mr-2" />
                          )}
                          Skip
                        </Button>
                      </>
                    ) : (
                      /* Desktop: Grid layout */
                      <div className="flex gap-3 sm:contents order-2">
                        <Button
                          className="flex-1 sm:flex-none py-3 h-12 font-medium text-sm shadow-md hover:shadow-lg transition-all touch-manipulation"
                          variant="outline"
                          disabled={respondMutation.isLoading}
                          onClick={() => {
                            if (selectedCommentId) {
                              apiClient.updateCommentStatus({
                                commentId: selectedCommentId,
                                status: "reacted",
                              });
                              setSelectedCommentId(null);
                              setResponseText("");
                            }
                          }}
                        >
                          <span className="mr-2">👍</span>
                          <span className="hidden sm:inline">React</span>
                          <span className="sm:hidden">Like</span>
                        </Button>

                        <Button
                          className="flex-1 sm:flex-none py-3 h-12 font-medium text-sm shadow-md hover:shadow-lg transition-all touch-manipulation"
                          variant="outline"
                          disabled={respondMutation.isLoading}
                          onClick={() => {
                            if (selectedCommentId) {
                              apiClient.updateCommentStatus({
                                commentId: selectedCommentId,
                                status: "dismissed",
                              });
                              setSelectedCommentId(null);
                              setResponseText("");
                            }
                          }}
                        >
                          <X className="h-4 w-4 mr-2" />
                          <span className="hidden sm:inline">Dismiss</span>
                          <span className="sm:hidden">Skip</span>
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

// OAuth Button components
function TwitterOAuthButton() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  // Handle OAuth callback
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const code = searchParams.get("code");
    const state = searchParams.get("state");
    const error = searchParams.get("error");
    const platform = searchParams.get("platform");

    // Only process if this is a Twitter callback
    if (platform !== "twitter") {
      return;
    }

    // Clean up URL after processing
    const cleanUpUrl = () => {
      navigate("/settings", { replace: true });
    };

    if (error) {
      toast({
        title: "Connection failed",
        description: `Twitter authorization failed: ${error}`,
        variant: "destructive",
      });
      cleanUpUrl();
      return;
    }

    if (code && state) {
      const handleCallback = async () => {
        setIsLoading(true);
        try {
          await apiClient.handleTwitterOAuthCallback({
            code,
            state,
          });
          queryClient.invalidateQueries(queryKeys.connectedAccounts());

          toast({
            title: "Account connected",
            description: "Your Twitter account has been connected successfully",
          });
        } catch (callbackError: any) {
          toast({
            title: "Connection failed",
            description:
              callbackError instanceof Error
                ? callbackError.message
                : "Failed to connect account",
            variant: "destructive",
          });
        } finally {
          setIsLoading(false);
          cleanUpUrl();
        }
      };

      handleCallback();
    }
  }, [location, navigate, queryClient, toast]);

  // Initiate OAuth flow
  const connectWithTwitter = async () => {
    setIsLoading(true);
    try {
      const result = await apiClient.getTwitterOAuthUrl();

      // Check if we got a missingCredentials response
      if ("missingCredentials" in result) {
        toast({
          title: "Configuration Required",
          description:
            "Twitter API credentials are not configured. Please add them in the app settings.",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      // Open OAuth window instead of direct navigation
      const oauthWindow = window.open(
        result.url,
        "twitter-oauth",
        "width=600,height=700,menubar=no,toolbar=no,location=no",
      );

      if (!oauthWindow) {
        toast({
          title: "Popup Blocked",
          description:
            "Please allow popups for this site to connect with Twitter",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      // Show a toast to guide the user
      toast({
        title: "Twitter Authentication",
        description:
          "Please complete the authentication in the popup window. You'll be redirected back automatically.",
      });

      // Don't set isLoading to false here - it will be handled when the callback URL is processed
    } catch (error: any) {
      toast({
        title: "Connection failed",
        description:
          error instanceof Error
            ? error.message
            : "Failed to initiate Twitter connection",
        variant: "destructive",
      });
      setIsLoading(false);
    }
  };

  return (
    <Button
      onClick={connectWithTwitter}
      disabled={isLoading}
      className="bg-[#1DA1F2] hover:bg-[#1DA1F2]/90 text-white"
    >
      {isLoading ? (
        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
      ) : (
        <Twitter className="h-4 w-4 mr-2" />
      )}
      Connect with Twitter
    </Button>
  );
}

function YouTubeOAuthButton() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  // Handle OAuth callback
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const code = searchParams.get("code");
    const state = searchParams.get("state");
    const error = searchParams.get("error");
    const platform = searchParams.get("platform");

    // Only process if this is a YouTube callback
    if (platform !== "youtube") {
      return;
    }

    // Clean up URL after processing
    const cleanUpUrl = () => {
      navigate("/settings", { replace: true });
    };

    if (error) {
      toast({
        title: "Connection failed",
        description: `YouTube authorization failed: ${error}`,
        variant: "destructive",
      });
      cleanUpUrl();
      return;
    }

    if (code && state) {
      const handleCallback = async () => {
        setIsLoading(true);
        try {
          await apiClient.handleYouTubeOAuthCallback({
            code,
            state,
          });
          queryClient.invalidateQueries(queryKeys.connectedAccounts());

          toast({
            title: "Account connected",
            description: "Your YouTube account has been connected successfully",
          });
        } catch (error: any) {
          toast({
            title: "Connection failed",
            description:
              error instanceof Error
                ? error.message
                : "Failed to connect account",
            variant: "destructive",
          });
        } finally {
          setIsLoading(false);
          cleanUpUrl();
        }
      };

      handleCallback();
    }
  }, [location, navigate, queryClient, toast]);

  // Initiate OAuth flow
  const connectWithYouTube = async () => {
    setIsLoading(true);
    try {
      const result = await apiClient.getYouTubeOAuthUrl();

      // Check if we got a missingCredentials response
      if ("missingCredentials" in result) {
        toast({
          title: "Configuration Required",
          description:
            "Google API credentials are not configured. Please add them in the app settings.",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      // Open OAuth window instead of direct navigation
      const oauthWindow = window.open(
        result.url,
        "youtube-oauth",
        "width=600,height=700,menubar=no,toolbar=no,location=no",
      );

      if (!oauthWindow) {
        toast({
          title: "Popup Blocked",
          description:
            "Please allow popups for this site to connect with YouTube",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      // Show a toast to guide the user
      toast({
        title: "YouTube Authentication",
        description:
          "Please complete the authentication in the popup window. You'll be redirected back automatically.",
      });

      // Don't set isLoading to false here - it will be handled when the callback URL is processed
    } catch (error: any) {
      toast({
        title: "Connection failed",
        description:
          error instanceof Error
            ? error.message
            : "Failed to initiate YouTube connection",
        variant: "destructive",
      });
      setIsLoading(false);
    }
  };

  return (
    <Button
      onClick={connectWithYouTube}
      disabled={isLoading}
      className="bg-[#FF0000] hover:bg-[#FF0000]/90 text-white"
    >
      {isLoading ? (
        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
      ) : (
        <Youtube className="h-4 w-4 mr-2" />
      )}
      Connect with YouTube
    </Button>
  );
}

function FacebookOAuthButton() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [availablePages, setAvailablePages] = useState<Array<{
    id: string;
    name: string;
  }> | null>(null);
  // Removed unused accountData state
  const navigate = useNavigate();
  const location = useLocation();

  // Handle OAuth callback
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const code = searchParams.get("code");
    const state = searchParams.get("state");
    const error = searchParams.get("error");
    const platform = searchParams.get("platform");

    // Only process if this is a Facebook callback
    if (platform !== "facebook" || !code) {
      return;
    }

    // Clean up URL after processing
    const cleanUpUrl = () => {
      navigate("/settings", { replace: true });
    };

    if (error) {
      toast({
        title: "Connection failed",
        description: `Facebook authorization failed: ${error}`,
        variant: "destructive",
      });
      cleanUpUrl();
      return;
    }

    if (code && state) {
      const handleCallback = async () => {
        setIsLoading(true);
        try {
          const result = await apiClient.handleFacebookOAuthCallback({
            code,
            state,
            platform: "facebook",
          });

          // Check if we need page selection
          if (result.needsPageSelection && result.availablePages) {
            setAvailablePages(result.availablePages);

            setIsLoading(false);
            cleanUpUrl();
            return;
          }

          // Standard success flow
          queryClient.invalidateQueries(queryKeys.connectedAccounts());

          toast({
            title: "Account connected",
            description:
              "Your Facebook account has been connected successfully",
          });

          if (result.warning) {
            toast({
              title: "Limited functionality",
              description: result.warning,
              variant: "destructive",
            });
          }
        } catch (error: any) {
          toast({
            title: "Connection failed",
            description:
              error instanceof Error
                ? error.message
                : "Failed to connect account",
            variant: "destructive",
          });
        } finally {
          setIsLoading(false);
          cleanUpUrl();
        }
      };

      handleCallback();
    }
  }, [location, navigate, queryClient, toast]);

  // Handle page selection confirmation
  const handlePageSelection = (selectedPageIds: string[]) => {
    if (selectedPageIds.length === 0) {
      toast({
        title: "No Pages Selected",
        description: "Please select at least one Page to connect",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    apiClient
      .handleFacebookOAuthCallback({
        platform: "facebook",
        code: "", // Not needed for the second call
        state: "", // Not needed for the second call
        selectedPageIds,
      })
      .then(() => {
        queryClient.invalidateQueries(queryKeys.connectedAccounts());
        setAvailablePages(null);

        toast({
          title: "Pages Connected",
          description: `Successfully connected ${selectedPageIds.length} Facebook ${selectedPageIds.length === 1 ? "Page" : "Pages"}`,
        });
      })
      .catch((error) => {
        toast({
          title: "Connection failed",
          description:
            error instanceof Error ? error.message : "Failed to connect pages",
          variant: "destructive",
        });
      })
      .finally(() => {
        setIsLoading(false);
      });
  };

  // Cancel page selection
  const handleCancelPageSelection = () => {
    setAvailablePages(null);
    toast({
      title: "Connection canceled",
      description: "No Facebook Pages were connected",
    });
  };

  // Initiate OAuth flow
  const connectWithFacebook = async () => {
    setIsLoading(true);
    try {
      const result = await apiClient.getFacebookOAuthUrl({
        platform: "facebook",
      });

      // Check if we got a missingCredentials response
      if ("missingCredentials" in result) {
        toast({
          title: "Configuration Required",
          description:
            "Facebook API credentials are not configured. Please add them in the app settings.",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      // Open OAuth window instead of direct navigation
      const oauthWindow = window.open(
        result.url,
        "facebook-oauth",
        "width=600,height=700,menubar=no,toolbar=no,location=no",
      );

      if (!oauthWindow) {
        toast({
          title: "Popup Blocked",
          description:
            "Please allow popups for this site to connect with Facebook",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      // Show a toast to guide the user
      toast({
        title: "Facebook Authentication",
        description:
          "Please complete the authentication in the popup window. You'll be redirected back automatically.",
      });

      // Don't set isLoading to false here - it will be handled when the callback URL is processed
    } catch (error: any) {
      toast({
        title: "Connection failed",
        description:
          error instanceof Error
            ? error.message
            : "Failed to initiate Facebook connection",
        variant: "destructive",
      });
      setIsLoading(false);
    }
  };

  if (availablePages) {
    return (
      <FacebookPageSelector
        pages={availablePages}
        onSelect={handlePageSelection}
        onCancel={handleCancelPageSelection}
        isLoading={isLoading}
      />
    );
  }

  return (
    <Button
      onClick={connectWithFacebook}
      disabled={isLoading}
      className="bg-[#1877F2] hover:bg-[#1877F2]/90 text-white"
    >
      {isLoading ? (
        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
      ) : (
        <Facebook className="h-4 w-4 mr-2" />
      )}
      Connect with Facebook
    </Button>
  );
}

function InstagramOAuthButton() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  // Handle OAuth callback
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const code = searchParams.get("code");
    const state = searchParams.get("state");
    const error = searchParams.get("error");
    const platform = searchParams.get("platform");

    // Only process if this is an Instagram callback
    if (platform !== "instagram") {
      return;
    }

    // Clean up URL after processing
    const cleanUpUrl = () => {
      navigate("/settings", { replace: true });
    };

    if (error) {
      toast({
        title: "Connection failed",
        description: `Instagram authorization failed: ${error}`,
        variant: "destructive",
      });
      cleanUpUrl();
      return;
    }

    if (code && state) {
      const handleCallback = async () => {
        setIsLoading(true);
        try {
          const result = await apiClient.handleFacebookOAuthCallback({
            code,
            state,
            platform: "instagram",
          });

          // Invalidate accounts query to refetch
          queryClient.invalidateQueries(queryKeys.connectedAccounts());

          toast({
            title: "Account connected",
            description:
              "Your Instagram account has been connected successfully",
          });

          if (result.warning) {
            toast({
              title: "Limited functionality",
              description: result.warning,
              variant: "destructive",
            });
          }
        } catch (error: any) {
          toast({
            title: "Connection failed",
            description:
              error instanceof Error
                ? error.message
                : "Failed to connect account",
            variant: "destructive",
          });
        } finally {
          setIsLoading(false);
          cleanUpUrl();
        }
      };

      handleCallback();
    }
  }, [location, navigate, queryClient, toast]);

  // Initiate OAuth flow
  const connectWithInstagram = async () => {
    setIsLoading(true);
    try {
      const result = await apiClient.getFacebookOAuthUrl({
        platform: "instagram",
      });

      if ("missingCredentials" in result) {
        toast({
          title: "Configuration Required",
          description: "Facebook/Instagram API credentials are not configured.",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      const oauthWindow = window.open(
        result.url,
        "instagram-oauth",
        "width=600,height=700,menubar=no,toolbar=no,location=no",
      );

      if (!oauthWindow) {
        toast({
          title: "Popup Blocked",
          description:
            "Please allow popups for this site to connect with Instagram.",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      toast({
        title: "Instagram Authentication",
        description: "Please complete the authentication in the popup window.",
      });
    } catch (error: any) {
      toast({
        title: "Connection failed",
        description:
          error instanceof Error
            ? error.message
            : "Failed to initiate Instagram connection",
        variant: "destructive",
      });
      setIsLoading(false);
    }
  };

  return (
    <Button
      onClick={connectWithInstagram}
      disabled={isLoading}
      className="bg-gradient-to-r from-[#833ab4] via-[#fd1d1d] to-[#fcb045] hover:opacity-90 text-white"
    >
      {isLoading ? (
        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
      ) : (
        <Instagram className="h-4 w-4 mr-2" />
      )}
      Connect with Instagram
    </Button>
  );
}

function LinkedInOAuthButton() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  // Handle OAuth callback
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const code = searchParams.get("code");
    const state = searchParams.get("state");
    const error = searchParams.get("error");
    const platform = searchParams.get("platform");

    // Only process if this is a LinkedIn callback
    if (platform !== "linkedin") {
      return;
    }

    // Clean up URL after processing
    const cleanUpUrl = () => {
      navigate("/settings", { replace: true });
    };

    if (error) {
      toast({
        title: "Connection failed",
        description: `LinkedIn authorization failed: ${error}`,
        variant: "destructive",
      });
      cleanUpUrl();
      return;
    }

    if (code && state) {
      const handleCallback = async () => {
        setIsLoading(true);
        try {
          await apiClient.handleLinkedInOAuthCallback({
            code,
            state,
          });
          queryClient.invalidateQueries(queryKeys.connectedAccounts());

          toast({
            title: "Account connected",
            description:
              "Your LinkedIn account has been connected successfully",
          });
        } catch (callbackError: any) {
          toast({
            title: "Connection failed",
            description:
              callbackError instanceof Error
                ? callbackError.message
                : "Failed to connect account",
            variant: "destructive",
          });
        } finally {
          setIsLoading(false);
          cleanUpUrl();
        }
      };

      handleCallback();
    }
  }, [location, navigate, queryClient, toast]);

  // Initiate OAuth flow
  const connectWithLinkedIn = async () => {
    setIsLoading(true);
    try {
      const result = await apiClient.getLinkedInOAuthUrl();

      // Check if we got a missingCredentials response
      if ("missingCredentials" in result) {
        toast({
          title: "Configuration Required",
          description:
            "LinkedIn API credentials are not configured. Please add them in the app settings.",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      // Open OAuth window instead of direct navigation
      const oauthWindow = window.open(
        result.url,
        "linkedin-oauth",
        "width=600,height=700,menubar=no,toolbar=no,location=no",
      );

      if (!oauthWindow) {
        toast({
          title: "Popup Blocked",
          description:
            "Please allow popups for this site to connect with LinkedIn",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      // Show a toast to guide the user
      toast({
        title: "LinkedIn Authentication",
        description:
          "Please complete the authentication in the popup window. You'll be redirected back automatically.",
      });

      // Don't set isLoading to false here - it will be handled when the callback URL is processed
    } catch (error: any) {
      toast({
        title: "Connection failed",
        description:
          error instanceof Error
            ? error.message
            : "Failed to initiate LinkedIn connection",
        variant: "destructive",
      });
      setIsLoading(false);
    }
  };

  return (
    <Button
      onClick={connectWithLinkedIn}
      disabled={isLoading}
      className="bg-[#0A66C2] hover:bg-[#0A66C2]/90 text-white"
    >
      {isLoading ? (
        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
      ) : (
        <Linkedin className="h-4 w-4 mr-2" />
      )}
      Connect with LinkedIn
    </Button>
  );
}

function FacebookPageSelector({
  pages,
  onSelect,
  onCancel,
  isLoading = false,
}: {
  pages: Array<{ id: string; name: string }>;
  onSelect: (selectedIds: string[]) => void;
  onCancel: () => void;
  isLoading?: boolean;
}) {
  const [selectedPages, setSelectedPages] = useState<string[]>([]);

  // Pre-select all pages by default
  useEffect(() => {
    if (pages && pages.length > 0) {
      setSelectedPages(pages.map((page) => page.id));
    }
  }, [pages]);

  const togglePage = (pageId: string) => {
    setSelectedPages((prev) =>
      prev.includes(pageId)
        ? prev.filter((id) => id !== pageId)
        : [...prev, pageId],
    );
  };

  return (
    <Card className="overflow-hidden">
      <CardHeader className="border-b bg-secondary/20">
        <CardTitle>Select Facebook Pages</CardTitle>
        <CardDescription>
          Choose which Facebook Pages you want to connect
        </CardDescription>
      </CardHeader>
      <CardContent className="p-6">
        <div className="space-y-4">
          <p className="text-sm text-muted-foreground break-words">
            Your Facebook User token gives access to the following Pages. Select
            which ones you want to manage in SocialWave (all are selected by
            default):
          </p>

          <div className="space-y-2 max-h-60 overflow-y-auto border rounded-md p-2">
            {pages.map((page) => (
              <div
                key={page.id}
                className="flex items-center p-2 hover:bg-secondary/20 rounded-md cursor-pointer"
                onClick={() => togglePage(page.id)}
              >
                <div className="flex items-center gap-2 flex-1">
                  <input
                    type="checkbox"
                    id={`page-${page.id}`}
                    checked={selectedPages.includes(page.id)}
                    onChange={() => togglePage(page.id)}
                    className="h-4 w-4"
                  />
                  <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                    <Facebook className="h-4 w-4 platform-facebook" />
                  </div>
                  <label
                    htmlFor={`page-${page.id}`}
                    className="ml-2 text-sm font-medium cursor-pointer flex-1"
                  >
                    {page.name}
                  </label>
                </div>
              </div>
            ))}
          </div>

          <div className="flex justify-end gap-2 mt-4">
            <Button variant="outline" onClick={onCancel} disabled={isLoading}>
              Cancel
            </Button>
            <Button
              onClick={() => onSelect(selectedPages)}
              disabled={selectedPages.length === 0 || isLoading}
              className="bg-primary hover:bg-primary/90"
            >
              {isLoading ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Connecting...
                </>
              ) : (
                <>Connect Selected Pages ({selectedPages.length})</>
              )}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

function SignalCard({
  title,
  children,
}: {
  title: string;
  children: React.ReactNode;
}) {
  const [isPressed, setIsPressed] = useState(false);

  return (
    <Card
      className={`bg-secondary/20 border-secondary/50 h-full transition-all duration-200 hover:shadow-md hover:shadow-primary/5 active:scale-[0.98] md:active:scale-100 ${
        isPressed ? "scale-[0.98]" : ""
      }`}
      onTouchStart={() => setIsPressed(true)}
      onTouchEnd={() => setIsPressed(false)}
      onTouchCancel={() => setIsPressed(false)}
    >
      <CardHeader className="pb-3 md:pb-2">
        <CardTitle className="text-sm md:text-base">{title}</CardTitle>
      </CardHeader>
      <CardContent className="text-sm md:text-base">{children}</CardContent>
    </Card>
  );
}

function BrandPersonaDashboard() {
  const { brandContext, hasAnalysis, isAnalyzing, analysisFailed } =
    useBrandContext();
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const analyzeBrandContextMutation = useMutation(
    apiClient.analyzeBrandContext,
    {
      onSuccess: () => {
        queryClient.invalidateQueries(["brandContext"]);
        toast({
          title: "Brand analysis started",
          description:
            "Your Brand Vibe is being analyzed. This may take a few minutes.",
        });
      },
      onError: (error: any) => {
        toast({
          title: "Analysis failed",
          description:
            error instanceof Error
              ? error.message
              : "Failed to start brand analysis",
          variant: "destructive",
        });
      },
    },
  );

  const [editOpen, setEditOpen] = React.useState(false);
  const updateBrandContextMutation = useMutation(apiClient.updateBrandContext, {
    onSuccess: () => {
      queryClient.invalidateQueries(["brandContext"]);
      setEditOpen(false);
      toast({ title: "Brand Vibe updated" });
    },
    onError: (error: any) => {
      toast({
        title: "Update failed",
        description:
          error instanceof Error ? error.message : "Could not save changes",
        variant: "destructive",
      });
    },
  });
  const [form, setForm] = React.useState<any | null>(null);

  if (!hasAnalysis && !isAnalyzing) {
    return (
      <div className="max-w-6xl mx-auto">
        <Card className="overflow-hidden">
          <CardHeader className="border-b bg-secondary/20">
            <CardTitle className="flex items-center gap-2">
              <UserCheck className="h-5 w-5" />
              Brand Vibe! Analysis
            </CardTitle>
            <CardDescription>
              Get comprehensive insights about your brand's industry
              positioning, target audience, competitive landscape, and content
              strategy
            </CardDescription>
          </CardHeader>
          <CardContent className="p-8">
            <div className="text-center space-y-6">
              <div className="w-16 h-16 mx-auto bg-primary/10 rounded-full flex items-center justify-center">
                <Brain className="h-8 w-8 text-primary" />
              </div>
              <div className="space-y-3">
                <h3 className="text-xl font-semibold">
                  Discover Your Brand Vibe!
                </h3>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  Our AI will analyze your website, social media presence, and
                  content to create a comprehensive brand vibe including:
                </p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6 text-left">
                  <div className="flex items-start gap-3 p-4 bg-secondary/20 rounded-lg">
                    <Target className="h-5 w-5 text-primary mt-0.5" />
                    <div>
                      <div className="font-medium">
                        Industry & Market Analysis
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Market positioning, business model, and competitive
                        landscape
                      </div>
                    </div>
                  </div>
                  <div className="flex items-start gap-3 p-4 bg-secondary/20 rounded-lg">
                    <Users className="h-5 w-5 text-primary mt-0.5" />
                    <div>
                      <div className="font-medium">
                        Target Audience Insights
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Demographics, psychographics, pain points, and behaviors
                      </div>
                    </div>
                  </div>
                  <div className="flex items-start gap-3 p-4 bg-secondary/20 rounded-lg">
                    <Palette className="h-5 w-5 text-primary mt-0.5" />
                    <div>
                      <div className="font-medium">Brand Personality</div>
                      <div className="text-sm text-muted-foreground">
                        Voice, tone, archetype, and emotional appeal
                      </div>
                    </div>
                  </div>
                  <div className="flex items-start gap-3 p-4 bg-secondary/20 rounded-lg">
                    <TrendingUp className="h-5 w-5 text-primary mt-0.5" />
                    <div>
                      <div className="font-medium">Content Strategy</div>
                      <div className="text-sm text-muted-foreground">
                        Optimal themes, platforms, and engagement tactics
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              {analysisFailed && (
                <Alert variant="destructive" className="text-left">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Analysis Failed</AlertTitle>
                  <AlertDescription>
                    The previous brand analysis failed. Please try again or
                    ensure your brand website and social accounts are properly
                    configured.
                  </AlertDescription>
                </Alert>
              )}
              <Button
                onClick={() => analyzeBrandContextMutation.mutate()}
                disabled={analyzeBrandContextMutation.isLoading}
                size="lg"
                className="mt-6"
              >
                {analyzeBrandContextMutation.isLoading ? (
                  <>
                    <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                    Starting Analysis...
                  </>
                ) : (
                  <>
                    <Sparkles className="h-5 w-5 mr-2" />
                    Analyze My Brand Vibe
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (isAnalyzing) {
    return (
      <div className="max-w-6xl mx-auto">
        <Card className="overflow-hidden">
          <CardHeader className="border-b bg-secondary/20">
            <CardTitle className="flex items-center gap-2">
              <Loader2 className="h-5 w-5 animate-spin" />
              Analyzing Your Brand Vibe
            </CardTitle>
            <CardDescription>
              Our AI is analyzing your brand across multiple dimensions. This
              comprehensive analysis takes 2-3 minutes.
            </CardDescription>
          </CardHeader>
          <CardContent className="p-8">
            <div className="space-y-6">
              <div className="flex items-center justify-center">
                <div className="relative">
                  <div className="w-24 h-24 border-4 border-primary/20 border-t-primary rounded-full animate-spin"></div>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <Brain className="h-8 w-8 text-primary" />
                  </div>
                </div>
              </div>
              <div className="text-center space-y-2">
                <h3 className="text-lg font-semibold">
                  Deep Brand Analysis in Progress
                </h3>
                <p className="text-muted-foreground">
                  Analyzing website content, social media presence, audience
                  engagement patterns, and competitive landscape...
                </p>
              </div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center p-4 bg-secondary/20 rounded-lg">
                  <CheckCircle className="h-6 w-6 text-green-500 mx-auto mb-2" />
                  <div className="text-sm font-medium">Website Analysis</div>
                  <div className="text-xs text-muted-foreground">Complete</div>
                </div>
                <div className="text-center p-4 bg-secondary/20 rounded-lg">
                  <Loader2 className="h-6 w-6 text-primary mx-auto mb-2 animate-spin" />
                  <div className="text-sm font-medium">Social Analysis</div>
                  <div className="text-xs text-muted-foreground">
                    Processing...
                  </div>
                </div>
                <div className="text-center p-4 bg-secondary/20 rounded-lg">
                  <Clock className="h-6 w-6 text-muted-foreground mx-auto mb-2" />
                  <div className="text-sm font-medium">Competitor Research</div>
                  <div className="text-xs text-muted-foreground">Pending</div>
                </div>
                <div className="text-center p-4 bg-secondary/20 rounded-lg">
                  <Clock className="h-6 w-6 text-muted-foreground mx-auto mb-2" />
                  <div className="text-sm font-medium">Strategy Synthesis</div>
                  <div className="text-xs text-muted-foreground">Pending</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!brandContext) {
    return (
      <div className="max-w-6xl mx-auto">
        <EmptyState
          title="No Brand Vibe"
          description="Your Brand Vibe will be generated after analysis is complete."
        />
      </div>
    );
  }

  // Data is already parsed by the backend, no need to parse again
  const targetAudience = brandContext.targetAudience;
  const brandPersonality = brandContext.brandPersonality;
  const competitorAnalysis = brandContext.competitorAnalysis;
  const contentStrategy = brandContext.contentOpportunities;
  const industryContext = brandContext.industryContext;

  const hasContentStrategy = !!(
    contentStrategy &&
    (contentStrategy.expertiseAreas?.length ?? 0) +
      (contentStrategy.contentPillars?.length ?? 0) +
      (contentStrategy.valuePropositions?.length ?? 0) +
      (contentStrategy.engagementDrivers?.length ?? 0) >
      0
  );

  const openEdit = () => {
    setForm({
      industry: brandContext.industry ?? "",
      niche: brandContext.niche ?? "",
      riskTolerance: brandContext.riskTolerance ?? "medium",
      trendAdoptionSpeed: brandContext.trendAdoptionSpeed ?? "moderate",
      targetDemographics: targetAudience?.demographics ?? "",
      targetPsychographics: targetAudience?.psychographics ?? "",
      targetPlatformsText: (targetAudience?.preferredPlatforms ?? []).join(
        "\n",
      ),
      targetPainPointsText: (targetAudience?.painPoints ?? []).join("\n"),
      targetInterestsText: (targetAudience?.interests ?? []).join("\n"),
      targetBehaviorsText: (targetAudience?.behaviorPatterns ?? []).join("\n"),
      brandArchetype: brandPersonality?.brandArchetype ?? "",
      brandVoiceTone: brandPersonality?.voiceTone ?? "",
      brandCommunicationStyle: brandPersonality?.communicationStyle ?? "",
      brandTraitsText: (brandPersonality?.traits ?? []).join("\n"),
      brandEmotionalAppeal: brandPersonality?.emotionalAppeal ?? "",
      directCompetitorsText: (competitorAnalysis?.directCompetitors ?? []).join(
        "\n",
      ),
      indirectCompetitorsText: (
        competitorAnalysis?.indirectCompetitors ?? []
      ).join("\n"),
      differentiatorsText: (competitorAnalysis?.differentiators ?? []).join(
        "\n",
      ),
      marketGapsText: (competitorAnalysis?.marketGaps ?? []).join("\n"),
    });
    setEditOpen(true);
  };

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold gradient-text">Brand Vibe!</h2>
          <p className="text-muted-foreground mt-1">
            Comprehensive analysis of your brand's identity, audience, and
            market position
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="secondary" className="bg-green-100 text-green-800">
            <CheckCircle className="h-3 w-3 mr-1" />
            Analysis Complete
          </Badge>
          <Button
            variant="outline"
            size="sm"
            onClick={() => analyzeBrandContextMutation.mutate()}
            disabled={analyzeBrandContextMutation.isLoading}
          >
            {analyzeBrandContextMutation.isLoading ? (
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <RefreshCw className="h-4 w-4 mr-2" />
            )}
            Refresh Analysis
          </Button>
          <Button size="sm" onClick={openEdit}>
            Edit
          </Button>
        </div>{" "}
      </div>

      <Dialog open={editOpen} onOpenChange={setEditOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Edit Brand Vibe!</DialogTitle>
            <DialogDescription>
              Update each section below. Lists accept one item per line for
              quick edits.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            {!form ? (
              <div className="text-sm text-muted-foreground">Loading...</div>
            ) : (
              <>
                <Accordion type="single" collapsible className="w-full">
                  <AccordionItem value="industry">
                    <AccordionTrigger>Industry & Market</AccordionTrigger>
                    <AccordionContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <Label className="text-xs">Industry</Label>
                          <Input
                            value={form.industry}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                industry: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">Niche</Label>
                          <Input
                            value={form.niche}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                niche: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">Risk Tolerance</Label>
                          <RadioGroup
                            value={form.riskTolerance}
                            onValueChange={(v) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                riskTolerance: v,
                              }))
                            }
                            className="flex gap-4 mt-1"
                          >
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="low" id="risk-low" />
                              <Label htmlFor="risk-low">Low</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="medium" id="risk-med" />
                              <Label htmlFor="risk-med">Medium</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="high" id="risk-high" />
                              <Label htmlFor="risk-high">High</Label>
                            </div>
                          </RadioGroup>
                        </div>
                        <div>
                          <Label className="text-xs">
                            Trend Adoption Speed
                          </Label>
                          <RadioGroup
                            value={form.trendAdoptionSpeed}
                            onValueChange={(v) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                trendAdoptionSpeed: v,
                              }))
                            }
                            className="flex gap-4 mt-1"
                          >
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem
                                value="early-adopter"
                                id="trend-early"
                              />
                              <Label htmlFor="trend-early">Early</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem
                                value="moderate"
                                id="trend-moderate"
                              />
                              <Label htmlFor="trend-moderate">Moderate</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem
                                value="late-adopter"
                                id="trend-late"
                              />
                              <Label htmlFor="trend-late">Late</Label>
                            </div>
                          </RadioGroup>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>

                  <AccordionItem value="audience">
                    <AccordionTrigger>Target Audience</AccordionTrigger>
                    <AccordionContent>
                      <div className="space-y-3">
                        <div>
                          <Label className="text-xs">Demographics</Label>
                          <Textarea
                            value={form.targetDemographics}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                targetDemographics: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">Psychographics</Label>
                          <Textarea
                            value={form.targetPsychographics}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                targetPsychographics: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <Label className="text-xs">
                              Preferred Platforms (one per line)
                            </Label>
                            <Textarea
                              value={form.targetPlatformsText}
                              onChange={(e) =>
                                setForm((f: any) => ({
                                  ...(f || {}),
                                  targetPlatformsText: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div>
                            <Label className="text-xs">
                              Pain Points (one per line)
                            </Label>
                            <Textarea
                              value={form.targetPainPointsText}
                              onChange={(e) =>
                                setForm((f: any) => ({
                                  ...(f || {}),
                                  targetPainPointsText: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div>
                            <Label className="text-xs">
                              Key Interests (one per line)
                            </Label>
                            <Textarea
                              value={form.targetInterestsText}
                              onChange={(e) =>
                                setForm((f: any) => ({
                                  ...(f || {}),
                                  targetInterestsText: e.target.value,
                                }))
                              }
                            />
                          </div>
                          <div>
                            <Label className="text-xs">
                              Behavior Patterns (one per line)
                            </Label>
                            <Textarea
                              value={form.targetBehaviorsText}
                              onChange={(e) =>
                                setForm((f: any) => ({
                                  ...(f || {}),
                                  targetBehaviorsText: e.target.value,
                                }))
                              }
                            />
                          </div>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>

                  <AccordionItem value="personality">
                    <AccordionTrigger>
                      Brand Personality & Voice
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <Label className="text-xs">Brand Archetype</Label>
                          <Input
                            value={form.brandArchetype}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                brandArchetype: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">Voice & Tone</Label>
                          <Input
                            value={form.brandVoiceTone}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                brandVoiceTone: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div className="md:col-span-2">
                          <Label className="text-xs">Communication Style</Label>
                          <Textarea
                            value={form.brandCommunicationStyle}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                brandCommunicationStyle: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">
                            Personality Traits (one per line)
                          </Label>
                          <Textarea
                            value={form.brandTraitsText}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                brandTraitsText: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">Emotional Appeal</Label>
                          <Input
                            value={form.brandEmotionalAppeal}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                brandEmotionalAppeal: e.target.value,
                              }))
                            }
                          />
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>

                  <AccordionItem value="competition">
                    <AccordionTrigger>Competitive Landscape</AccordionTrigger>
                    <AccordionContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <Label className="text-xs">
                            Direct Competitors (one per line)
                          </Label>
                          <Textarea
                            value={form.directCompetitorsText}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                directCompetitorsText: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">
                            Indirect Competitors (one per line)
                          </Label>
                          <Textarea
                            value={form.indirectCompetitorsText}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                indirectCompetitorsText: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">
                            Key Differentiators (one per line)
                          </Label>
                          <Textarea
                            value={form.differentiatorsText}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                differentiatorsText: e.target.value,
                              }))
                            }
                          />
                        </div>
                        <div>
                          <Label className="text-xs">
                            Market Opportunities (one per line)
                          </Label>
                          <Textarea
                            value={form.marketGapsText}
                            onChange={(e) =>
                              setForm((f: any) => ({
                                ...(f || {}),
                                marketGapsText: e.target.value,
                              }))
                            }
                          />
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>

                <div className="flex justify-end gap-2">
                  <Button variant="outline" onClick={() => setEditOpen(false)}>
                    Cancel
                  </Button>
                  <Button
                    onClick={() => {
                      const safeSplit = (t: string) =>
                        (t || "")
                          .split("\n")
                          .map((s) => s.trim())
                          .filter(Boolean);
                      const payload: any = {
                        industry: form.industry,
                        niche: form.niche,
                        riskTolerance: form.riskTolerance,
                        trendAdoptionSpeed: form.trendAdoptionSpeed,
                        targetAudience: {
                          demographics: form.targetDemographics,
                          psychographics: form.targetPsychographics,
                          preferredPlatforms: safeSplit(
                            form.targetPlatformsText,
                          ),
                          painPoints: safeSplit(form.targetPainPointsText),
                          interests: safeSplit(form.targetInterestsText),
                          behaviorPatterns: safeSplit(form.targetBehaviorsText),
                        },
                        brandPersonality: {
                          brandArchetype: form.brandArchetype,
                          voiceTone: form.brandVoiceTone,
                          communicationStyle: form.brandCommunicationStyle,
                          traits: safeSplit(form.brandTraitsText),
                          emotionalAppeal: form.brandEmotionalAppeal,
                        },
                        competitorAnalysis: {
                          directCompetitors: safeSplit(
                            form.directCompetitorsText,
                          ),
                          indirectCompetitors: safeSplit(
                            form.indirectCompetitorsText,
                          ),
                          differentiators: safeSplit(form.differentiatorsText),
                          marketGaps: safeSplit(form.marketGapsText),
                        },
                      };
                      updateBrandContextMutation.mutate(payload);
                    }}
                  >
                    Save changes
                  </Button>
                </div>
              </>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Industry & Market Position */}
      <Card className="overflow-hidden">
        <CardHeader className="border-b bg-secondary/20">
          <CardTitle className="flex items-center gap-2">
            <Building2 className="h-5 w-5" />
            Industry & Market Position
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <h4 className="font-semibold mb-2">Industry Classification</h4>
                <div className="flex flex-wrap gap-2">
                  <Badge variant="outline">{brandContext.industry}</Badge>
                  {brandContext.niche && (
                    <Badge variant="secondary">{brandContext.niche}</Badge>
                  )}
                </div>
              </div>
              {industryContext?.businessModel && (
                <div>
                  <h4 className="font-semibold mb-2">Business Model</h4>
                  <p className="text-sm text-muted-foreground">
                    {industryContext.businessModel}
                  </p>
                </div>
              )}
            </div>
            <div className="space-y-4">
              <div>
                <h4 className="font-semibold mb-2">Risk Profile</h4>
                <div className="flex items-center gap-2">
                  <Badge
                    variant={
                      brandContext.riskTolerance === "high"
                        ? "destructive"
                        : brandContext.riskTolerance === "medium"
                          ? "default"
                          : "secondary"
                    }
                  >
                    {brandContext.riskTolerance?.toUpperCase()} RISK
                  </Badge>
                  <Badge variant="outline">
                    {brandContext.trendAdoptionSpeed
                      ?.replace("-", " ")
                      .toUpperCase()}{" "}
                    ADOPTER
                  </Badge>
                </div>
              </div>
              {industryContext?.seasonality && (
                <div>
                  <h4 className="font-semibold mb-2">Seasonality</h4>
                  <p className="text-sm text-muted-foreground">
                    {industryContext.seasonality}
                  </p>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Target Audience */}
      {targetAudience && (
        <Card className="overflow-hidden">
          <CardHeader className="border-b bg-secondary/20">
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              Target Audience Profile
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <h4 className="font-semibold mb-2">Demographics</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    {targetAudience.demographics}
                  </p>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">Psychographics</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    {targetAudience.psychographics}
                  </p>
                </div>
                {targetAudience.preferredPlatforms?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Preferred Platforms</h4>
                    <div className="flex flex-wrap gap-2">
                      {targetAudience.preferredPlatforms.map(
                        (platform: string, index: number) => (
                          <Badge key={index} variant="outline">
                            {platform}
                          </Badge>
                        ),
                      )}
                    </div>
                  </div>
                )}
              </div>
              <div className="space-y-4">
                {targetAudience.painPoints?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Pain Points</h4>
                    <ul className="space-y-1">
                      {targetAudience.painPoints.map(
                        (point: string, index: number) => (
                          <li
                            key={index}
                            className="text-sm text-muted-foreground flex items-start gap-2"
                          >
                            <AlertCircle className="h-3 w-3 mt-1 text-red-500 flex-shrink-0" />
                            {point}
                          </li>
                        ),
                      )}
                    </ul>
                  </div>
                )}
                {targetAudience.interests?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Key Interests</h4>
                    <div className="flex flex-wrap gap-2">
                      {targetAudience.interests.map(
                        (interest: string, index: number) => (
                          <Badge key={index} variant="secondary">
                            {interest}
                          </Badge>
                        ),
                      )}
                    </div>
                  </div>
                )}
                {targetAudience.behaviorPatterns?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Behavior Patterns</h4>
                    <ul className="space-y-1">
                      {targetAudience.behaviorPatterns.map(
                        (pattern: string, index: number) => (
                          <li
                            key={index}
                            className="text-sm text-muted-foreground flex items-start gap-2"
                          >
                            <TrendingUp className="h-3 w-3 mt-1 text-blue-500 flex-shrink-0" />
                            {pattern}
                          </li>
                        ),
                      )}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Brand Personality */}
      {brandPersonality && (
        <Card className="overflow-hidden">
          <CardHeader className="border-b bg-secondary/20">
            <CardTitle className="flex items-center gap-2">
              <Palette className="h-5 w-5" />
              Brand Personality & Voice
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <h4 className="font-semibold mb-2">Brand Archetype</h4>
                  <Badge
                    variant="default"
                    className="bg-purple-100 text-purple-800"
                  >
                    {brandPersonality.brandArchetype}
                  </Badge>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">Voice & Tone</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    {brandPersonality.voiceTone}
                  </p>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">Communication Style</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    {brandPersonality.communicationStyle}
                  </p>
                </div>
              </div>
              <div className="space-y-4">
                {brandPersonality.traits?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Personality Traits</h4>
                    <div className="flex flex-wrap gap-2">
                      {brandPersonality.traits.map(
                        (trait: string, index: number) => (
                          <Badge key={index} variant="outline">
                            {trait}
                          </Badge>
                        ),
                      )}
                    </div>
                  </div>
                )}
                <div>
                  <h4 className="font-semibold mb-2">Emotional Appeal</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    {brandPersonality.emotionalAppeal}
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Competitive Analysis */}
      {competitorAnalysis && (
        <Card className="overflow-hidden">
          <CardHeader className="border-b bg-secondary/20">
            <CardTitle className="flex items-center gap-2">
              <Zap className="h-5 w-5" />
              Competitive Landscape
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                {competitorAnalysis.directCompetitors?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Direct Competitors</h4>
                    <div className="flex flex-wrap gap-2">
                      {competitorAnalysis.directCompetitors.map(
                        (competitor: string, index: number) => (
                          <Badge key={index} variant="destructive">
                            {competitor}
                          </Badge>
                        ),
                      )}
                    </div>
                  </div>
                )}
                {competitorAnalysis.indirectCompetitors?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Indirect Competitors</h4>
                    <div className="flex flex-wrap gap-2">
                      {competitorAnalysis.indirectCompetitors.map(
                        (competitor: string, index: number) => (
                          <Badge key={index} variant="secondary">
                            {competitor}
                          </Badge>
                        ),
                      )}
                    </div>
                  </div>
                )}
              </div>
              <div className="space-y-4">
                {competitorAnalysis.differentiators?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Key Differentiators</h4>
                    <ul className="space-y-1">
                      {competitorAnalysis.differentiators.map(
                        (diff: string, index: number) => (
                          <li
                            key={index}
                            className="text-sm text-muted-foreground flex items-start gap-2"
                          >
                            <Star className="h-3 w-3 mt-1 text-yellow-500 flex-shrink-0" />
                            {diff}
                          </li>
                        ),
                      )}
                    </ul>
                  </div>
                )}
                {competitorAnalysis.marketGaps?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Market Opportunities</h4>
                    <ul className="space-y-1">
                      {competitorAnalysis.marketGaps.map(
                        (gap: string, index: number) => (
                          <li
                            key={index}
                            className="text-sm text-muted-foreground flex items-start gap-2"
                          >
                            <Target className="h-3 w-3 mt-1 text-green-500 flex-shrink-0" />
                            {gap}
                          </li>
                        ),
                      )}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Content Strategy */}
      {hasContentStrategy && (
        <Card className="overflow-hidden">
          <CardHeader className="border-b bg-secondary/20">
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Content Strategy Recommendations
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                {contentStrategy.expertiseAreas?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Expertise Areas</h4>
                    <div className="flex flex-wrap gap-2">
                      {contentStrategy.expertiseAreas.map(
                        (area: string, index: number) => (
                          <Badge key={index} variant="default">
                            {area}
                          </Badge>
                        ),
                      )}
                    </div>
                  </div>
                )}
                {contentStrategy.contentPillars?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2 text-sm md:text-base">
                      Content Pillars
                    </h4>{" "}
                    <div className="flex flex-wrap gap-2">
                      {contentStrategy.contentPillars.map(
                        (pillar: string, index: number) => (
                          <Badge key={index} variant="secondary">
                            {pillar}
                          </Badge>
                        ),
                      )}
                    </div>
                  </div>
                )}
              </div>
              <div className="space-y-4">
                {contentStrategy.valuePropositions?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Value Propositions</h4>
                    <ul className="space-y-1">
                      {contentStrategy.valuePropositions.map(
                        (prop: string, index: number) => (
                          <li
                            key={index}
                            className="text-sm text-muted-foreground flex items-start gap-2"
                          >
                            <CheckCircle className="h-3 w-3 mt-1 text-green-500 flex-shrink-0" />
                            {prop}
                          </li>
                        ),
                      )}
                    </ul>
                  </div>
                )}
                {contentStrategy.engagementDrivers?.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">Engagement Drivers</h4>
                    <ul className="space-y-1">
                      {contentStrategy.engagementDrivers.map(
                        (driver: string, index: number) => (
                          <li
                            key={index}
                            className="text-sm text-muted-foreground flex items-start gap-2"
                          >
                            <Heart className="h-3 w-3 mt-1 text-red-500 flex-shrink-0" />
                            {driver}
                          </li>
                        ),
                      )}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Platform Strategy */}
      {industryContext?.platformStrategy &&
        Object.keys(industryContext.platformStrategy).length > 0 && (
          <Card className="overflow-hidden">
            <CardHeader className="border-b bg-secondary/20">
              <CardTitle className="flex items-center gap-2">
                <Globe className="h-5 w-5" />
                Platform-Specific Strategy
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {Object.entries(industryContext.platformStrategy).map(
                  ([platform, strategy]: [string, any]) => (
                    <Card key={platform} className="p-4">
                      <div className="flex items-center gap-2 mb-3">
                        <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                          {getPlatformIcon(platform)}
                        </div>
                        <h4 className="font-semibold capitalize">{platform}</h4>
                      </div>
                      <div className="space-y-2 text-sm">
                        <div>
                          <span className="font-medium">Audience:</span>
                          <p className="text-muted-foreground">
                            {strategy.audienceType}
                          </p>
                        </div>
                        <div>
                          <span className="font-medium">Content Style:</span>
                          <p className="text-muted-foreground">
                            {strategy.contentStyle}
                          </p>
                        </div>
                        <div>
                          <span className="font-medium">
                            Posting Frequency:
                          </span>
                          <p className="text-muted-foreground">
                            {strategy.postingFrequency}
                          </p>
                        </div>
                        {strategy.engagementTactics?.length > 0 && (
                          <div>
                            <span className="font-medium">Key Tactics:</span>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {strategy.engagementTactics
                                .slice(0, 2)
                                .map((tactic: string, index: number) => (
                                  <Badge
                                    key={index}
                                    variant="outline"
                                    className="text-xs"
                                  >
                                    {tactic}
                                  </Badge>
                                ))}
                              {strategy.engagementTactics.length > 2 && (
                                <Badge variant="outline" className="text-xs">
                                  +{strategy.engagementTactics.length - 2}
                                </Badge>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    </Card>
                  ),
                )}
              </div>
            </CardContent>
          </Card>
        )}

      {/* Analysis Metadata */}
      <Card className="overflow-hidden">
        <CardContent className="p-4">
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4" />
              Last analyzed:{" "}
              {brandContext.lastAnalyzedAt
                ? new Date(brandContext.lastAnalyzedAt).toLocaleDateString()
                : "Unknown"}
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="text-xs">
                AI-Powered Analysis
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function BrandSignalsDashboard() {
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());
  const [isAutoRefreshing, setIsAutoRefreshing] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [, setShowSuggestions] = useState(false);

  // Removed unused upgrade dialog state
  const { data: connectedAccounts, isLoading: accountsLoading } =
    useConnectedAccounts();
  const {
    data: brandSignals,
    isLoading: signalsLoading,
    isError,
    error,
    refetch: refetchSignals,
  } = useBrandSignals();

  // Proactive brand suggestions query
  const {
    data: proactiveSuggestions,
    isLoading: suggestionsLoading,
    mutate: generateSuggestions,
  } = useMutation(apiClient.generateProactiveBrandSuggestions, {
    onSuccess: () => {
      setShowSuggestions(true);
    },
  });

  // Auto-refresh every 30 seconds when enabled
  useEffect(() => {
    if (!isAutoRefreshing) return;

    const interval = setInterval(() => {
      refetchSignals();
      setLastRefresh(new Date());
    }, 30000);

    return () => clearInterval(interval);
  }, [isAutoRefreshing, refetchSignals]);

  // Manual refresh handler
  const handleManualRefresh = async () => {
    setRefreshing(true);
    try {
      await refetchSignals();
      setLastRefresh(new Date());
    } finally {
      setRefreshing(false);
    }
  };

  // Add intelligence analytics queries
  const { isLoading: feedbackLoading } = useQuery(
    ["feedbackAnalytics", { timeRange: 30 }],
    () => apiClient.getFeedbackAnalytics({ timeRange: 30 }),
    { enabled: !!brandSignals },
  );

  const { isLoading: resonanceLoading } = useQuery(
    ["resonanceAnalytics", { timeRange: 30 }],
    () =>
      apiClient.getResonanceAnalytics({
        timeRange: 30,
        includeBreakdown: true,
      }),
    { enabled: !!brandSignals },
  );
  // Advanced analytics queries are available but not displayed in current UI
  // They can be integrated into future dashboard enhancements

  // Show loading only if accounts are still loading
  if (
    accountsLoading ||
    (brandSignals && (feedbackLoading || resonanceLoading))
  ) {
    return (
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <div className="space-y-2">
              <Skeleton className="h-6 w-32" />
              <Skeleton className="h-4 w-64" />
            </div>
            <Skeleton className="h-4 w-24" />
          </div>
        </CardHeader>
        <CardContent className="p-6">
          <div className="space-y-8">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(3)].map((_, i) => (
                <Card key={i} className="p-4">
                  <div className="space-y-3">
                    <Skeleton className="h-5 w-24" />
                    <div className="flex flex-wrap gap-2">
                      {[...Array(3)].map((_, j) => (
                        <Skeleton key={j} className="h-6 w-16 rounded-full" />
                      ))}
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  // If no accounts are connected, show a message to connect accounts first
  if (!connectedAccounts || connectedAccounts.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Brand Signals</CardTitle>
          <CardDescription>
            What our AI learns about your brand from your feedback.
          </CardDescription>
        </CardHeader>
        <CardContent className="p-6">
          <EmptyState
            icon={<Users className="h-12 w-12" />}
            title="Connect Your Social Media Accounts"
            description="To start building your brand signals, please connect your social media accounts first. Go to the Engage tab to connect your accounts."
          />
        </CardContent>
      </Card>
    );
  }

  // Show loading for brand signals only if accounts are connected
  if (signalsLoading) {
    return (
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <div className="space-y-2">
              <Skeleton className="h-6 w-32" />
              <Skeleton className="h-4 w-64" />
            </div>
            <Skeleton className="h-4 w-24" />
          </div>
        </CardHeader>
        <CardContent className="p-6">
          <div className="space-y-8">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(3)].map((_, i) => (
                <Card key={i} className="p-4">
                  <div className="space-y-3">
                    <Skeleton className="h-5 w-24" />
                    <div className="flex flex-wrap gap-2">
                      {[...Array(3)].map((_, j) => (
                        <Skeleton key={j} className="h-6 w-16 rounded-full" />
                      ))}
                    </div>
                  </div>
                </Card>
              ))}
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {[...Array(2)].map((_, i) => (
                <Card key={i} className="p-4">
                  <div className="space-y-3">
                    <Skeleton className="h-5 w-32" />
                    <div className="space-y-2">
                      <Skeleton className="h-4 w-full" />
                      <Skeleton className="h-4 w-3/4" />
                      <Skeleton className="h-4 w-1/2" />
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (isError) {
    return (
      <Card>
        <CardContent className="p-6">
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error loading Brand Signals</AlertTitle>
            <AlertDescription className="space-y-2">
              <p>
                {(error as Error)?.message ||
                  "Failed to load brand signals. Please try again later."}
              </p>
              <Button
                variant="outline"
                size="sm"
                onClick={() => window.location.reload()}
                className="mt-2"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                Try Again
              </Button>
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    );
  }

  if (!brandSignals) {
    return (
      <EmptyState
        icon={<Sparkles className="h-12 w-12" />}
        title="No Brand Signals Yet"
        description="As you provide feedback on content recommendations, your brand signals will appear here, showing what the AI has learned about your preferences."
      />
    );
  }

  const {
    preferredTones,
    commonKeywords,
    engagementPatterns,
    sentimentProfile,
    contentPillars,
    lastUpdatedAt,
  } = brandSignals;

  const hasData =
    (Array.isArray(preferredTones) && preferredTones.length > 0) ||
    (Array.isArray(commonKeywords) && commonKeywords.length > 0) ||
    (engagementPatterns && Object.keys(engagementPatterns).length > 0) ||
    (sentimentProfile && Object.keys(sentimentProfile).length > 0) ||
    (Array.isArray(contentPillars) && contentPillars.length > 0);

  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="flex items-center gap-2">
              Brand Signals
              {refreshing && <Loader2 className="h-4 w-4 animate-spin" />}
            </CardTitle>
            <CardDescription>
              What our AI has learned about your brand from your feedback.
            </CardDescription>
          </div>
          <div className="flex flex-col items-end gap-2">
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={handleManualRefresh}
                disabled={refreshing}
                className="h-8 w-8 p-0"
              >
                <RefreshCw
                  className={`h-4 w-4 ${refreshing ? "animate-spin" : ""}`}
                />
              </Button>
              <div className="flex items-center gap-2">
                <Switch
                  checked={isAutoRefreshing}
                  onCheckedChange={setIsAutoRefreshing}
                  className="scale-75"
                />
                <span className="text-xs text-muted-foreground">Auto</span>
              </div>
            </div>
            <div className="flex flex-col items-end text-xs text-muted-foreground">
              {lastUpdatedAt && (
                <span>Updated: {formatDate(lastUpdatedAt)}</span>
              )}
              {isAutoRefreshing && (
                <span className="text-green-600">• Live updates</span>
              )}
              {lastRefresh && (
                <span>
                  Refreshed:{" "}
                  {formatDistanceToNow(lastRefresh, { addSuffix: true })}
                </span>
              )}
            </div>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-6">
        {!hasData ? (
          <EmptyState
            icon={<Sparkles className="h-12 w-12" />}
            title="No Brand Signals Yet"
            description="Provide feedback on content suggestions in the Content Lab to start building your brand profile."
          />
        ) : (
          <div className="space-y-8">
            {/* Proactive Brand Suggestions Section */}
            {proactiveSuggestions && (
              <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5 text-blue-600" />
                    <h3 className="text-lg font-semibold text-blue-900">
                      AI Brand Suggestions
                    </h3>
                    <Badge
                      variant="secondary"
                      className="bg-blue-100 text-blue-700"
                    >
                      New
                    </Badge>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowSuggestions(false)}
                    className="h-8 w-8 p-0 text-blue-600 hover:bg-blue-100"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>

                {/* Overall Insights */}
                {proactiveSuggestions.overallInsights && (
                  <div className="mb-6 p-4 bg-white rounded-md border border-blue-100">
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-semibold text-gray-900">
                        Brand Health Overview
                      </h4>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="text-xs">
                          {
                            proactiveSuggestions.overallInsights
                              .brandHealthScore
                          }
                          /100 Health Score
                        </Badge>
                        <Badge variant="secondary" className="text-xs">
                          {proactiveSuggestions.overallInsights.confidenceLevel}
                          % Confidence
                        </Badge>
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <h5 className="text-sm font-medium text-green-700 mb-1">
                          Strengths
                        </h5>
                        <ul className="text-xs text-gray-600 space-y-1">
                          {proactiveSuggestions.overallInsights.keyStrengths
                            .slice(0, 2)
                            .map((strength, i) => (
                              <li key={i}>• {strength}</li>
                            ))}
                        </ul>
                      </div>
                      <div>
                        <h5 className="text-sm font-medium text-amber-700 mb-1">
                          Improvement Areas
                        </h5>
                        <ul className="text-xs text-gray-600 space-y-1">
                          {proactiveSuggestions.overallInsights.improvementAreas
                            .slice(0, 2)
                            .map((area, i) => (
                              <li key={i}>• {area}</li>
                            ))}
                        </ul>
                      </div>
                      <div>
                        <h5 className="text-sm font-medium text-blue-700 mb-1">
                          Next Month Focus
                        </h5>
                        <ul className="text-xs text-gray-600 space-y-1">
                          {proactiveSuggestions.overallInsights.nextMonthFocus
                            .slice(0, 2)
                            .map((focus, i) => (
                              <li key={i}>• {focus}</li>
                            ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                )}

                {/* Suggestion Categories */}
                <div className="space-y-4">
                  {/* Content Strategy Suggestions */}
                  {proactiveSuggestions.contentStrategySuggestions &&
                    proactiveSuggestions.contentStrategySuggestions.length >
                      0 && (
                      <div>
                        <h4 className="font-medium text-gray-900 mb-2 flex items-center gap-2">
                          <Target className="h-4 w-4 text-blue-600" />
                          Content Strategy (
                          {
                            proactiveSuggestions.contentStrategySuggestions
                              .length
                          }
                          )
                        </h4>
                        <div className="space-y-2">
                          {proactiveSuggestions.contentStrategySuggestions
                            .slice(0, 2)
                            .map((suggestion, index) => (
                              <div
                                key={index}
                                className="bg-white p-3 rounded-md border border-blue-100 shadow-sm"
                              >
                                <div className="flex items-start justify-between mb-2">
                                  <div className="flex items-center gap-2">
                                    <Badge
                                      variant={
                                        suggestion.priority === "high"
                                          ? "destructive"
                                          : suggestion.priority === "medium"
                                            ? "default"
                                            : "outline"
                                      }
                                      className="text-xs"
                                    >
                                      {suggestion.priority} priority
                                    </Badge>
                                    <span className="text-xs text-gray-500">
                                      {suggestion.timeframe}
                                    </span>
                                  </div>
                                </div>
                                <h5 className="font-medium text-gray-900 mb-1 text-sm">
                                  {suggestion.title}
                                </h5>
                                <p className="text-xs text-gray-600 mb-2">
                                  {suggestion.description}
                                </p>
                                <div className="text-xs text-green-600 font-medium">
                                  Expected: {suggestion.expectedImpact}
                                </div>
                              </div>
                            ))}
                        </div>
                      </div>
                    )}

                  {/* Quick Wins */}
                  {proactiveSuggestions.optimizationQuickWins &&
                    proactiveSuggestions.optimizationQuickWins.length > 0 && (
                      <div>
                        <h4 className="font-medium text-gray-900 mb-2 flex items-center gap-2">
                          <Zap className="h-4 w-4 text-yellow-600" />
                          Quick Wins (
                          {proactiveSuggestions.optimizationQuickWins.length})
                        </h4>
                        <div className="space-y-2">
                          {proactiveSuggestions.optimizationQuickWins
                            .slice(0, 2)
                            .map((suggestion, index) => (
                              <div
                                key={index}
                                className="bg-white p-3 rounded-md border border-yellow-100 shadow-sm"
                              >
                                <div className="flex items-start justify-between mb-2">
                                  <div className="flex items-center gap-2">
                                    <Badge
                                      variant={
                                        suggestion.effort === "low"
                                          ? "outline"
                                          : suggestion.effort === "medium"
                                            ? "secondary"
                                            : "default"
                                      }
                                      className="text-xs"
                                    >
                                      {suggestion.effort} effort
                                    </Badge>
                                  </div>
                                </div>
                                <h5 className="font-medium text-gray-900 mb-1 text-sm">
                                  {suggestion.title}
                                </h5>
                                <p className="text-xs text-gray-600 mb-2">
                                  {suggestion.description}
                                </p>
                                <div className="text-xs text-green-600 font-medium">
                                  Impact: {suggestion.expectedImpact}
                                </div>
                              </div>
                            ))}
                        </div>
                      </div>
                    )}

                  {/* Trend Opportunities */}
                  {proactiveSuggestions.trendOpportunities &&
                    proactiveSuggestions.trendOpportunities.length > 0 && (
                      <div>
                        <h4 className="font-medium text-gray-900 mb-2 flex items-center gap-2">
                          <TrendingUp className="h-4 w-4 text-green-600" />
                          Trend Opportunities (
                          {proactiveSuggestions.trendOpportunities.length})
                        </h4>
                        <div className="space-y-2">
                          {proactiveSuggestions.trendOpportunities
                            .slice(0, 1)
                            .map((suggestion, index) => (
                              <div
                                key={index}
                                className="bg-white p-3 rounded-md border border-green-100 shadow-sm"
                              >
                                <div className="flex items-start justify-between mb-2">
                                  <div className="flex items-center gap-2">
                                    <Badge
                                      variant={
                                        suggestion.priority === "high"
                                          ? "destructive"
                                          : suggestion.priority === "medium"
                                            ? "default"
                                            : "outline"
                                      }
                                      className="text-xs"
                                    >
                                      {suggestion.priority} priority
                                    </Badge>
                                    <span className="text-xs text-gray-500">
                                      {suggestion.timeWindow}
                                    </span>
                                  </div>
                                </div>
                                <h5 className="font-medium text-gray-900 mb-1 text-sm">
                                  {suggestion.title}
                                </h5>
                                <p className="text-xs text-gray-600 mb-2">
                                  {suggestion.description}
                                </p>
                                <div className="text-xs text-green-600 font-medium">
                                  Opportunity: {suggestion.expectedImpact}
                                </div>
                              </div>
                            ))}
                        </div>
                      </div>
                    )}
                </div>
              </div>
            )}

            {/* Add Suggestions Button */}
            <div className="flex justify-center">
              <Button
                variant="outline"
                onClick={() => generateSuggestions()}
                disabled={suggestionsLoading}
                className="gap-2"
              >
                {suggestionsLoading ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  <Sparkles className="h-4 w-4" />
                )}
                {suggestionsLoading
                  ? "Analyzing your brand..."
                  : "Get AI Brand Suggestions"}
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <SignalCard title="Preferred Tones">
                {Array.isArray(preferredTones) && preferredTones.length > 0 ? (
                  <div className="flex flex-wrap gap-2">
                    {preferredTones.map((tone: string, i: number) => (
                      <Badge key={i} variant="secondary">
                        {tone}
                      </Badge>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-muted-foreground break-words">
                    No data yet.
                  </p>
                )}
              </SignalCard>
              <SignalCard title="Common Keywords">
                {Array.isArray(commonKeywords) && commonKeywords.length > 0 ? (
                  <div className="flex flex-wrap gap-2">
                    {commonKeywords.map((keyword: string, i: number) => (
                      <Badge key={i} variant="secondary">
                        {keyword}
                      </Badge>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-muted-foreground break-words">
                    No data yet.
                  </p>
                )}
              </SignalCard>
              <SignalCard title="Top Content Pillars">
                {Array.isArray(contentPillars) && contentPillars.length > 0 ? (
                  <div className="flex flex-wrap gap-2">
                    {contentPillars.map((pillar: string, i: number) => (
                      <Badge key={i} variant="secondary">
                        {pillar}
                      </Badge>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-muted-foreground break-words">
                    No data yet.
                  </p>
                )}
              </SignalCard>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <SignalCard title="Engagement Patterns">
                {engagementPatterns &&
                Object.keys(engagementPatterns).length > 0 ? (
                  <pre className="text-xs bg-muted/30 p-2 rounded-md whitespace-pre-wrap">
                    {JSON.stringify(engagementPatterns, null, 2)}
                  </pre>
                ) : (
                  <p className="text-sm text-muted-foreground break-words">
                    No data yet.
                  </p>
                )}
              </SignalCard>
              <SignalCard title="Sentiment Profile">
                {sentimentProfile &&
                Object.keys(sentimentProfile).length > 0 ? (
                  <pre className="text-xs bg-muted/30 p-2 rounded-md whitespace-pre-wrap">
                    {JSON.stringify(sentimentProfile, null, 2)}
                  </pre>
                ) : (
                  <p className="text-sm text-muted-foreground break-words">
                    No data yet.
                  </p>
                )}
              </SignalCard>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

function SubscriptionManagementTab() {
  const { toast } = useToast();

  // Fetch subscription products
  const { data: products, isLoading: productsLoading } = useQuery(
    ["subscriptionProducts"],
    () => apiClient.listProducts(),
    {
      onError: (error: any) => {
        console.error("Failed to fetch subscription products:", error);
        toast({
          title: "Failed to load subscription plans",
          description:
            error instanceof Error
              ? error.message
              : "An error occurred while loading subscription plans.",
          variant: "destructive",
        });
      },
      retry: 2,
      staleTime: 300000, // 5 minutes
    },
  );

  // Fetch user's current purchases
  const { data: userPurchases, isLoading: purchasesLoading } = useQuery(
    ["userPurchases"],
    () => apiClient.listUserPurchases(),
    {
      onError: (error: any) => {
        console.error("Failed to fetch user purchases:", error);
      },
      retry: 2,
      staleTime: 60000, // 1 minute
    },
  );

  const {
    data: userCredits,
    isLoading: creditsLoading,
    error: creditsError,
    isError: isCreditsError,
  } = useQuery(["userCredits"], () => apiClient.getUserCredits(), {
    onError: (error: any) => {
      console.error("Failed to fetch user credits:", error);
      toast({
        title: "Failed to load credits",
        description:
          error instanceof Error
            ? error.message
            : "An error occurred while loading your credit information.",
        variant: "destructive",
      });
    },
    retry: 2,
    staleTime: 30000, // 30 seconds
  });

  const { data: transactionHistory, isLoading: historyLoading } = useQuery(
    ["creditTransactionHistory"],
    () => apiClient.getCreditTransactionHistory({ limit: 20 }),
    {
      onError: (error: any) => {
        console.error("Failed to fetch transaction history:", error);
      },
      retry: 2,
      staleTime: 60000, // 1 minute
    },
  );

  // Calculate usage percentage
  const usagePercentage = React.useMemo(() => {
    try {
      if (!userCredits) {
        return 0;
      }

      const used = Number(userCredits.usedCredits) || 0;
      const total = Number(userCredits.totalCredits) || 1;

      if (isNaN(used) || isNaN(total) || total <= 0) {
        return 0;
      }

      return Math.round((used / total) * 100);
    } catch (error) {
      void error;
      console.error("Error calculating usage percentage:", error, userCredits);
      return 0;
    }
  }, [userCredits]);

  // Separate subscription and credit pack products
  const subscriptionProducts = React.useMemo(() => {
    if (!products) return [];
    return products.filter((product) => product.kind === "SUBSCRIPTION");
  }, [products]);

  const creditPackProducts = React.useMemo(() => {
    if (!products) return [];
    return products.filter((product) => product.kind === "IN_APP_PURCHASE");
  }, [products]);

  // Get current subscription
  const currentSubscription = React.useMemo(() => {
    if (!userPurchases || !subscriptionProducts) return null;
    return userPurchases.find((purchase) =>
      subscriptionProducts.some((product) => product.id === purchase.id),
    );
  }, [userPurchases, subscriptionProducts]);

  const formatDate = (dateString: string | Date) => {
    const date =
      typeof dateString === "string" ? new Date(dateString) : dateString;
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const getOperationLabel = (operation: string) => {
    switch (operation) {
      case "content_generation":
        return "Content Generation";
      case "viral_thread_creation":
        return "Viral Thread Creation";
      case "comment_analysis":
        return "Comment Analysis";
      case "image_generation":
        return "Image Generation";
      case "video_generation":
        return "Video Generation";
      case "trending_analysis":
        return "Trending Analysis";
      case "audience_insights":
        return "Audience Insights";
      default:
        return operation
          .replace("_", " ")
          .replace(/\b\w/g, (l) => l.toUpperCase());
    }
  };

  const getPlanFeatures = (planName: string) => {
    const name = planName.toLowerCase();
    if (name.includes("starter")) {
      return [
        "1,000 ACUs included monthly",
        "Basic AI content generation",
        "Trend analysis",
        "Comment responses",
        "Up to 2 social accounts",
        "Email support",
      ];
    } else if (name.includes("professional")) {
      return [
        "3,000 ACUs included monthly",
        "Advanced AI content generation",
        "Viral thread creation",
        "Video generation",
        "Advanced analytics",
        "Up to 5 social accounts",
        "Priority email support",
      ];
    } else if (name.includes("business")) {
      return [
        "8,000 ACUs included monthly",
        "All Professional features",
        "Team collaboration",
        "Advanced brand guidelines",
        "Unlimited social accounts",
        "Phone support",
        "Custom integrations",
      ];
    } else if (name.includes("enterprise")) {
      return [
        "25,000 ACUs included monthly",
        "All Business features",
        "Dedicated account manager",
        "Custom AI training",
        "API access",
        "Enterprise security",
        "Always‑On priority support",
      ];
    }
    return [];
  };

  const getACUEquivalent = (planName: string) => {
    const name = planName.toLowerCase();
    if (name.includes("starter")) {
      return "~16 hours of processing or ~100 AI generations";
    } else if (name.includes("professional")) {
      return "~50 hours of processing or ~300 AI generations";
    } else if (name.includes("business")) {
      return "~133 hours of processing or ~800 AI generations";
    } else if (name.includes("enterprise")) {
      return "~416 hours of processing or ~2,500 AI generations";
    }
    return "";
  };

  if (isCreditsError) {
    return (
      <div className="max-w-6xl mx-auto space-y-6">
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error Loading Subscription Information</AlertTitle>
          <AlertDescription className="space-y-2">
            <div>
              <p>
                Failed to load subscription data:{" "}
                {creditsError instanceof Error
                  ? creditsError.message
                  : "Unknown error"}
              </p>
            </div>
            <div className="mt-4">
              <Button
                variant="outline"
                aria-label="Copy share link"
                onClick={() => {
                  window.location.reload();
                }}
                className="mr-2"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                Retry
              </Button>
            </div>
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  if (creditsLoading || productsLoading || purchasesLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <LoadingSpinner />
        <div className="ml-3 text-muted-foreground">
          Loading subscription information...
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Current Subscription Status */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="overflow-hidden">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center gap-2">
              <Crown className="h-5 w-5 text-purple-500" />
              Current Plan
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold capitalize">
              {currentSubscription
                ? currentSubscription.name.replace(" Tier", "")
                : "No Active Plan"}
            </div>
            <p className="text-sm text-muted-foreground mt-1">
              {currentSubscription
                ? `$${(currentSubscription.price / 100).toFixed(0)}/month`
                : "Choose a plan to get started"}
            </p>
          </CardContent>
        </Card>

        <Card className="overflow-hidden">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center gap-2">
              <Zap className="h-5 w-5 text-yellow-500" />
              ACUs Included
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-primary">
              {userCredits?.totalCredits || 0}
            </div>
            <p className="text-sm text-muted-foreground mt-1">
              {currentSubscription
                ? getACUEquivalent(currentSubscription.name)
                : "Select a plan to get ACUs"}
            </p>
          </CardContent>
        </Card>

        <Card className="overflow-hidden">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center gap-2">
              <BarChart3 className="h-5 w-5 text-blue-500" />
              Usage This Month
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-blue-600">
              {userCredits?.usedCredits || 0}
            </div>
            <div className="mt-2">
              <div className="flex justify-between text-sm mb-1">
                <span>Usage</span>
                <span>{usagePercentage}%</span>
              </div>
              <Progress value={usagePercentage} className="h-2" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Subscription Plans */}
      <Card className="overflow-hidden">
        <CardHeader className="border-b bg-secondary/20">
          <CardTitle>ACU-Based Subscription Plans</CardTitle>
          <CardDescription>
            Choose a plan that fits your content creation needs. All plans
            include monthly ACU allocations with overage pricing.
          </CardDescription>
        </CardHeader>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {subscriptionProducts.map((product) => {
              const isCurrentPlan =
                currentSubscription && currentSubscription.id === product.id;
              const features = getPlanFeatures(product.name);
              const acuEquivalent = getACUEquivalent(product.name);

              return (
                <Card
                  key={product.id}
                  className={`relative overflow-hidden transition-all duration-200 ${
                    isCurrentPlan
                      ? "border-primary bg-primary/5 shadow-lg"
                      : "hover:shadow-md border-border"
                  }`}
                >
                  {isCurrentPlan && (
                    <div className="absolute top-0 right-0 bg-primary text-primary-foreground px-3 py-1 text-xs font-medium rounded-bl-lg">
                      Current Plan
                    </div>
                  )}

                  <CardHeader className="pb-4">
                    <CardTitle className="text-xl">
                      {product.name.replace(" Tier", "")}
                    </CardTitle>
                    <div className="text-3xl font-bold">
                      ${(product.price / 100).toFixed(0)}
                      <span className="text-lg font-normal text-muted-foreground">
                        /month
                      </span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {acuEquivalent}
                    </p>
                  </CardHeader>

                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      {features.map((feature, index) => (
                        <div
                          key={index}
                          className="flex items-center gap-2 text-sm"
                        >
                          <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
                          <span>{feature}</span>
                        </div>
                      ))}
                    </div>

                    <div className="pt-4">
                      {isCurrentPlan ? (
                        <Button
                          variant="outline"
                          className="w-full"
                          onClick={() => {
                            // Open subscription management
                            const managementUrl = product.purchaseLink;
                            if (managementUrl) {
                              window.open(managementUrl, "_blank");
                            }
                          }}
                        >
                          <Settings className="h-4 w-4 mr-2" />
                          Manage Subscription
                        </Button>
                      ) : (
                        <Button
                          className="w-full"
                          onClick={() => {
                            const purchaseUrl = product.purchaseLink;
                            if (purchaseUrl) {
                              window.open(purchaseUrl, "_blank");
                            }
                          }}
                        >
                          <Crown className="h-4 w-4 mr-2" />
                          {currentSubscription ? "Upgrade" : "Subscribe"}
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* ACU Credit Packs */}
      {creditPackProducts.length > 0 && (
        <Card className="overflow-hidden">
          <CardHeader className="border-b bg-secondary/20">
            <CardTitle>ACU Credit Packs</CardTitle>
            <CardDescription>
              Need extra ACUs for busy months? Purchase additional credits at
              competitive rates.
            </CardDescription>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {creditPackProducts.map((product) => {
                // Extract ACU count from product name
                const acuMatch = product.name.match(/(\d+,?\d*)/g);
                const acuCount = acuMatch
                  ? parseInt(acuMatch[0].replace(",", ""))
                  : 0;
                const pricePerACU = acuCount > 0 ? product.price / acuCount : 0;

                return (
                  <Card
                    key={product.id}
                    className="border-2 hover:border-primary/50 transition-colors"
                  >
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg">{product.name}</CardTitle>
                      <div className="text-2xl font-bold">
                        ${(product.price / 100).toFixed(0)}
                      </div>
                      <p className="text-sm text-muted-foreground">
                        ${(pricePerACU / 100).toFixed(3)} per ACU
                      </p>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-muted-foreground mb-4">
                        {product.description}
                      </p>
                      <Button
                        variant="outline"
                        className="w-full"
                        onClick={() => {
                          const purchaseUrl = product.purchaseLink;
                          if (purchaseUrl) {
                            window.open(purchaseUrl, "_blank");
                          }
                        }}
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        Purchase Credits
                      </Button>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Usage Analytics */}
      <Card className="overflow-hidden">
        <CardHeader className="border-b bg-secondary/20">
          <CardTitle>Recent ACU Usage</CardTitle>
          <CardDescription>
            {transactionHistory?.transactions?.length === 0
              ? "Your ACU usage history will appear here once you start using features"
              : `Your last ${Math.min(transactionHistory?.transactions?.length || 0, 20)} ACU transactions`}
          </CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          {historyLoading ? (
            <div className="p-6">
              <LoadingSpinner />
            </div>
          ) : transactionHistory?.transactions?.length === 0 ? (
            <div className="empty-state">
              <div className="empty-state-icon">
                <History className="h-12 w-12" />
              </div>
              <h3 className="text-lg font-medium mb-2">
                Ready to get started?
              </h3>
              <p className="text-muted-foreground max-w-sm">
                Once you start generating content, analyzing trends, or creating
                viral threads, your ACU usage will appear here. You currently
                have {userCredits?.availableCredits || 0} ACUs to use!
              </p>
            </div>
          ) : (
            <div className="divide-y max-h-96 overflow-y-auto">
              {transactionHistory?.transactions?.map((transaction) => (
                <div
                  key={transaction.id}
                  className="flex items-center justify-between p-4 hover:bg-secondary/10 transition-colors"
                >
                  <div className="flex items-center gap-3">
                    <div
                      className={`w-8 h-8 rounded-full flex items-center justify-center ${
                        transaction.type === "usage"
                          ? "bg-red-100 text-red-600"
                          : "bg-green-100 text-green-600"
                      }`}
                    >
                      {transaction.type === "usage" ? (
                        <Minus className="h-4 w-4" />
                      ) : (
                        <Plus className="h-4 w-4" />
                      )}
                    </div>
                    <div>
                      <div className="font-medium">
                        {getOperationLabel(transaction.operation)}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {formatDate(transaction.createdAt)}
                      </div>
                      {transaction.description && (
                        <div className="text-xs text-muted-foreground mt-1">
                          {transaction.description}
                        </div>
                      )}
                    </div>
                  </div>
                  <div
                    className={`font-semibold ${
                      transaction.type === "usage"
                        ? "text-red-600"
                        : "text-green-600"
                    }`}
                  >
                    {transaction.type === "usage" ? "-" : "+"}
                    {Math.abs(transaction.amount)} ACUs
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Status Alerts */}
      {userCredits &&
      userCredits.subscriptionPlan !== "superadmin" &&
      userCredits.availableCredits === 0 ? (
        <Alert className="border-red-200 bg-red-50 dark:bg-red-950/20">
          <AlertTriangle className="h-4 w-4 text-red-600" />
          <AlertTitle className="text-red-900 dark:text-red-100">
            No ACUs Remaining
          </AlertTitle>
          <AlertDescription className="text-red-800 dark:text-red-200">
            You've used all {userCredits.totalCredits} of your monthly ACUs.
            {currentSubscription
              ? " Purchase additional ACU packs or upgrade your plan to continue using AI features."
              : " Subscribe to a plan to get monthly ACU allocations."}
          </AlertDescription>
          <div className="mt-3 flex gap-2">
            {!currentSubscription && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  const plansSection =
                    document.getElementById("subscription-plans");
                  plansSection?.scrollIntoView({ behavior: "smooth" });
                }}
              >
                <Crown className="h-4 w-4 mr-2" />
                View Plans
              </Button>
            )}
            {creditPackProducts.length > 0 && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  const firstPack = creditPackProducts[0];
                  if (firstPack) {
                    window.open(firstPack.purchaseLink, "_blank");
                  }
                }}
              >
                <Plus className="h-4 w-4 mr-2" />
                Buy ACU Pack
              </Button>
            )}
          </div>
        </Alert>
      ) : userCredits &&
        userCredits.subscriptionPlan !== "superadmin" &&
        userCredits.availableCredits < 100 &&
        userCredits.availableCredits > 0 ? (
        <Alert className="border-orange-200 bg-orange-50 dark:bg-orange-950/20">
          <AlertTriangle className="h-4 w-4 text-orange-600" />
          <AlertTitle className="text-orange-900 dark:text-orange-100">
            Running Low on ACUs
          </AlertTitle>
          <AlertDescription className="text-orange-800 dark:text-orange-200">
            Only {userCredits.availableCredits} ACUs left out of{" "}
            {userCredits.totalCredits}. Consider purchasing additional ACUs or
            upgrading your plan before you run out.
          </AlertDescription>
          <div className="mt-3">
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                const plansSection =
                  document.getElementById("subscription-plans");
                plansSection?.scrollIntoView({ behavior: "smooth" });
              }}
            >
              <Crown className="h-4 w-4 mr-2" />
              View Options
            </Button>
          </div>
        </Alert>
      ) : userCredits && userCredits.subscriptionPlan === "superadmin" ? (
        <Alert className="border-purple-200 bg-purple-50 dark:bg-purple-950/20">
          <Crown className="h-4 w-4 text-purple-600" />
          <AlertTitle className="text-purple-900 dark:text-purple-100">
            Super Admin Access
          </AlertTitle>
          <AlertDescription className="text-purple-800 dark:text-purple-200">
            You have unlimited access to all features as a super admin.
          </AlertDescription>
        </Alert>
      ) : userCredits && userCredits.usedCredits === 0 ? (
        <Alert className="border-green-200 bg-green-50 dark:bg-green-950/20">
          <CheckCircle className="h-4 w-4 text-green-600" />
          <AlertTitle className="text-green-900 dark:text-green-100">
            Ready to Go!
          </AlertTitle>
          <AlertDescription className="text-green-800 dark:text-green-200">
            You have {userCredits.availableCredits} ACUs available this month.
            Start exploring features like content generation, viral threads, and
            trend analysis!
          </AlertDescription>
        </Alert>
      ) : null}
    </div>
  );
}

// Legacy component for backwards compatibility
function CreditUsageTab() {
  return <SubscriptionManagementTab />;
}

function UserManagementTab({
  users,
  refetchUsers,
}: {
  users?: any[];
  refetchUsers: () => void;
}) {
  const { toast } = useToast();
  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
  const [creditAmount, setCreditAmount] = useState<string>("");
  const [creditReason, setCreditReason] = useState<string>("");
  const [showCreditDialog, setShowCreditDialog] = useState(false);

  const setSuperAdminMutation = useMutation(
    (params: { email: string; isSuperAdmin: boolean }) =>
      apiClient.setSuperAdmin(params),
    {
      onSuccess: (data) => {
        toast({
          title: "Success",
          description: data.message,
        });
        refetchUsers();
      },
      onError: (error: any) => {
        toast({
          title: "Error",
          description:
            error instanceof Error ? error.message : "Failed to update user",
          variant: "destructive",
        });
      },
    },
  );

  const updateCreditsMutation = useMutation(
    (params: { userId: string; creditsToAdd: number; reason?: string }) =>
      apiClient.updateUserCredits(params),
    {
      onSuccess: (data) => {
        toast({
          title: "Success",
          description: data.message,
        });
        setShowCreditDialog(false);
        setCreditAmount("");
        setCreditReason("");
        setSelectedUserId(null);
      },
      onError: (error: any) => {
        toast({
          title: "Error",
          description:
            error instanceof Error ? error.message : "Failed to update credits",
          variant: "destructive",
        });
      },
    },
  );

  const { data: userCredits } = useQuery(
    ["userCredits", selectedUserId],
    () =>
      selectedUserId
        ? apiClient.getUserCreditsById({ userId: selectedUserId })
        : null,
    {
      enabled: !!selectedUserId,
    },
  );

  const handleToggleSuperAdmin = (email: string, currentStatus: boolean) => {
    setSuperAdminMutation.mutate({
      email,
      isSuperAdmin: !currentStatus,
    });
  };

  const handleManageCredits = (userId: string) => {
    setSelectedUserId(userId);
    setShowCreditDialog(true);
  };

  const handleUpdateCredits = () => {
    const amount = parseInt(creditAmount);
    if (isNaN(amount) || !selectedUserId) {
      toast({
        title: "Error",
        description: "Please enter a valid credit amount",
        variant: "destructive",
      });
      return;
    }

    updateCreditsMutation.mutate({
      userId: selectedUserId,
      creditsToAdd: amount,
      reason: creditReason || undefined,
    });
  };

  if (!users) {
    return (
      <div className="flex items-center justify-center p-8">
        <LoadingSpinner />
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto">
      <Card className="overflow-hidden">
        <CardHeader className="border-b bg-secondary/20">
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            User Management
          </CardTitle>
          <CardDescription>
            Manage user accounts and superadmin permissions
          </CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          {users.length === 0 ? (
            <div className="empty-state">
              <div className="empty-state-icon">
                <Users className="h-12 w-12" />
              </div>
              <h3 className="text-lg font-medium mb-2">No users found</h3>
              <p className="text-muted-foreground max-w-sm">
                No users are currently registered in the system
              </p>
            </div>
          ) : (
            <div className="divide-y">
              {users.map((user) => (
                <div
                  key={user.id}
                  className="flex items-center justify-between p-6 hover:bg-secondary/10 transition-colors"
                >
                  <div className="flex items-center gap-4">
                    {user.image ? (
                      <img
                        src={user.image}
                        alt={user.name || "User"}
                        className="w-12 h-12 rounded-full object-cover"
                      />
                    ) : (
                      <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
                        <User className="h-6 w-6 text-primary" />
                      </div>
                    )}
                    <div className="space-y-1">
                      <div className="font-medium">
                        {user.name || "Unknown User"}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {user.email}
                      </div>
                      {user.handle && (
                        <div className="text-sm text-muted-foreground">
                          @{user.handle}
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center gap-4">
                    {user.isSuperAdmin && (
                      <Badge
                        variant="default"
                        className="bg-primary/10 text-primary"
                      >
                        <Crown className="h-3 w-3 mr-1" />
                        Super Admin
                      </Badge>
                    )}
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleManageCredits(user.id)}
                      className="rounded-full"
                    >
                      <CreditCard className="h-4 w-4 mr-1" />
                      Credits
                    </Button>
                    <Button
                      variant={user.isSuperAdmin ? "destructive" : "default"}
                      size="sm"
                      onClick={() =>
                        handleToggleSuperAdmin(user.email, user.isSuperAdmin)
                      }
                      disabled={setSuperAdminMutation.isLoading}
                      className="rounded-full"
                    >
                      {setSuperAdminMutation.isLoading ? (
                        <RefreshCw className="h-4 w-4 animate-spin" />
                      ) : user.isSuperAdmin ? (
                        "Revoke Admin"
                      ) : (
                        "Make Admin"
                      )}
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      <Dialog open={showCreditDialog} onOpenChange={setShowCreditDialog}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Manage User Credits</DialogTitle>
            <DialogDescription>
              Add or deduct credits for this user. Use negative numbers to
              deduct credits.
            </DialogDescription>
          </DialogHeader>

          {userCredits && (
            <div className="space-y-4">
              <div className="bg-secondary/20 p-4 rounded-lg">
                <div className="text-sm text-muted-foreground mb-2">
                  Current Credits
                </div>
                <div className="text-2xl font-bold">
                  {userCredits.availableCredits.toLocaleString()}
                </div>
                <div className="text-sm text-muted-foreground">
                  {userCredits.totalCredits.toLocaleString()} total,{" "}
                  {userCredits.usedCredits.toLocaleString()} used
                </div>
                <div className="text-sm text-muted-foreground">
                  Plan: {userCredits.subscriptionPlan}
                </div>
              </div>

              <div className="space-y-3">
                <div>
                  <Label htmlFor="creditAmount">Credit Amount</Label>
                  <Input
                    id="creditAmount"
                    type="number"
                    placeholder="Enter amount (positive to add, negative to deduct)"
                    value={creditAmount}
                    onChange={(e) => setCreditAmount(e.target.value)}
                  />
                </div>

                <div>
                  <Label htmlFor="creditReason">Reason (optional)</Label>
                  <Input
                    id="creditReason"
                    placeholder="Reason for credit adjustment"
                    value={creditReason}
                    onChange={(e) => setCreditReason(e.target.value)}
                  />
                </div>
              </div>
            </div>
          )}

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowCreditDialog(false)}
            >
              Cancel
            </Button>
            <Button
              onClick={handleUpdateCredits}
              disabled={updateCreditsMutation.isLoading || !creditAmount}
            >
              {updateCreditsMutation.isLoading ? (
                <RefreshCw className="h-4 w-4 animate-spin mr-2" />
              ) : null}
              Update Credits
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

function SettingsPage() {
  const queryClient = useQueryClient();
  const {
    data: accounts,
    isLoading: isLoadingAccounts,
    isError: isErrorAccounts,
    error: errorAccounts,
  } = useConnectedAccounts();

  // Brand Guidelines
  const { data: brandGuidelines } = useQuery(["brandGuidelines"], () =>
    apiClient.getBrandGuidelines(),
  );

  // User Settings
  const { data: userSettings } = useUserSettings();

  // Audience insights for Settings > Brand Persona view
  const { data: advancedInsightsSettings } = useQuery(
    ["advancedInsightsSettings"],
    () => apiClient.getAdvancedInsights({}),
    {
      staleTime: 5 * 60 * 1000,
      refetchOnWindowFocus: false,
      refetchOnMount: false,
    },
  );

  const triggerInsightsSettings = useMutation(
    apiClient.triggerAdvancedInsightsGeneration,
    {
      onSuccess: () => {
        queryClient.invalidateQueries(["advancedInsightsSettings"]);
      },
    },
  );

  // Superadmin check
  const { data: isCurrentUserSuperAdmin, isLoading: isLoadingSuperAdmin } =
    useQuery(["isSuperAdmin"], () => apiClient.isSuperAdmin(), {
      retry: false,
      staleTime: 5 * 60 * 1000, // 5 minutes
    });

  // User management for superadmins
  const { data: allUsers, refetch: refetchUsers } = useQuery(
    ["allUsers"],
    () => apiClient.listAllUsers(),
    {
      enabled: !!isCurrentUserSuperAdmin,
      retry: false,
    },
  );

  const [brandVoice, setBrandVoice] = useState("professional");
  const [tonePriorities, setTonePriorities] = useState<string[]>([]);
  const [phrasesToUse, setPhrasesToUse] = useState<string[]>([]);
  const [phrasesToAvoid, setPhrasesToAvoid] = useState<string[]>([]);
  const [exampleResponses, setExampleResponses] = useState<string[]>([]);
  const [additionalNotes, setAdditionalNotes] = useState("");
  const [objectives, setObjectives] = useState<string[]>([]);
  const [kpis, setKpis] = useState<string[]>([]);
  const [kpiNotes, setKpiNotes] = useState("");
  const [newObjective, setNewObjective] = useState("");
  const [newKPI, setNewKPI] = useState("");
  const [brandWebsite, setBrandWebsite] = useState("");
  const [socialLinks, setSocialLinks] = useState<{
    [platform: string]: string;
  }>({});
  const [fetchFrequency, setFetchFrequency] = useState("manual");
  const [emailAlertsEnabled, setEmailAlertsEnabled] = useState(false);
  const [priorityThreshold, setPriorityThreshold] = useState(8);

  // Load brand guidelines data when available
  useEffect(() => {
    if (brandGuidelines) {
      setBrandVoice(brandGuidelines.brandVoice);
      setTonePriorities(
        Array.isArray(brandGuidelines.tonePriorities)
          ? brandGuidelines.tonePriorities
          : [],
      );
      setPhrasesToUse(
        Array.isArray(brandGuidelines.phrasesToUse)
          ? brandGuidelines.phrasesToUse
          : [],
      );
      setPhrasesToAvoid(
        Array.isArray(brandGuidelines.phrasesToAvoid)
          ? brandGuidelines.phrasesToAvoid
          : [],
      );
      setExampleResponses(
        Array.isArray(brandGuidelines.exampleResponses)
          ? brandGuidelines.exampleResponses
          : [],
      );
      setAdditionalNotes(brandGuidelines.additionalNotes || "");
      setBrandWebsite(brandGuidelines.brandWebsite || "");
      setSocialLinks(
        typeof brandGuidelines.socialLinks === "string"
          ? (JSON.parse(brandGuidelines.socialLinks || "{}") as {
              [platform: string]: string;
            })
          : (brandGuidelines.socialLinks as { [platform: string]: string }) ||
              {},
      );
      setObjectives(
        Array.isArray(brandGuidelines.objectives)
          ? (brandGuidelines.objectives as string[])
          : [],
      );
      setKpis(
        Array.isArray(brandGuidelines.kpis)
          ? (brandGuidelines.kpis as string[])
          : [],
      );
      setKpiNotes(brandGuidelines.kpiNotes || "");
    }
  }, [brandGuidelines]);

  // Load user settings when available
  useEffect(() => {
    if (userSettings) {
      setFetchFrequency(userSettings.fetchFrequency);
      setEmailAlertsEnabled(userSettings.emailAlertsEnabled || false);
      setPriorityThreshold(userSettings.emailAlertsPriorityThreshold || 8);
    }
  }, [userSettings]);

  // Save brand guidelines
  const saveBrandGuidelinesMutation = useMutation(
    apiClient.saveBrandGuidelines,
    {
      onSuccess: () => {
        queryClient.invalidateQueries(queryKeys.brandGuidelines());
        toast({
          title: "Brand guidelines saved",
          description: "Your brand guidelines have been updated successfully",
        });
      },
      onError: (error: any) => {
        toast({
          title: "Failed to save brand guidelines",
          description:
            error instanceof Error ? error.message : "An error occurred",
          variant: "destructive",
        });
      },
    },
  );

  // Save user settings
  const saveUserSettingsMutation = useMutation(apiClient.updateUserSettings, {
    onSuccess: () => {
      queryClient.invalidateQueries(queryKeys.userSettings());
      toast({
        title: "Settings saved",
        description: "Your settings have been updated successfully",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to save settings",
        description:
          error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });

  // Facebook OAuth connection
  const [facebookToken, setFacebookToken] = useState("");
  const [availablePages, setAvailablePages] = useState<Array<{
    id: string;
    name: string;
  }> | null>(null);
  const { toast } = useToast();

  const connectFacebookMutation = useMutation(
    (params: {
      accessToken: string;
      platform: "facebook" | "instagram";
      selectedPageIds?: string[];
    }) => apiClient.connectFacebookAccount(params),
    {
      onSuccess: (data) => {
        // Check if we need page selection
        if (data.needsPageSelection && data.availablePages) {
          setAvailablePages(data.availablePages);
          return;
        }

        // Normal success flow
        queryClient.invalidateQueries(queryKeys.connectedAccounts());
        setFacebookToken("");
        setAvailablePages(null);

        // Show success toast
        toast({
          title: "Account connected",
          description: data.pagesCount
            ? `Successfully connected ${data.pagesCount} Facebook ${data.pagesCount === 1 ? "Page" : "Pages"}`
            : "Your Facebook account has been connected successfully",
        });

        // Show warning if returned from the API
        const accountWithWarning = data as { warning?: string };
        if (accountWithWarning.warning) {
          toast({
            title: "Limited functionality",
            description: accountWithWarning.warning,
            variant: "destructive",
          });
        }
      },
      onError: (error: any) => {
        // Show error toast with the specific error message
        const errorMessage =
          error instanceof Error ? error.message : "Failed to connect account";
        console.error("Facebook connection error:", errorMessage);

        toast({
          title: "Connection failed",
          description: errorMessage,
          variant: "destructive",
        });
      },
    },
  );

  // Handle page selection confirmation
  const handlePageSelection = (selectedPageIds: string[]) => {
    if (selectedPageIds.length === 0) {
      toast({
        title: "No Pages Selected",
        description: "Please select at least one Page to connect",
        variant: "destructive",
      });
      return;
    }

    connectFacebookMutation.mutate({
      accessToken: facebookToken,
      platform: "facebook",
      selectedPageIds,
    });
  };

  // Cancel page selection
  const handleCancelPageSelection = () => {
    setAvailablePages(null);
    setFacebookToken("");
  };

  // Manual account connection
  const [manualAccount, setManualAccount] = useState({
    platform: "twitter",
    name: "",
    accountId: "",
    accessToken: "",
    pageId: "",
    pageToken: "",
  });

  const connectManualMutation = useMutation(apiClient.connectManualAccount, {
    onSuccess: () => {
      queryClient.invalidateQueries(queryKeys.connectedAccounts());
      setManualAccount({
        platform: "twitter",
        name: "",
        accountId: "",
        accessToken: "",
        pageId: "",
        pageToken: "",
      });
    },
  });

  // Disconnect account
  const disconnectMutation = useMutation(apiClient.disconnectAccount, {
    onSuccess: () => {
      queryClient.invalidateQueries(queryKeys.connectedAccounts());
    },
  });

  // Helper function to add items to array state
  const addToArray = (
    setter: React.Dispatch<React.SetStateAction<string[]>>,
    value: string,
  ) => {
    if (value.trim()) {
      setter((prev) => [...prev, value.trim()]);
      return true;
    }
    return false;
  };

  // Helper function to remove items from array state
  const removeFromArray = (
    setter: React.Dispatch<React.SetStateAction<string[]>>,
    index: number,
  ) => {
    setter((prev) => prev.filter((_, i) => i !== index));
  };

  // Form handlers for tag-like inputs
  const [newTonePriority, setNewTonePriority] = useState("");
  const [newPhraseToUse, setNewPhraseToUse] = useState("");
  const [newPhraseToAvoid, setNewPhraseToAvoid] = useState("");
  const [newExampleResponse, setNewExampleResponse] = useState("");

  const handleAddTonePriority = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      e.preventDefault();
      if (addToArray(setTonePriorities, newTonePriority)) {
        setNewTonePriority("");
      }
    }
  };

  const handleAddPhraseToUse = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      e.preventDefault();
      if (addToArray(setPhrasesToUse, newPhraseToUse)) {
        setNewPhraseToUse("");
      }
    }
  };

  const handleAddPhraseToAvoid = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      e.preventDefault();
      if (addToArray(setPhrasesToAvoid, newPhraseToAvoid)) {
        setNewPhraseToAvoid("");
      }
    }
  };

  const handleAddExampleResponse = () => {
    if (addToArray(setExampleResponses, newExampleResponse)) {
      setNewExampleResponse("");
    }
  };

  const handleSaveBrandGuidelines = () => {
    saveBrandGuidelinesMutation.mutate({
      brandVoice,
      tonePriorities,
      phrasesToUse,
      phrasesToAvoid,
      exampleResponses,
      additionalNotes,
      brandWebsite,
      socialLinks,
      objectives,
      kpis,
      kpiNotes,
    });
  };

  return (
    <div>
      <MetaTags
        title="Settings | SocialWave"
        description="Manage your connected social media accounts, define your brand voice for the AI, and configure your application preferences."
        keywords="account settings, brand guidelines, social media connection, API settings, notification preferences"
      />
      <StructuredData
        data={{
          "@context": "https://schema.org",
          "@type": "WebPage",
          name: "Settings | SocialWave",
          description:
            "Manage your connected social media accounts, define your brand voice for the AI, and configure your application preferences.",
        }}
      />
      <h1 className="text-3xl font-bold mb-2 gradient-text">Settings</h1>
      <p className="text-muted-foreground text-lg mb-8">
        Manage your accounts and brand guidelines
      </p>

      <Tabs defaultValue="brandAccounts" className="mb-8">
        <TabsList className="mb-4 p-1 bg-secondary/50 rounded-lg flex flex-wrap h-auto justify-start">
          <TabsTrigger value="brandAccounts" className="rounded-lg px-4 py-2">
            Brand Accounts
          </TabsTrigger>
          <TabsTrigger value="preferences" className="rounded-lg px-4 py-2">
            Preferences
          </TabsTrigger>
          <TabsTrigger value="subscription" className="rounded-lg px-4 py-2">
            Subscription & ACUs
          </TabsTrigger>
          {(isCurrentUserSuperAdmin || isLoadingSuperAdmin) && (
            <TabsTrigger
              value="userManagement"
              className="rounded-lg px-4 py-2"
              disabled={isLoadingSuperAdmin || !isCurrentUserSuperAdmin}
            >
              {isLoadingSuperAdmin ? "Loading..." : "User Management"}
            </TabsTrigger>
          )}
        </TabsList>

        <TabsContent value="brandAccounts">
          <div className="space-y-6">
            {/* Brand Accounts Sub-navigation */}
            <Tabs defaultValue="socialAccounts" className="w-full">
              <TabsList className="grid w-full grid-cols-4 mb-6">
                <TabsTrigger value="socialAccounts" className="text-sm">
                  Social Accounts
                </TabsTrigger>
                <TabsTrigger value="brandGuidelines" className="text-sm">
                  Brand Guidelines
                </TabsTrigger>
                <TabsTrigger value="brandPersona" className="text-sm">
                  Brand Vibe!
                </TabsTrigger>
                <TabsTrigger value="documents" className="text-sm">
                  My Documents
                </TabsTrigger>
              </TabsList>

              {/* Social Accounts Sub-tab */}
              <TabsContent value="socialAccounts">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  {/* Connected Accounts */}
                  <Card className="overflow-hidden">
                    <CardHeader className="border-b bg-secondary/20">
                      <CardTitle>Connected Accounts</CardTitle>
                      <CardDescription>
                        Manage your connected social media accounts
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="p-0">
                      {isLoadingAccounts ? (
                        <div className="p-6">
                          <LoadingSpinner />
                        </div>
                      ) : isErrorAccounts ? (
                        <div className="p-6">
                          <Alert variant="destructive">
                            <AlertTitle>Error loading accounts</AlertTitle>
                            <AlertDescription>
                              {(errorAccounts as Error).message}
                            </AlertDescription>
                          </Alert>
                        </div>
                      ) : accounts && accounts.length === 0 ? (
                        <div className="empty-state">
                          <div className="empty-state-icon">
                            <MessageSquare className="h-12 w-12" />
                          </div>
                          <h3 className="text-lg font-medium mb-2">
                            No accounts connected
                          </h3>
                          <p className="text-muted-foreground max-w-sm">
                            Connect your social media accounts using the options
                            below
                          </p>
                        </div>
                      ) : (
                        <div className="divide-y">
                          {accounts &&
                            accounts.map((account) => (
                              <div
                                key={account.id}
                                className="flex items-center justify-between p-5 hover:bg-secondary/10 transition-colors"
                              >
                                <div className="flex items-center gap-4">
                                  <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
                                    {getPlatformIcon(account.platform)}
                                  </div>
                                  <div>
                                    <div className="font-medium">
                                      {account.name}
                                    </div>
                                    <div className="text-sm text-muted-foreground capitalize">
                                      {account.platform}
                                    </div>
                                  </div>
                                </div>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() =>
                                    disconnectMutation.mutate({
                                      accountId: account.id,
                                    })
                                  }
                                  className="rounded-full border-primary/20 hover:bg-primary/5"
                                >
                                  Disconnect
                                </Button>
                              </div>
                            ))}
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  {/* Connect New Accounts */}
                  <div className="space-y-8">
                    {/* Connection Guide - Only show for first-time users */}
                    {accounts && accounts.length === 0 && (
                      <Card className="overflow-hidden border-primary/20 bg-gradient-to-br from-primary/5 to-primary/10">
                        <CardHeader className="border-b bg-primary/10">
                          <CardTitle className="flex items-center gap-2">
                            <Lightbulb className="h-5 w-5 text-primary" />
                            Ready to connect?
                          </CardTitle>
                          <CardDescription>
                            Choose any platform below - we'll guide you through
                            it
                          </CardDescription>
                        </CardHeader>
                        <CardContent className="p-4">
                          <Alert className="border-blue-200 bg-blue-50 dark:bg-blue-950/20">
                            <HelpCircle className="h-4 w-4 text-blue-600" />
                            <AlertDescription className="text-blue-800 dark:text-blue-200">
                              <strong>New here?</strong> Facebook/Instagram are
                              easiest to start with.
                            </AlertDescription>
                          </Alert>
                        </CardContent>
                      </Card>
                    )}

                    {/* OAuth Connection */}
                    <Card id="connect-oauth" className="overflow-hidden">
                      <CardHeader className="border-b bg-secondary/20">
                        <CardTitle className="flex items-center gap-2">
                          <Settings className="h-5 w-5" />
                          One-Click Connection
                        </CardTitle>
                        <CardDescription>
                          Connect your Facebook, Instagram, Twitter, and YouTube
                          accounts with OAuth
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="p-6">
                        {availablePages ? (
                          <FacebookPageSelector
                            pages={availablePages}
                            onSelect={handlePageSelection}
                            onCancel={handleCancelPageSelection}
                          />
                        ) : (
                          <div className="space-y-4 md:space-y-6">
                            <div className="space-y-6">
                              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div className="p-4 border rounded-lg bg-secondary/20 hover:bg-secondary/30 transition-colors">
                                  <div className="flex items-center justify-between mb-3">
                                    <div className="flex items-center gap-3">
                                      <div className="w-10 h-10 rounded-full bg-blue-500/10 flex items-center justify-center">
                                        <Facebook className="h-5 w-5 text-blue-500" />
                                      </div>
                                      <div>
                                        <h4 className="font-medium">
                                          Facebook
                                        </h4>
                                        <div className="flex items-center gap-2">
                                          {accounts?.some(
                                            (a) => a.platform === "facebook",
                                          ) ? (
                                            <>
                                              <CheckCircle className="h-4 w-4 text-green-500" />
                                              <span className="text-sm text-green-600">
                                                Connected
                                              </span>
                                            </>
                                          ) : (
                                            <>
                                              <XCircle className="h-4 w-4 text-muted-foreground" />
                                              <span className="text-sm text-muted-foreground">
                                                Not connected
                                              </span>
                                            </>
                                          )}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <FacebookOAuthButton />
                                </div>

                                <div className="p-4 border rounded-lg bg-secondary/20 hover:bg-secondary/30 transition-colors">
                                  <div className="flex items-center justify-between mb-3">
                                    <div className="flex items-center gap-3">
                                      <div className="w-10 h-10 rounded-full bg-pink-500/10 flex items-center justify-center">
                                        <Instagram className="h-5 w-5 text-pink-500" />
                                      </div>
                                      <div>
                                        <h4 className="font-medium">
                                          Instagram
                                        </h4>
                                        <div className="flex items-center gap-2">
                                          {accounts?.some(
                                            (a) => a.platform === "instagram",
                                          ) ? (
                                            <>
                                              <CheckCircle className="h-4 w-4 text-green-500" />
                                              <span className="text-sm text-green-600">
                                                Connected
                                              </span>
                                            </>
                                          ) : (
                                            <>
                                              <XCircle className="h-4 w-4 text-muted-foreground" />
                                              <span className="text-sm text-muted-foreground">
                                                Not connected
                                              </span>
                                            </>
                                          )}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <InstagramOAuthButton />
                                </div>

                                <div className="p-4 border rounded-lg bg-secondary/20 hover:bg-secondary/30 transition-colors">
                                  <div className="flex items-center justify-between mb-3">
                                    <div className="flex items-center gap-3">
                                      <div className="w-10 h-10 rounded-full bg-blue-500/10 flex items-center justify-center">
                                        <Twitter className="h-5 w-5 text-blue-500" />
                                      </div>
                                      <div>
                                        <h4 className="font-medium">Twitter</h4>
                                        <div className="flex items-center gap-2">
                                          {accounts?.some(
                                            (a) => a.platform === "twitter",
                                          ) ? (
                                            <>
                                              <CheckCircle className="h-4 w-4 text-green-500" />
                                              <span className="text-sm text-green-600">
                                                Connected
                                              </span>
                                            </>
                                          ) : (
                                            <>
                                              <XCircle className="h-4 w-4 text-muted-foreground" />
                                              <span className="text-sm text-muted-foreground">
                                                Not connected
                                              </span>
                                            </>
                                          )}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <TwitterOAuthButton />
                                </div>

                                <div className="p-4 border rounded-lg bg-secondary/20 hover:bg-secondary/30 transition-colors">
                                  <div className="flex items-center justify-between mb-3">
                                    <div className="flex items-center gap-3">
                                      <div className="w-10 h-10 rounded-full bg-red-500/10 flex items-center justify-center">
                                        <Youtube className="h-5 w-5 text-red-500" />
                                      </div>
                                      <div>
                                        <h4 className="font-medium">YouTube</h4>
                                        <div className="flex items-center gap-2">
                                          {accounts?.some(
                                            (a) => a.platform === "youtube",
                                          ) ? (
                                            <>
                                              <CheckCircle className="h-4 w-4 text-green-500" />
                                              <span className="text-sm text-green-600">
                                                Connected
                                              </span>
                                            </>
                                          ) : (
                                            <>
                                              <XCircle className="h-4 w-4 text-muted-foreground" />
                                              <span className="text-sm text-muted-foreground">
                                                Not connected
                                              </span>
                                            </>
                                          )}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <YouTubeOAuthButton />
                                </div>

                                <div className="p-4 border rounded-lg bg-secondary/20 hover:bg-secondary/30 transition-colors">
                                  <div className="flex items-center justify-between mb-3">
                                    <div className="flex items-center gap-3">
                                      <div className="w-10 h-10 rounded-full bg-blue-600/10 flex items-center justify-center">
                                        <Linkedin className="h-5 w-5 text-blue-600" />
                                      </div>
                                      <div>
                                        <h4 className="font-medium">
                                          LinkedIn
                                        </h4>
                                        <div className="flex items-center gap-2">
                                          {accounts?.some(
                                            (a) => a.platform === "linkedin",
                                          ) ? (
                                            <>
                                              <CheckCircle className="h-4 w-4 text-green-500" />
                                              <span className="text-sm text-green-600">
                                                Connected
                                              </span>
                                            </>
                                          ) : (
                                            <>
                                              <XCircle className="h-4 w-4 text-muted-foreground" />
                                              <span className="text-sm text-muted-foreground">
                                                Not connected
                                              </span>
                                            </>
                                          )}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <LinkedInOAuthButton />
                                </div>
                              </div>

                              {/* Show contextual help only when needed */}
                              {accounts && accounts.length === 0 && (
                                <div className="p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800">
                                  <div className="flex items-center gap-2">
                                    <HelpCircle className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                                    <span className="text-sm text-blue-800 dark:text-blue-200">
                                      Click any button above - we'll handle the
                                      technical setup for you
                                    </span>
                                  </div>
                                </div>
                              )}
                            </div>

                            <Separator className="my-6" />

                            <div className="space-y-6">
                              <Alert className="border-amber-200 bg-amber-50 dark:bg-amber-950/20">
                                <AlertCircle className="h-4 w-4 text-amber-600" />
                                <AlertTitle className="text-amber-900 dark:text-amber-100">
                                  Advanced Option
                                </AlertTitle>
                                <AlertDescription className="text-amber-800 dark:text-amber-200">
                                  Have a Facebook access token? Connect directly
                                  below.
                                </AlertDescription>
                              </Alert>

                              <Collapsible>
                                <CollapsibleTrigger asChild>
                                  <Button
                                    variant="ghost"
                                    className="w-full justify-between p-0 h-auto"
                                  >
                                    <span className="font-medium flex items-center gap-2">
                                      <Code className="h-4 w-4" />
                                      How to get a token
                                    </span>
                                    <ChevronDown className="h-4 w-4" />
                                  </Button>
                                </CollapsibleTrigger>
                                <CollapsibleContent className="space-y-3 mt-3">
                                  <div className="bg-background/60 rounded-lg p-3 text-sm">
                                    <ol className="list-decimal list-inside space-y-1">
                                      <li>
                                        Go to{" "}
                                        <a
                                          href="https://developers.facebook.com/tools/explorer"
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          className="text-primary hover:underline font-medium"
                                        >
                                          Facebook Graph API Explorer
                                        </a>
                                      </li>
                                      <li>
                                        Click "Get User Access Token" and
                                        select:{" "}
                                        <code className="bg-muted px-1 rounded text-xs">
                                          pages_read_engagement,
                                          pages_manage_posts
                                        </code>
                                      </li>
                                      <li>Copy the token and paste it below</li>
                                    </ol>
                                  </div>
                                </CollapsibleContent>
                              </Collapsible>
                              <div className="space-y-4">
                                <div className="space-y-3">
                                  <Label
                                    htmlFor="facebook-token"
                                    className="text-sm font-medium flex items-center gap-2"
                                  >
                                    <Facebook className="h-4 w-4 text-blue-600" />
                                    Facebook Page Access Token
                                  </Label>
                                  <Input
                                    id="facebook-token"
                                    type="password"
                                    placeholder="Enter your Facebook Page access token"
                                    value={facebookToken}
                                    onChange={(e) =>
                                      setFacebookToken(e.target.value)
                                    }
                                    className="border-secondary/50 focus:border-primary"
                                  />
                                  <p className="text-xs text-muted-foreground">
                                    This token should have{" "}
                                    <code className="bg-muted px-1 rounded">
                                      pages_read_engagement
                                    </code>{" "}
                                    and{" "}
                                    <code className="bg-muted px-1 rounded">
                                      pages_manage_posts
                                    </code>{" "}
                                    permissions
                                  </p>
                                </div>

                                {/* Show tips only after user starts engaging */}
                                {facebookToken.length > 10 && (
                                  <div className="p-3 bg-green-50 dark:bg-green-950/20 rounded-lg border border-green-200 dark:border-green-800">
                                    <div className="flex items-center gap-2">
                                      <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
                                      <span className="text-sm text-green-800 dark:text-green-200">
                                        Token looks good! Click connect when
                                        ready.
                                      </span>
                                    </div>
                                  </div>
                                )}

                                <div className="flex flex-wrap gap-3 mt-6">
                                  <Button
                                    variant="outline"
                                    onClick={() =>
                                      connectFacebookMutation.mutate({
                                        accessToken: facebookToken,
                                        platform: "facebook",
                                      })
                                    }
                                    disabled={
                                      !facebookToken ||
                                      connectFacebookMutation.isLoading
                                    }
                                    className="rounded-full bg-secondary/30 border-secondary/50"
                                  >
                                    {connectFacebookMutation.isLoading ? (
                                      <>
                                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                                        Connecting...
                                      </>
                                    ) : (
                                      <>
                                        <Facebook className="h-4 w-4 mr-2 platform-facebook" />
                                        Connect with Token
                                      </>
                                    )}
                                  </Button>

                                  <Button
                                    variant="outline"
                                    onClick={() =>
                                      connectFacebookMutation.mutate({
                                        accessToken: facebookToken,
                                        platform: "instagram",
                                      })
                                    }
                                    disabled={
                                      !facebookToken ||
                                      connectFacebookMutation.isLoading
                                    }
                                    className="rounded-full bg-secondary/30 border-secondary/50"
                                  >
                                    {connectFacebookMutation.isLoading ? (
                                      <>
                                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                                        Connecting...
                                      </>
                                    ) : (
                                      <>
                                        <Instagram className="h-4 w-4 mr-2 platform-instagram" />
                                        Connect Instagram
                                      </>
                                    )}
                                  </Button>
                                </div>
                              </div>
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>

                    {/* Manual Token Connection */}
                    <Card className="overflow-hidden">
                      <CardHeader className="border-b bg-secondary/20">
                        <CardTitle className="flex items-center gap-2">
                          <Settings className="h-5 w-5" />
                          Manual Token Connection
                        </CardTitle>
                        <CardDescription>
                          Connect Facebook and Instagram using access tokens
                          directly
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="p-6">
                        <div className="space-y-4">
                          <div className="space-y-3">
                            <Label htmlFor="platform" className="text-sm">
                              Platform
                            </Label>
                            <select
                              id="platform"
                              className="w-full p-3 rounded-lg border border-secondary/50 bg-background focus:border-primary outline-none"
                              value={manualAccount.platform}
                              onChange={(e) =>
                                setManualAccount({
                                  ...manualAccount,
                                  platform: e.target.value,
                                })
                              }
                            >
                              <option value="twitter">Twitter/X</option>
                              <option value="youtube">YouTube</option>
                              <option value="linkedin">LinkedIn</option>
                            </select>
                          </div>

                          <div className="space-y-3">
                            <Label htmlFor="account-name" className="text-sm">
                              Account Name
                            </Label>
                            <Input
                              id="account-name"
                              placeholder="Display name for this account"
                              value={manualAccount.name}
                              onChange={(e) =>
                                setManualAccount({
                                  ...manualAccount,
                                  name: e.target.value,
                                })
                              }
                              className="border-secondary/50 focus:border-primary"
                            />
                          </div>

                          <div className="space-y-3">
                            <Label htmlFor="account-id" className="text-sm">
                              Account ID
                            </Label>
                            <Input
                              id="account-id"
                              placeholder="Your account ID on the platform"
                              value={manualAccount.accountId}
                              onChange={(e) =>
                                setManualAccount({
                                  ...manualAccount,
                                  accountId: e.target.value,
                                })
                              }
                              className="border-secondary/50 focus:border-primary"
                            />
                          </div>

                          <div className="space-y-3">
                            <Label htmlFor="access-token" className="text-sm">
                              Access Token
                            </Label>
                            <Input
                              id="access-token"
                              placeholder="Your API access token"
                              value={manualAccount.accessToken}
                              onChange={(e) =>
                                setManualAccount({
                                  ...manualAccount,
                                  accessToken: e.target.value,
                                })
                              }
                              className="border-secondary/50 focus:border-primary"
                            />
                          </div>

                          <Button
                            onClick={() =>
                              connectManualMutation.mutate(manualAccount)
                            }
                            disabled={
                              !manualAccount.name ||
                              !manualAccount.accountId ||
                              !manualAccount.accessToken ||
                              connectManualMutation.isLoading
                            }
                            className="w-full mt-2 rounded-full py-5 h-auto"
                          >
                            Connect Account
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>
              </TabsContent>

              {/* Brand Guidelines Sub-tab */}
              <TabsContent value="brandGuidelines">
                <div className="max-w-4xl mx-auto">
                  {/* Brand Setup Progress */}
                  <BrandSetupProgress className="mb-6" />
                  <Card className="overflow-hidden">
                    <CardHeader className="border-b bg-secondary/20">
                      <CardTitle>Brand Voice & Guidelines</CardTitle>
                      <CardDescription>
                        {brandGuidelines &&
                        Object.keys(brandGuidelines).length > 0
                          ? "Update your brand voice to ensure AI responses match your style"
                          : "Set up your brand voice so AI-generated responses sound authentically like your brand"}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="p-6">
                      <div className="space-y-6">
                        {/* Brand Voice */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="brand-voice"
                            className="text-base font-medium"
                          >
                            Brand Voice
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {brandVoice === "professional"
                              ? "AI responses will be formal and business-focused"
                              : brandVoice === "casual"
                                ? "AI responses will be friendly and conversational"
                                : brandVoice === "enthusiastic"
                                  ? "AI responses will be energetic and excited"
                                  : brandVoice === "helpful"
                                    ? "AI responses will be informative and solution-focused"
                                    : brandVoice === "witty"
                                      ? "AI responses will include appropriate humor"
                                      : "How should AI sound when responding to your customers?"}
                          </p>
                          <select
                            id="brand-voice"
                            className="w-full p-3 rounded-lg border border-secondary/50 bg-background focus:border-primary outline-none"
                            value={brandVoice}
                            onChange={(e) => setBrandVoice(e.target.value)}
                          >
                            <option value="professional">
                              Professional & Formal
                            </option>
                            <option value="casual">Casual & Friendly</option>
                            <option value="enthusiastic">
                              Enthusiastic & Energetic
                            </option>
                            <option value="helpful">
                              Helpful & Informative
                            </option>
                            <option value="witty">Witty & Humorous</option>
                          </select>
                        </div>

                        {/* Tone Priorities */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="tone-priorities"
                            className="text-base font-medium"
                          >
                            Tone Priorities{" "}
                            {tonePriorities.length > 0 &&
                              `(${tonePriorities.length} added)`}
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {tonePriorities.length === 0
                              ? "Describe your ideal tone (press Enter after each word)"
                              : `These ${tonePriorities.length} words guide your AI responses`}
                          </p>

                          <div className="flex flex-wrap gap-2 mb-2">
                            {tonePriorities.map((priority, index) => (
                              <Badge
                                key={index}
                                variant="secondary"
                                className="px-3 py-1 flex items-center gap-1"
                              >
                                {priority}
                                <X
                                  className="h-3 w-3 cursor-pointer ml-1"
                                  onClick={() =>
                                    removeFromArray(setTonePriorities, index)
                                  }
                                />
                              </Badge>
                            ))}
                          </div>

                          <Input
                            id="tone-priorities"
                            placeholder="e.g., Empathetic, Direct, Thoughtful"
                            value={newTonePriority}
                            onChange={(e) => setNewTonePriority(e.target.value)}
                            onKeyDown={handleAddTonePriority}
                            className="border-secondary/50 focus:border-primary"
                          />
                        </div>

                        {/* Phrases to Use */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="phrases-to-use"
                            className="text-base font-medium"
                          >
                            Phrases to Use
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {phrasesToUse.length === 0
                              ? "Add your signature phrases (press Enter after each one)"
                              : `${phrasesToUse.length} phrases will appear in AI responses`}
                          </p>

                          <div className="flex flex-wrap gap-2 mb-2">
                            {phrasesToUse.map((phrase, index) => (
                              <Badge
                                key={index}
                                variant="secondary"
                                className="px-3 py-1 flex items-center gap-1"
                              >
                                {phrase}
                                <X
                                  className="h-3 w-3 cursor-pointer ml-1"
                                  onClick={() =>
                                    removeFromArray(setPhrasesToUse, index)
                                  }
                                />
                              </Badge>
                            ))}
                          </div>

                          <Input
                            id="phrases-to-use"
                            placeholder="e.g., Thank you for reaching out, We appreciate your feedback"
                            value={newPhraseToUse}
                            onChange={(e) => setNewPhraseToUse(e.target.value)}
                            onKeyDown={handleAddPhraseToUse}
                            className="border-secondary/50 focus:border-primary"
                          />
                        </div>

                        {/* Phrases to Avoid */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="phrases-to-avoid"
                            className="text-base font-medium"
                          >
                            Phrases to Avoid
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {phrasesToAvoid.length === 0
                              ? "Phrases to avoid in responses (press Enter after each one)"
                              : `AI will avoid these ${phrasesToAvoid.length} phrases`}
                          </p>

                          <div className="flex flex-wrap gap-2 mb-2">
                            {phrasesToAvoid.map((phrase, index) => (
                              <Badge
                                key={index}
                                variant="secondary"
                                className="px-3 py-1 flex items-center gap-1"
                              >
                                {phrase}
                                <X
                                  className="h-3 w-3 cursor-pointer ml-1"
                                  onClick={() =>
                                    removeFromArray(setPhrasesToAvoid, index)
                                  }
                                />
                              </Badge>
                            ))}
                          </div>

                          <Input
                            id="phrases-to-avoid"
                            placeholder="e.g., Sorry for the inconvenience, Unfortunately"
                            value={newPhraseToAvoid}
                            onChange={(e) =>
                              setNewPhraseToAvoid(e.target.value)
                            }
                            onKeyDown={handleAddPhraseToAvoid}
                            className="border-secondary/50 focus:border-primary"
                          />
                        </div>

                        {/* Example Responses */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="example-responses"
                            className="text-base font-medium"
                          >
                            Example Responses
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {exampleResponses.length === 0
                              ? "Show AI how you'd respond with examples"
                              : `${exampleResponses.length} examples training your AI voice`}
                          </p>

                          <div className="space-y-3 mb-3">
                            {exampleResponses.map((response, index) => (
                              <div
                                key={index}
                                className="p-3 bg-secondary/20 rounded-lg relative pr-10"
                              >
                                <p className="text-sm">{response}</p>
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  className="absolute top-2 right-2 h-6 w-6"
                                  onClick={() =>
                                    removeFromArray(setExampleResponses, index)
                                  }
                                >
                                  <X className="h-4 w-4" />
                                </Button>
                              </div>
                            ))}
                          </div>

                          <div className="flex flex-col space-y-2">
                            <Textarea
                              id="example-responses"
                              placeholder="e.g., Thanks for your question! We're happy to help you with that. Here's what you need to know..."
                              value={newExampleResponse}
                              onChange={(e) =>
                                setNewExampleResponse(e.target.value)
                              }
                              className="border-secondary/50 focus:border-primary min-h-[80px]"
                            />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={handleAddExampleResponse}
                              disabled={!newExampleResponse.trim()}
                              className="self-end"
                            >
                              Add Example
                            </Button>
                          </div>
                        </div>

                        {/* Business Objectives */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="business-objectives"
                            className="text-base font-medium"
                          >
                            Business Objectives{" "}
                            {objectives.length > 0 &&
                              `(${objectives.length} set)`}
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {objectives.length === 0
                              ? "What are you optimizing for this week? (press Enter after each)"
                              : "Your content plan will align to these objectives"}
                          </p>

                          <div className="flex flex-wrap gap-2 mb-2">
                            {objectives.map((obj, index) => (
                              <Badge
                                key={index}
                                variant="secondary"
                                className="px-3 py-1 flex items-center gap-1"
                              >
                                {obj}
                                <X
                                  className="h-3 w-3 cursor-pointer ml-1"
                                  onClick={() =>
                                    removeFromArray(setObjectives, index)
                                  }
                                />
                              </Badge>
                            ))}
                          </div>

                          <Input
                            id="business-objectives"
                            placeholder="e.g., Awareness, Engagement, Conversions"
                            value={newObjective}
                            onChange={(e) => setNewObjective(e.target.value)}
                            onKeyDown={(e) => {
                              if (e.key === "Enter") {
                                e.preventDefault();
                                if (addToArray(setObjectives, newObjective))
                                  setNewObjective("");
                              }
                            }}
                            className="border-secondary/50 focus:border-primary"
                          />

                          {/* Quick picks */}
                          <div className="flex flex-wrap gap-2 pt-1">
                            {[
                              "Awareness",
                              "Engagement",
                              "Conversions",
                              "Sales",
                              "Virality",
                              "Thought Leadership",
                              "Community",
                              "Retention",
                            ].map((opt) => (
                              <Button
                                key={opt}
                                type="button"
                                variant="outline"
                                size="sm"
                                className="h-7 px-2"
                                onClick={() =>
                                  setObjectives((prev) =>
                                    prev.includes(opt) ? prev : [...prev, opt],
                                  )
                                }
                              >
                                {opt}
                              </Button>
                            ))}
                          </div>
                        </div>

                        {/* KPIs */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="kpis"
                            className="text-base font-medium"
                          >
                            KPIs{" "}
                            {kpis.length > 0 && `(${kpis.length} selected)`}
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            Pick the metrics that matter. We'll nudge your plan
                            to improve them.
                          </p>

                          <div className="flex flex-wrap gap-2 mb-2">
                            {kpis.map((k, index) => (
                              <Badge
                                key={index}
                                variant="secondary"
                                className="px-3 py-1 flex items-center gap-1"
                              >
                                {k}
                                <X
                                  className="h-3 w-3 cursor-pointer ml-1"
                                  onClick={() =>
                                    removeFromArray(setKpis, index)
                                  }
                                />
                              </Badge>
                            ))}
                          </div>

                          <Input
                            id="kpis"
                            placeholder="e.g., Impressions, CTR, Comments, Shares"
                            value={newKPI}
                            onChange={(e) => setNewKPI(e.target.value)}
                            onKeyDown={(e) => {
                              if (e.key === "Enter") {
                                e.preventDefault();
                                if (addToArray(setKpis, newKPI)) setNewKPI("");
                              }
                            }}
                            className="border-secondary/50 focus:border-primary"
                          />

                          {/* Quick picks */}
                          <div className="flex flex-wrap gap-2 pt-1">
                            {[
                              "Impressions",
                              "Reach",
                              "Click-Through Rate",
                              "Comments",
                              "Shares",
                              "Saves",
                              "Follows",
                              "Clicks",
                              "Sign-ups",
                              "Revenue",
                            ].map((opt) => (
                              <Button
                                key={opt}
                                type="button"
                                variant="outline"
                                size="sm"
                                className="h-7 px-2"
                                onClick={() =>
                                  setKpis((prev) =>
                                    prev.includes(opt) ? prev : [...prev, opt],
                                  )
                                }
                              >
                                {opt}
                              </Button>
                            ))}
                          </div>
                        </div>

                        {/* KPI Notes */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="kpi-notes"
                            className="text-base font-medium"
                          >
                            KPI Notes (optional)
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            Add any targets or definitions (e.g., "CTR {">"} 2%"
                            or "Reach new audiences on TikTok").
                          </p>
                          <Textarea
                            id="kpi-notes"
                            placeholder="Targets, definitions, and any constraints"
                            value={kpiNotes}
                            onChange={(e) => setKpiNotes(e.target.value)}
                            className="border-secondary/50 focus:border-primary min-h-[80px]"
                          />
                        </div>

                        {/* Additional Notes */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="additional-notes"
                            className="text-base font-medium"
                          >
                            Additional Guidelines
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {additionalNotes.length === 0
                              ? "Any other guidelines for AI responses"
                              : "Additional guidelines active"}
                          </p>
                          <Textarea
                            id="additional-notes"
                            placeholder="e.g., Always mention our satisfaction guarantee when discussing products. Use emojis sparingly."
                            value={additionalNotes}
                            onChange={(e) => setAdditionalNotes(e.target.value)}
                            className="border-secondary/50 focus:border-primary min-h-[100px]"
                          />
                        </div>

                        {/* Manual Brand Website */}
                        <div className="space-y-3">
                          <Label
                            htmlFor="brand-website"
                            className="text-base font-medium"
                          >
                            Brand Website
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {brandWebsite
                              ? "Website URL for your brand"
                              : "Add your brand website URL (for users not connecting via OAuth)"}
                          </p>
                          <Input
                            id="brand-website"
                            placeholder="https://yourbrand.com"
                            value={brandWebsite}
                            onChange={(e) => setBrandWebsite(e.target.value)}
                            className="border-secondary/50 focus:border-primary"
                          />
                        </div>

                        {/* Manual Social Links */}
                        <div className="space-y-3">
                          <Label className="text-base font-medium">
                            Social Links
                          </Label>
                          <p className="text-sm text-muted-foreground break-words">
                            {Object.keys(socialLinks).length > 0
                              ? `${Object.keys(socialLinks).length} social links added`
                              : "Add your social media links (for users not connecting via OAuth)"}
                          </p>

                          <div className="space-y-3">
                            <div className="space-y-2">
                              <Label
                                htmlFor="twitter-link"
                                className="text-sm font-medium"
                              >
                                Twitter/X
                              </Label>
                              <Input
                                id="twitter-link"
                                placeholder="https://twitter.com/yourbrand"
                                value={socialLinks.twitter || ""}
                                onChange={(e) =>
                                  setSocialLinks((prev) => ({
                                    ...prev,
                                    twitter: e.target.value,
                                  }))
                                }
                                className="border-secondary/50 focus:border-primary"
                              />
                            </div>

                            <div className="space-y-2">
                              <Label
                                htmlFor="facebook-link"
                                className="text-sm font-medium"
                              >
                                Facebook
                              </Label>
                              <Input
                                id="facebook-link"
                                placeholder="https://facebook.com/yourbrand"
                                value={socialLinks.facebook || ""}
                                onChange={(e) =>
                                  setSocialLinks((prev) => ({
                                    ...prev,
                                    facebook: e.target.value,
                                  }))
                                }
                                className="border-secondary/50 focus:border-primary"
                              />
                            </div>

                            <div className="space-y-2">
                              <Label
                                htmlFor="instagram-link"
                                className="text-sm font-medium"
                              >
                                Instagram
                              </Label>
                              <Input
                                id="instagram-link"
                                placeholder="https://instagram.com/yourbrand"
                                value={socialLinks.instagram || ""}
                                onChange={(e) =>
                                  setSocialLinks((prev) => ({
                                    ...prev,
                                    instagram: e.target.value,
                                  }))
                                }
                                className="border-secondary/50 focus:border-primary"
                              />
                            </div>

                            <div className="space-y-2">
                              <Label
                                htmlFor="linkedin-link"
                                className="text-sm font-medium"
                              >
                                LinkedIn
                              </Label>
                              <Input
                                id="linkedin-link"
                                placeholder="https://linkedin.com/company/yourbrand"
                                value={socialLinks.linkedin || ""}
                                onChange={(e) =>
                                  setSocialLinks((prev) => ({
                                    ...prev,
                                    linkedin: e.target.value,
                                  }))
                                }
                                className="border-secondary/50 focus:border-primary"
                              />
                            </div>

                            <div className="space-y-2">
                              <Label
                                htmlFor="youtube-link"
                                className="text-sm font-medium"
                              >
                                YouTube
                              </Label>
                              <Input
                                id="youtube-link"
                                placeholder="https://youtube.com/@yourbrand"
                                value={socialLinks.youtube || ""}
                                onChange={(e) =>
                                  setSocialLinks((prev) => ({
                                    ...prev,
                                    youtube: e.target.value,
                                  }))
                                }
                                className="border-secondary/50 focus:border-primary"
                              />
                            </div>
                          </div>
                        </div>

                        <Button
                          onClick={handleSaveBrandGuidelines}
                          disabled={saveBrandGuidelinesMutation.isLoading}
                          className="w-full mt-4 rounded-full py-6 h-auto font-medium text-base shadow-md hover:shadow-lg transition-all"
                        >
                          {saveBrandGuidelinesMutation.isLoading ? (
                            <>
                              <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
                              Saving...
                            </>
                          ) : (
                            "Save Brand Guidelines"
                          )}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              {/* Brand Persona Sub-tab */}
              <TabsContent value="brandPersona">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="order-2 lg:order-1">
                    <BrandPersonaDashboard />
                  </div>
                  <div className="order-1 lg:order-2">
                    <Card className="overflow-hidden">
                      <CardHeader className="border-b bg-secondary/20">
                        <CardTitle>Audience Personas</CardTitle>
                        <CardDescription>
                          See your audience personas alongside your brand vibe
                          for full context.
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="p-6">
                        <AudienceInsightsTab
                          insights={
                            advancedInsightsSettings &&
                            advancedInsightsSettings.status === "COMPLETED"
                              ? (advancedInsightsSettings as any)
                                  .audienceInsights
                              : undefined
                          }
                          onFeedback={() => {
                            toast({
                              title: "Feedback noted",
                              description:
                                "Thanks! Your preferences will help tune suggestions.",
                            });
                          }}
                          onRefresh={() => triggerInsightsSettings.mutate({})}
                        />
                      </CardContent>
                    </Card>
                  </div>
                </div>
              </TabsContent>

              {/* My Documents Sub-tab */}
              <TabsContent value="documents">
                <DocumentUpload />
              </TabsContent>
            </Tabs>
          </div>
        </TabsContent>

        <TabsContent value="brand">
          <div className="max-w-4xl mx-auto">
            {/* Brand Setup Progress */}
            <BrandSetupProgress className="mb-6" />
            <Card className="overflow-hidden">
              <CardHeader className="border-b bg-secondary/20">
                <CardTitle>Brand Voice & Guidelines</CardTitle>
                <CardDescription>
                  {brandGuidelines && Object.keys(brandGuidelines).length > 0
                    ? "Update your brand voice to ensure AI responses match your style"
                    : "Set up your brand voice so AI-generated responses sound authentically like your brand"}
                </CardDescription>
              </CardHeader>
              <CardContent className="p-6">
                <div className="space-y-6">
                  {/* Brand Voice */}
                  <div className="space-y-3">
                    <Label
                      htmlFor="brand-voice"
                      className="text-base font-medium"
                    >
                      Brand Voice
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {brandVoice === "professional"
                        ? "AI responses will be formal and business-focused"
                        : brandVoice === "casual"
                          ? "AI responses will be friendly and conversational"
                          : brandVoice === "enthusiastic"
                            ? "AI responses will be energetic and excited"
                            : brandVoice === "helpful"
                              ? "AI responses will be informative and solution-focused"
                              : brandVoice === "witty"
                                ? "AI responses will include appropriate humor"
                                : "How should AI sound when responding to your customers?"}
                    </p>
                    <select
                      id="brand-voice"
                      className="w-full p-3 rounded-lg border border-secondary/50 bg-background focus:border-primary outline-none"
                      value={brandVoice}
                      onChange={(e) => setBrandVoice(e.target.value)}
                    >
                      <option value="professional">
                        Professional & Formal
                      </option>
                      <option value="casual">Casual & Friendly</option>
                      <option value="enthusiastic">
                        Enthusiastic & Energetic
                      </option>
                      <option value="helpful">Helpful & Informative</option>
                      <option value="witty">Witty & Humorous</option>
                    </select>
                  </div>

                  {/* Tone Priorities */}
                  <div className="space-y-3">
                    <Label
                      htmlFor="tone-priorities"
                      className="text-base font-medium"
                    >
                      Tone Priorities{" "}
                      {tonePriorities.length > 0 &&
                        `(${tonePriorities.length} added)`}
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {tonePriorities.length === 0
                        ? "Describe your ideal tone (press Enter after each word)"
                        : `These ${tonePriorities.length} words guide your AI responses`}
                    </p>

                    <div className="flex flex-wrap gap-2 mb-2">
                      {tonePriorities.map((priority, index) => (
                        <Badge
                          key={index}
                          variant="secondary"
                          className="px-3 py-1 flex items-center gap-1"
                        >
                          {priority}
                          <X
                            className="h-3 w-3 cursor-pointer ml-1"
                            onClick={() =>
                              removeFromArray(setTonePriorities, index)
                            }
                          />
                        </Badge>
                      ))}
                    </div>

                    <Input
                      id="tone-priorities"
                      placeholder="e.g., Empathetic, Direct, Thoughtful"
                      value={newTonePriority}
                      onChange={(e) => setNewTonePriority(e.target.value)}
                      onKeyDown={handleAddTonePriority}
                      className="border-secondary/50 focus:border-primary"
                    />
                  </div>

                  {/* Phrases to Use */}
                  <div className="space-y-3">
                    <Label
                      htmlFor="phrases-to-use"
                      className="text-base font-medium"
                    >
                      Phrases to Use
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {phrasesToUse.length === 0
                        ? "Add your signature phrases (press Enter after each one)"
                        : `${phrasesToUse.length} phrases will appear in AI responses`}
                    </p>

                    <div className="flex flex-wrap gap-2 mb-2">
                      {phrasesToUse.map((phrase, index) => (
                        <Badge
                          key={index}
                          variant="secondary"
                          className="px-3 py-1 flex items-center gap-1"
                        >
                          {phrase}
                          <X
                            className="h-3 w-3 cursor-pointer ml-1"
                            onClick={() =>
                              removeFromArray(setPhrasesToUse, index)
                            }
                          />
                        </Badge>
                      ))}
                    </div>

                    <Input
                      id="phrases-to-use"
                      placeholder="e.g., Thank you for reaching out, We appreciate your feedback"
                      value={newPhraseToUse}
                      onChange={(e) => setNewPhraseToUse(e.target.value)}
                      onKeyDown={handleAddPhraseToUse}
                      className="border-secondary/50 focus:border-primary"
                    />
                  </div>

                  {/* Phrases to Avoid */}
                  <div className="space-y-3">
                    <Label
                      htmlFor="phrases-to-avoid"
                      className="text-base font-medium"
                    >
                      Phrases to Avoid
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {phrasesToAvoid.length === 0
                        ? "Phrases to avoid in responses (press Enter after each one)"
                        : `AI will avoid these ${phrasesToAvoid.length} phrases`}
                    </p>

                    <div className="flex flex-wrap gap-2 mb-2">
                      {phrasesToAvoid.map((phrase, index) => (
                        <Badge
                          key={index}
                          variant="secondary"
                          className="px-3 py-1 flex items-center gap-1"
                        >
                          {phrase}
                          <X
                            className="h-3 w-3 cursor-pointer ml-1"
                            onClick={() =>
                              removeFromArray(setPhrasesToAvoid, index)
                            }
                          />
                        </Badge>
                      ))}
                    </div>

                    <Input
                      id="phrases-to-avoid"
                      placeholder="e.g., Sorry for the inconvenience, Unfortunately"
                      value={newPhraseToAvoid}
                      onChange={(e) => setNewPhraseToAvoid(e.target.value)}
                      onKeyDown={handleAddPhraseToAvoid}
                      className="border-secondary/50 focus:border-primary"
                    />
                  </div>

                  {/* Example Responses */}
                  <div className="space-y-3">
                    <Label
                      htmlFor="example-responses"
                      className="text-base font-medium"
                    >
                      Example Responses
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {exampleResponses.length === 0
                        ? "Show AI how you'd respond with examples"
                        : `${exampleResponses.length} examples training your AI voice`}
                    </p>

                    <div className="space-y-3 mb-3">
                      {exampleResponses.map((response, index) => (
                        <div
                          key={index}
                          className="p-3 bg-secondary/20 rounded-lg relative pr-10"
                        >
                          <p className="text-sm">{response}</p>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="absolute top-2 right-2 h-6 w-6"
                            onClick={() =>
                              removeFromArray(setExampleResponses, index)
                            }
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      ))}
                    </div>

                    <div className="flex flex-col space-y-2">
                      <Textarea
                        id="example-responses"
                        placeholder="e.g., Thanks for your question! We're happy to help you with that. Here's what you need to know..."
                        value={newExampleResponse}
                        onChange={(e) => setNewExampleResponse(e.target.value)}
                        className="border-secondary/50 focus:border-primary min-h-[80px]"
                      />
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleAddExampleResponse}
                        disabled={!newExampleResponse.trim()}
                        className="self-end"
                      >
                        Add Example
                      </Button>
                    </div>
                  </div>

                  {/* Additional Notes */}
                  <div className="space-y-3">
                    <Label
                      htmlFor="additional-notes"
                      className="text-base font-medium"
                    >
                      Additional Guidelines
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {additionalNotes.length === 0
                        ? "Any other guidelines for AI responses"
                        : "Additional guidelines active"}
                    </p>
                    <Textarea
                      id="additional-notes"
                      placeholder="e.g., Always mention our satisfaction guarantee when discussing products. Use emojis sparingly."
                      value={additionalNotes}
                      onChange={(e) => setAdditionalNotes(e.target.value)}
                      className="border-secondary/50 focus:border-primary min-h-[100px]"
                    />
                  </div>

                  {/* Manual Brand Website */}
                  <div className="space-y-3">
                    <Label
                      htmlFor="brand-website"
                      className="text-base font-medium"
                    >
                      Brand Website
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {brandWebsite
                        ? "Website URL for your brand"
                        : "Add your brand website URL (for users not connecting via OAuth)"}
                    </p>
                    <Input
                      id="brand-website"
                      placeholder="https://yourbrand.com"
                      value={brandWebsite}
                      onChange={(e) => setBrandWebsite(e.target.value)}
                      className="border-secondary/50 focus:border-primary"
                    />
                  </div>

                  {/* Manual Social Links */}
                  <div className="space-y-3">
                    <Label className="text-base font-medium">
                      Social Links
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {Object.keys(socialLinks).length > 0
                        ? `${Object.keys(socialLinks).length} social links added`
                        : "Add your social media links (for users not connecting via OAuth)"}
                    </p>

                    <div className="space-y-3">
                      <div className="space-y-2">
                        <Label
                          htmlFor="twitter-link"
                          className="text-sm font-medium"
                        >
                          Twitter/X
                        </Label>
                        <Input
                          id="twitter-link"
                          placeholder="https://twitter.com/yourbrand"
                          value={socialLinks.twitter || ""}
                          onChange={(e) =>
                            setSocialLinks((prev) => ({
                              ...prev,
                              twitter: e.target.value,
                            }))
                          }
                          className="border-secondary/50 focus:border-primary"
                        />
                      </div>

                      <div className="space-y-2">
                        <Label
                          htmlFor="facebook-link"
                          className="text-sm font-medium"
                        >
                          Facebook
                        </Label>
                        <Input
                          id="facebook-link"
                          placeholder="https://facebook.com/yourbrand"
                          value={socialLinks.facebook || ""}
                          onChange={(e) =>
                            setSocialLinks((prev) => ({
                              ...prev,
                              facebook: e.target.value,
                            }))
                          }
                          className="border-secondary/50 focus:border-primary"
                        />
                      </div>

                      <div className="space-y-2">
                        <Label
                          htmlFor="instagram-link"
                          className="text-sm font-medium"
                        >
                          Instagram
                        </Label>
                        <Input
                          id="instagram-link"
                          placeholder="https://instagram.com/yourbrand"
                          value={socialLinks.instagram || ""}
                          onChange={(e) =>
                            setSocialLinks((prev) => ({
                              ...prev,
                              instagram: e.target.value,
                            }))
                          }
                          className="border-secondary/50 focus:border-primary"
                        />
                      </div>

                      <div className="space-y-2">
                        <Label
                          htmlFor="linkedin-link"
                          className="text-sm font-medium"
                        >
                          LinkedIn
                        </Label>
                        <Input
                          id="linkedin-link"
                          placeholder="https://linkedin.com/company/yourbrand"
                          value={socialLinks.linkedin || ""}
                          onChange={(e) =>
                            setSocialLinks((prev) => ({
                              ...prev,
                              linkedin: e.target.value,
                            }))
                          }
                          className="border-secondary/50 focus:border-primary"
                        />
                      </div>

                      <div className="space-y-2">
                        <Label
                          htmlFor="youtube-link"
                          className="text-sm font-medium"
                        >
                          YouTube
                        </Label>
                        <Input
                          id="youtube-link"
                          placeholder="https://youtube.com/@yourbrand"
                          value={socialLinks.youtube || ""}
                          onChange={(e) =>
                            setSocialLinks((prev) => ({
                              ...prev,
                              youtube: e.target.value,
                            }))
                          }
                          className="border-secondary/50 focus:border-primary"
                        />
                      </div>
                    </div>
                  </div>

                  <Button
                    onClick={handleSaveBrandGuidelines}
                    disabled={saveBrandGuidelinesMutation.isLoading}
                    className="w-full mt-4 rounded-full py-6 h-auto font-medium text-base shadow-md hover:shadow-lg transition-all"
                  >
                    {saveBrandGuidelinesMutation.isLoading ? (
                      <>
                        <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
                        Saving...
                      </>
                    ) : (
                      "Save Brand Guidelines"
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="brandSignals">
          <BrandSignalsDashboard />
        </TabsContent>

        <TabsContent value="brandPersona">
          <BrandPersonaDashboard />
        </TabsContent>

        <TabsContent value="preferences">
          <div className="max-w-4xl mx-auto">
            <Card className="overflow-hidden">
              <CardHeader className="border-b bg-secondary/20">
                <CardTitle>Application Preferences</CardTitle>
                <CardDescription>
                  {accounts && accounts.length > 0
                    ? "Customize how SocialWave manages your connected accounts"
                    : "Set your preferences - you can change these anytime after connecting accounts"}
                </CardDescription>
              </CardHeader>
              <CardContent className="p-6">
                <div className="space-y-6">
                  {/* Fetch Frequency */}
                  <div className="space-y-3">
                    <Label
                      htmlFor="fetch-frequency"
                      className="text-base font-medium"
                    >
                      Comment Fetch Frequency
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {fetchFrequency === "manual"
                        ? "Manual fetching - you're in control"
                        : `Auto-fetching ${fetchFrequency}`}
                    </p>
                    <select
                      id="fetch-frequency"
                      className="w-full p-3 rounded-lg border border-secondary/50 bg-background focus:border-primary outline-none"
                      value={fetchFrequency}
                      onChange={(e) => setFetchFrequency(e.target.value)}
                    >
                      <option value="manual">
                        Manual Only (Fetch when I click the button)
                      </option>
                      <option value="hourly">Hourly</option>
                      <option value="daily">Daily</option>
                      <option value="weekly">Weekly</option>
                    </select>
                  </div>

                  {/* Email Alerts */}
                  <div className="space-y-3 mt-6">
                    <Label
                      htmlFor="email-alerts"
                      className="text-base font-medium"
                    >
                      Email Alerts for High-Priority Comments
                    </Label>
                    <p className="text-sm text-muted-foreground break-words">
                      {emailAlertsEnabled
                        ? `Alerting for priority ${priorityThreshold}+ comments`
                        : "Email alerts disabled"}
                    </p>

                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id="email-alerts"
                        checked={emailAlertsEnabled}
                        onChange={(e) =>
                          setEmailAlertsEnabled(e.target.checked)
                        }
                        className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
                      />
                      <Label
                        htmlFor="email-alerts"
                        className="text-sm font-normal"
                      >
                        Enable email alerts for high-priority comments
                      </Label>
                    </div>

                    {emailAlertsEnabled && (
                      <div className="pl-6 mt-3 space-y-3">
                        <Label htmlFor="priority-threshold" className="text-sm">
                          Priority Threshold (1-10)
                        </Label>
                        <div className="flex items-center gap-4">
                          <input
                            type="range"
                            id="priority-threshold"
                            min="1"
                            max="10"
                            step="1"
                            value={priorityThreshold}
                            onChange={(e) =>
                              setPriorityThreshold(parseInt(e.target.value))
                            }
                            className="w-full h-2 bg-secondary rounded-lg appearance-none cursor-pointer"
                          />
                          <span className="text-sm font-medium bg-primary text-primary-foreground px-2 py-1 rounded-md">
                            {priorityThreshold}
                          </span>
                        </div>
                        <p className="text-xs text-muted-foreground">
                          {priorityThreshold <= 3
                            ? "Very sensitive - you'll get alerts for most comments"
                            : priorityThreshold <= 6
                              ? "Moderate - alerts for important and urgent comments"
                              : priorityThreshold <= 8
                                ? "Conservative - only urgent comments will trigger alerts"
                                : "Very selective - only the most critical comments will notify you"}
                        </p>
                      </div>
                    )}
                  </div>

                  <Button
                    onClick={() =>
                      saveUserSettingsMutation.mutate({
                        fetchFrequency,
                        emailAlertsEnabled,
                        emailAlertsPriorityThreshold: priorityThreshold,
                      })
                    }
                    disabled={saveUserSettingsMutation.isLoading}
                    className="mt-6"
                  >
                    {saveUserSettingsMutation.isLoading ? (
                      <>
                        <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
                        Saving...
                      </>
                    ) : (
                      "Save Preferences"
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        <TabsContent value="documents">
          <DocumentUpload />
        </TabsContent>

        <TabsContent value="subscription">
          <CreditUsageTab />
        </TabsContent>

        {isCurrentUserSuperAdmin && (
          <TabsContent value="userManagement">
            <UserManagementTab
              users={allUsers}
              refetchUsers={refetchUsers || (() => undefined)}
            />
          </TabsContent>
        )}
      </Tabs>
    </div>
  );
}

// --- REMOVED: InsightsDebugAllData and all related code ---

// --- InsightsNewPage: Standalone, robust, comments-based only ---

const AudienceInsightsSchemaForProp = z.object({
  keyInsightsSummary: z.string(),
  personas: z.array(
    z.object({
      id: z.string(),
      personaName: z.string(),
      description: z.string(),
      motivations: z.array(z.string()),
      painPoints: z.array(z.string()),
      communicationTips: z.array(z.string()),
      engagementPatterns: z.string(),
      preferredContentFormats: z.array(z.string()),
      channels: z.array(z.string()),
    }),
  ),
  overallSentiment: z.object({
    score: z.number(),
    trend: z.string(),
    analysis: z.string(),
  }),
  competitiveMentions: z.array(
    z.object({
      competitor: z.string(),
      sentiment: z.string(),
      count: z.number(),
    }),
  ),
});
type AudienceInsightsDataForProp = z.infer<
  typeof AudienceInsightsSchemaForProp
>;

function AudienceInsightsTab({
  insights,
  onFeedback,
  highlightedPersonaId,
  onRefresh,
}: {
  insights: AudienceInsightsDataForProp | undefined;
  onFeedback: (
    persona: any,
    feedbackType: "love" | "like" | "neutral" | "dislike",
  ) => void;
  highlightedPersonaId?: string | null;
  onRefresh?: () => void;
}) {
  const highlightedRef = useRef<HTMLDivElement>(null);

  const { isRefreshing, pullDistance } = usePullToRefresh(async () => {
    if (onRefresh) {
      await Promise.resolve(onRefresh());
    }
  });

  const pullHint = onRefresh ? (
    <div className="sticky top-0 z-10 flex items-center justify-center h-10 -mt-2">
      <div className="flex items-center gap-2 text-xs text-muted-foreground">
        <RefreshCw
          className={`h-3.5 w-3.5 ${pullDistance > 60 ? "text-primary animate-spin" : ""}`}
        />
        <span>
          {pullDistance > 60 ? "Release to refresh" : "Pull to refresh"}
        </span>
      </div>
    </div>
  ) : null;

  useEffect(() => {
    if (highlightedRef.current) {
      highlightedRef.current.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }, [highlightedPersonaId]);

  if (
    !insights ||
    !Array.isArray(insights.personas) ||
    insights.personas.length === 0
  ) {
    return (
      <Card className="overflow-hidden mb-8">
        <CardHeader className="border-b bg-secondary/20">
          <CardTitle>Audience Insights</CardTitle>
        </CardHeader>
        <CardContent className="p-6 space-y-6">
          {pullHint}
          <EmptyState
            icon={<Users className="h-12 w-12" />}
            title="No Audience Insights Found"
            description="Could not generate audience insights at this time. Please check back later or try adjusting your filters."
          >
            {onRefresh && (
              <div className="w-full max-w-xs flex flex-col gap-2">
                <Button onClick={onRefresh} className="w-full">
                  <RefreshCw className="mr-2 h-4 w-4" />
                  Refresh now
                </Button>
                <p className="text-xs text-muted-foreground text-center">
                  Tip: Pull down to refresh
                </p>
              </div>
            )}
          </EmptyState>

          {isRefreshing && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card>
                <CardContent className="p-4 space-y-3">
                  <Skeleton className="h-4 w-1/3" />
                  <Skeleton className="h-3 w-full" />
                  <Skeleton className="h-3 w-5/6" />
                  <div className="flex gap-2">
                    <Skeleton className="h-6 w-16" />
                    <Skeleton className="h-6 w-16" />
                  </div>
                </CardContent>
              </Card>
              <Card className="hidden md:block">
                <CardContent className="p-4 space-y-3">
                  <Skeleton className="h-4 w-1/3" />
                  <Skeleton className="h-3 w-full" />
                  <Skeleton className="h-3 w-5/6" />
                  <div className="flex gap-2">
                    <Skeleton className="h-6 w-16" />
                    <Skeleton className="h-6 w-16" />
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </CardContent>
      </Card>
    );
  }

  const {
    keyInsightsSummary,
    personas,
    overallSentiment,
    competitiveMentions,
  } = insights;

  return (
    <div className="space-y-8">
      {keyInsightsSummary && (
        <Alert className="bg-primary/5 border-primary/20">
          <Sparkles className="h-4 w-4 text-primary" />
          <AlertTitle className="text-primary">Key Insights Summary</AlertTitle>
          <AlertDescription>{keyInsightsSummary}</AlertDescription>
        </Alert>
      )}

      <div>
        <h3 className="text-2xl font-bold mb-4 gradient-text">
          Audience Personas
        </h3>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {personas.map((persona, index) => (
            <Card
              ref={persona.id === highlightedPersonaId ? highlightedRef : null}
              key={index}
              className={`overflow-hidden ${
                persona.id === highlightedPersonaId ? "ring-2 ring-primary" : ""
              }`}
            >
              <CardHeader className="bg-secondary/20">
                <CardTitle>{persona.personaName}</CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-4">
                <p className="text-sm text-muted-foreground break-words">
                  {persona.description}
                </p>

                <Accordion type="single" collapsible className="w-full">
                  <AccordionItem value="motivations">
                    <AccordionTrigger>Motivations</AccordionTrigger>
                    <AccordionContent>
                      <ul className="list-disc list-inside space-y-1 text-sm">
                        {persona.motivations.map((m, i) => (
                          <li key={i}>{m}</li>
                        ))}
                      </ul>
                    </AccordionContent>
                  </AccordionItem>
                  <AccordionItem value="pain-points">
                    <AccordionTrigger>Pain Points</AccordionTrigger>
                    <AccordionContent>
                      <ul className="list-disc list-inside space-y-1 text-sm">
                        {persona.painPoints.map((p, i) => (
                          <li key={i}>{p}</li>
                        ))}
                      </ul>
                    </AccordionContent>
                  </AccordionItem>
                  <AccordionItem value="communication-tips">
                    <AccordionTrigger>Communication Tips</AccordionTrigger>
                    <AccordionContent>
                      <ul className="list-disc list-inside space-y-1 text-sm">
                        {persona.communicationTips.map((tip, i) => (
                          <li key={i}>{tip}</li>
                        ))}
                      </ul>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>

                <div>
                  <h4 className="font-semibold text-sm mb-2">Engagement</h4>
                  <p className="text-sm text-muted-foreground break-words">
                    {persona.engagementPatterns}
                  </p>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {persona.preferredContentFormats.map((format, i) => (
                      <Badge key={i} variant="secondary">
                        {format}
                      </Badge>
                    ))}
                  </div>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {persona.channels.map((channel, i) => (
                      <Badge key={i} variant="outline">
                        {channel}
                      </Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
              <CardFooter className="p-4 flex justify-end">
                <div className="flex gap-1">
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-7 w-7 hover:text-red-500"
                          onClick={() => onFeedback(persona, "love")}
                        >
                          <Heart className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Love this!</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-7 w-7 hover:text-green-500"
                          onClick={() => onFeedback(persona, "like")}
                        >
                          <ThumbsUp className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>I like this</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-7 w-7 hover:text-yellow-500"
                          onClick={() => onFeedback(persona, "neutral")}
                        >
                          <Meh className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>It's okay</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-7 w-7 hover:text-gray-500"
                          onClick={() => onFeedback(persona, "dislike")}
                        >
                          <ThumbsDown className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Not for me</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <Card>
          <CardHeader>
            <CardTitle>Overall Sentiment</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-center flex-col">
              <p className="text-4xl font-bold">
                {overallSentiment.score.toFixed(2)}
              </p>
              <p
                className={`text-sm font-semibold ${overallSentiment.trend === "Improving" ? "text-green-500" : overallSentiment.trend === "Declining" ? "text-red-500" : "text-muted-foreground"}`}
              >
                {overallSentiment.trend}
              </p>
            </div>
            <p className="text-xs text-center text-muted-foreground mt-2">
              {overallSentiment.analysis}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Competitor Mentions</CardTitle>
          </CardHeader>
          <CardContent>
            {competitiveMentions && competitiveMentions.length > 0 ? (
              <ul className="space-y-2">
                {competitiveMentions.map((mention, i) => (
                  <li
                    key={i}
                    className="flex justify-between items-center text-sm"
                  >
                    <span>{mention.competitor}</span>
                    <div className="flex items-center gap-2">
                      <Badge
                        variant={
                          mention.sentiment.toLowerCase() === "positive"
                            ? "default"
                            : mention.sentiment.toLowerCase() === "negative"
                              ? "destructive"
                              : "secondary"
                        }
                      >
                        {mention.sentiment}
                      </Badge>
                      <Badge variant="outline">{mention.count} mentions</Badge>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-sm text-muted-foreground text-center">
                No competitor mentions found.
              </p>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

function InsightsTab({
  setPreviewContentId,
  initialSubTab,
  highlightedItemId,
  onRefreshRegistration,
}: {
  setPreviewContentId: (id: string | null) => void;
  initialSubTab?: "topics" | "viral" | "saved";
  highlightedItemId?: string | null;
  onRefreshRegistration?: (refreshFn: () => void) => void;
}) {
  const { data: connectedAccounts, isLoading: isLoadingAccounts } =
    useConnectedAccounts();
  useBrandContext();
  const { data: pagesData } = usePages();
  const [selectedPageId, setSelectedPageId] = useState<string | null>(
    pagesData?.[0]?.id || null,
  );
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [feedbackInfo, setFeedbackInfo] = useState<{
    post: any;
    type: "neutral" | "dislike";
  } | null>(null);
  const [postedInfo, setPostedInfo] = useState<{
    post: any;
    type: "love" | "like";
  } | null>(null);

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const [activeSubTab, setActiveSubTab] = useState(initialSubTab || "topics");

  // Query for saved insights
  const { data: savedInsights } = useQuery(
    ["savedInsights"],
    () => apiClient.listSavedInsights(),
    {
      staleTime: 30000, // 30 seconds
      cacheTime: 300000, // 5 minutes
    },
  );

  // Mutation for removing saved insights
  const removeSavedInsightMutation = useMutation(apiClient.removeSavedInsight, {
    onSuccess: () => {
      queryClient.invalidateQueries(["savedInsights"]);
      toast({
        title: "Insight Removed",
        description: "The insight has been removed from your saved list.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to remove insight",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const [generatingTopic, setGeneratingTopic] = useState<{
    topicId: string;
    format: string;
  } | null>(null);
  const [generatingPotential, setGeneratingPotential] = useState<string | null>(
    null,
  );
  // Removed unused upgrade dialog state

  const generateFromTopicMutation = useMutation(
    apiClient.generateContentFromTrendingTopic,
    {
      onMutate: ({ topic, format }) => {
        setGeneratingTopic({ topicId: topic.id, format });
      },
      onSuccess: (data) => {
        setPreviewContentId(data.contentId);
        queryClient.invalidateQueries(queryKeys.contentPillars());
        queryClient.invalidateQueries(queryKeys.generatedContent());
        setGeneratingTopic(null);
      },
      onError: (error: Error) => {
        if (
          error.message.toLowerCase().includes("insufficient credits") ||
          error.message.toLowerCase().includes("credit")
        ) {
          // setUpgradeDialogOpen(true); // Removed upgrade dialog
        } else {
          toast({
            title: "Generation Failed",
            description: error.message,
            variant: "destructive",
          });
        }
        setGeneratingTopic(null);
      },
    },
  );

  const generateFromPotentialMutation = useMutation(
    apiClient.generateContentFromViralPotential,
    {
      onMutate: ({ post }) => {
        setGeneratingPotential(post.id);
      },
      onSuccess: (data) => {
        setPreviewContentId(data.contentId);
        queryClient.invalidateQueries(queryKeys.contentPillars());
        queryClient.invalidateQueries(queryKeys.generatedContent());
        setGeneratingPotential(null);
      },
      onError: (error: Error) => {
        if (
          error.message.toLowerCase().includes("insufficient credits") ||
          error.message.toLowerCase().includes("credit")
        ) {
          // setUpgradeDialogOpen(true); // Removed upgrade dialog
        } else {
          toast({
            title: "Generation Failed",
            description: error.message,
            variant: "destructive",
          });
        }
        setGeneratingPotential(null);
      },
    },
  );

  const submitFeedbackMutation = useMutation({
    mutationFn: apiClient.submitRecommendationFeedback,
    onSuccess: () => {
      toast({
        title: `Feedback submitted!`,
        description: `Thanks for your feedback. Your preferences have been saved.`,
      });
      // Don't automatically trigger generation - let user decide
      queryClient.invalidateQueries(["advancedInsights", selectedPageId]);
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to submit feedback",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const {
    data: insights,
    isLoading: isLoadingInsights,
    refetch,
  } = useQuery<any>(
    ["advancedInsights", selectedPageId],
    () =>
      apiClient.getAdvancedInsights({ pageId: selectedPageId || undefined }),
    {
      // Disable all automatic refetching to prevent unwanted refreshes
      refetchInterval: false,
      refetchOnWindowFocus: false,
      refetchOnMount: false, // Disabled to prevent auto-refresh on mount
      staleTime: Infinity, // Never consider data stale automatically
      cacheTime: 24 * 60 * 60 * 1000, // 24 hours cache time
    },
  );

  // Separate query for cached trending insights
  const { data: cachedTrendingTopics } = useQuery<any>(
    ["cachedTrendingTopics"],
    () => apiClient.getTrendingTopicsResults(),
    {
      staleTime: 30000, // 30 seconds
      cacheTime: 300000, // 5 minutes
      // Ensure fresh data is fetched when the query is invalidated
      refetchOnWindowFocus: false,
      refetchOnMount: true,
    },
  );

  const { mutate: triggerGeneration, isLoading: isGenerating } = useMutation(
    apiClient.triggerAdvancedInsightsGeneration,
    {
      onSuccess: (result: any) => {
        if (result.success) {
          // Invalidate and refetch insights after triggering generation
          queryClient.invalidateQueries({
            queryKey: ["advancedInsights", selectedPageId],
          });
          toast({
            title: "Insights Generation Started",
            description:
              "Deep Research is running in the background. We’ll notify you in the app and by email when it’s ready. You can keep working.",
          });
        } else if (result.requiresUpgrade && result.upgradeInfo) {
          // Handle positive upgrade flow with structured prompt
          const upgradeInfo = result.upgradeInfo;
          toast({
            title: upgradeInfo.title || "✨ Unlock Premium Features",
            description:
              upgradeInfo.message ||
              "Take your content to the next level with premium insights.",
            action: (
              <div className="flex flex-col gap-2 min-w-0">
                {upgradeInfo.benefits && upgradeInfo.benefits.length > 0 && (
                  <div className="text-xs text-muted-foreground mb-1">
                    • {upgradeInfo.benefits.slice(0, 2).join(" • ")}
                  </div>
                )}
                <Button
                  size="sm"
                  className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white border-0"
                  onClick={() => {
                    if (upgradeInfo.upgradeUrl) {
                      // Enhanced upgrade flow with better UX
                      const fullUrl = upgradeInfo.upgradeUrl.startsWith("http")
                        ? upgradeInfo.upgradeUrl
                        : `${window.location.origin}${upgradeInfo.upgradeUrl}?returnTo=${encodeURIComponent(window.location.pathname)}`;

                      // Try to open in same tab for better conversion
                      window.location.href = fullUrl;
                    } else {
                      // Fallback to settings page with upgrade focus
                      window.location.href = "/settings?tab=subscription";
                    }
                  }}
                >
                  {upgradeInfo.ctaText || "Upgrade Now"} 🚀
                </Button>
              </div>
            ),
          });
        }
      },
      onError: (error) => {
        toast({
          title: "Failed to start generation",
          description: (error as Error).message,
          variant: "destructive",
        });
      },
    },
  );

  // Add cleanup mutation for stuck insights
  const { mutate: cleanupStuckTasks, isLoading: isCleaningUp } = useMutation(
    apiClient.cleanupStuckInsightsTasks,
    {
      onSuccess: (result: any) => {
        if (result.success) {
          toast({
            title: "Cleanup Completed",
            description: result.message,
          });
          // Refetch insights after cleanup
          queryClient.invalidateQueries({
            queryKey: ["advancedInsights", selectedPageId],
          });
          refetch();
        } else {
          toast({
            title: "Cleanup Failed",
            description: result.error || "Failed to cleanup stuck tasks",
            variant: "destructive",
          });
        }
      },
      onError: (error) => {
        toast({
          title: "Cleanup Failed",
          description: (error as Error).message,
          variant: "destructive",
        });
      },
    },
  );

  // Add reset insights mutation
  const { mutate: resetInsights, isLoading: isResetting } = useMutation(
    apiClient.resetUserInsights,
    {
      onSuccess: (result: any) => {
        if (result.success) {
          toast({
            title: "Insights Reset",
            description: result.message,
          });
          // Refetch insights after reset
          queryClient.invalidateQueries({
            queryKey: ["advancedInsights", selectedPageId],
          });
          refetch();
        } else {
          toast({
            title: "Reset Failed",
            description: result.error || "Failed to reset insights",
            variant: "destructive",
          });
        }
      },
      onError: (error) => {
        toast({
          title: "Reset Failed",
          description: (error as Error).message,
          variant: "destructive",
        });
      },
    },
  );

  // Create a unified refresh function and register it with parent
  const unifiedRefresh = useCallback(() => {
    triggerGeneration({ pageId: selectedPageId || undefined, mode: "deep" });
    refetch();
  }, [triggerGeneration, refetch, selectedPageId]);

  // Register the refresh function with parent component on mount and when it changes
  useEffect(() => {
    if (onRefreshRegistration) {
      onRefreshRegistration(unifiedRefresh);
    }
  }, [onRefreshRegistration, unifiedRefresh]);

  // Mobile pull-to-refresh: only refetch to check progress without re-running generation
  const handleMobileRefresh = useCallback(async () => {
    await refetch();
  }, [refetch]);

  usePullToRefresh(handleMobileRefresh);

  useEffect(() => {
    if (pagesData && pagesData.length > 0 && !selectedPageId) {
      setSelectedPageId(pagesData[0]!.id);
    }
  }, [pagesData, selectedPageId]);

  if (isLoadingAccounts) {
    return <LoadingSpinner className="py-12" />;
  }

  // Show empty state if no connected OAuth accounts and no brand setup
  if (!connectedAccounts || connectedAccounts.length === 0) {
    return (
      <EmptyState
        icon={<LinkIcon className="h-12 w-12" />}
        title="Connect Your Social Media Accounts"
        description="To generate content intelligence, connect at least one social account. This lets us analyze your audience and trends for personalized insights."
      >
        <Button asChild>
          <a href="/settings">Connect Accounts</a>
        </Button>
      </EmptyState>
    );
  }

  if (isLoadingInsights) {
    return <LoadingSpinner className="py-12" />;
  }

  if (!insights) {
    return (
      <EmptyState
        icon={<Sparkles className="h-12 w-12" />}
        title="Generate Content Intelligence"
        description="Get AI-powered content insights and strategic intelligence based on your audience and trending insights."
      >
        <Button
          onClick={() =>
            triggerGeneration({ pageId: selectedPageId || undefined })
          }
          disabled={isGenerating}
        >
          {isGenerating ? (
            <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Sparkles className="mr-2 h-4 w-4" />
          )}
          Generate Intelligence
        </Button>
      </EmptyState>
    );
  }

  if (insights.status === "GENERATING" || insights.status === "PENDING") {
    return (
      <ViralContentLoadingState
        lastUpdated={insights.lastUpdated}
        onCheckProgress={() => refetch()}
        onRetryAnalysis={() =>
          triggerGeneration({ pageId: selectedPageId || undefined })
        }
        isChecking={isLoadingInsights}
        selectedPageId={selectedPageId}
        onCleanupStuckTasks={() => cleanupStuckTasks()}
        onResetInsights={() => resetInsights()}
        isCleaningUp={isCleaningUp}
        isResetting={isResetting}
      />
    );
  }

  if (insights.status === "FAILED") {
    const getFriendlyErrorMessage = (
      error: string | null | undefined,
    ): string => {
      if (!error) return "An unknown error occurred during generation.";
      if (error.includes("exceeds the supported page limit")) {
        return "One of your documents is too large for analysis. Please upload a document with fewer than 1000 pages and try again.";
      }
      try {
        const jsonMatch = error.match(/{.*}/);
        if (jsonMatch && jsonMatch[0]) {
          const errorObj = JSON.parse(jsonMatch[0]) as {
            error?: { message?: string };
          };
          if (errorObj.error?.message) {
            return errorObj.error.message;
          }
        }
      } catch (error) {
        void error;
        // Fallback to original error if parsing fails
      }
      return error;
    };

    return (
      <Alert variant="destructive">
        <AlertTitle>Content Intelligence Generation Failed</AlertTitle>
        <AlertDescription>
          {getFriendlyErrorMessage(insights.error)}
        </AlertDescription>
        <Button
          className="mt-4"
          onClick={() => {
            triggerGeneration({
              pageId: selectedPageId || undefined,
              mode: "deep",
            });
            refetch();
          }}
          disabled={isGenerating}
        >
          {isGenerating ? "Retrying..." : "Retry Generation"}
        </Button>
      </Alert>
    );
  }

  const {
    trendingTopics,
    viralContentPotential,
    audienceInsights,
    lastUpdated,
  } = insights;

  return (
    <div>
      {/* Mobile-first header */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-xl md:text-2xl font-bold">
            Content Intelligence
          </h1>
          {/* Mobile refresh now handled by unified refresh system */}
          {/* Note: Mobile refresh now handled by unified system */}
        </div>

        {/* Mobile-optimized controls */}
        <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
          <div className="flex flex-col gap-2 md:flex-row md:items-center md:gap-4">
            <Select
              value={selectedPageId || "all"}
              onValueChange={(value) =>
                setSelectedPageId(value === "all" ? null : value)
              }
            >
              <SelectTrigger className="w-full md:w-[200px]">
                <SelectValue placeholder="All Pages" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Pages</SelectItem>
                {pagesData?.map((page) => (
                  <SelectItem key={page.id} value={page.id}>
                    {page.pageName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {lastUpdated && (
              <p className="text-xs md:text-sm text-muted-foreground text-center md:text-left">
                {isMobile
                  ? `Updated: ${new Date(lastUpdated).toLocaleDateString()}`
                  : `Last updated: ${new Date(lastUpdated).toLocaleString()}`}
              </p>
            )}
          </div>

          <div className="flex md:justify-end">
            <Button
              onClick={unifiedRefresh}
              disabled={isGenerating || isLoadingInsights}
              className="w-full md:w-auto"
            >
              {isGenerating || isLoadingInsights ? (
                <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <RefreshCw className="mr-2 h-4 w-4" />
              )}
              Refresh
            </Button>
          </div>
        </div>
      </div>
      <Tabs
        value={activeSubTab}
        onValueChange={(value) =>
          setActiveSubTab(value as "topics" | "viral" | "saved")
        }
        className="w-full"
      >
        <TabsList className="grid w-full min-w-0 grid-cols-3 h-14 mb-6 bg-muted/30 p-1.5 rounded-2xl border border-border/50 shadow-sm overflow-hidden">
          {" "}
          <TabsTrigger
            value="topics"
            className="rounded-xl text-sm font-medium transition-all data-[state=active]:bg-background data-[state=active]:shadow-md data-[state=active]:border data-[state=active]:border-border/20 hover:bg-background/50 flex items-center justify-center gap-2 py-2.5"
          >
            <Lightbulb className="h-4 w-4 text-amber-500" />
            <span className="hidden sm:inline font-medium">Insights</span>
            <span className="sm:hidden text-base">💡</span>
          </TabsTrigger>
          <TabsTrigger
            value="viral"
            className="rounded-xl text-sm font-medium transition-all data-[state=active]:bg-background data-[state=active]:shadow-md data-[state=active]:border data-[state=active]:border-border/20 hover:bg-background/50 flex items-center justify-center gap-2 py-2.5"
          >
            <Flame className="h-4 w-4 text-orange-500" />
            <span className="hidden sm:inline font-medium">Viral</span>
            <span className="sm:hidden text-base">🔥</span>
          </TabsTrigger>
          <TabsTrigger value="audience" className="hidden">
            <Target className="h-4 w-4 text-blue-500" />
            <span className="hidden sm:inline font-medium">Audience</span>
            <span className="sm:hidden text-base">🎯</span>
          </TabsTrigger>
          <TabsTrigger
            value="saved"
            className="rounded-xl text-sm font-medium transition-all data-[state=active]:bg-background data-[state=active]:shadow-md data-[state=active]:border data-[state=active]:border-border/20 hover:bg-background/50 flex items-center justify-center gap-2 py-2.5"
          >
            <Star className="h-4 w-4 text-purple-500" />
            <span className="hidden sm:inline font-medium">Saved</span>
            <span className="sm:hidden text-base">⭐</span>
          </TabsTrigger>
        </TabsList>
        <TabsContent value="topics" className="mt-4">
          <TrendingTopicsTab
            topics={trendingTopics}
            onFeedback={(p, feedbackType) => {
              if (feedbackType === "love" || feedbackType === "like") {
                setPostedInfo({ post: p, type: feedbackType });
              } else {
                setFeedbackInfo({ post: p, type: feedbackType });
              }
            }}
            onGenerate={(topic, format) =>
              generateFromTopicMutation.mutate({ topic, format })
            }
            isGenerating={generateFromTopicMutation.isLoading}
            generatingParams={generatingTopic}
            highlightedTopicId={
              activeSubTab === "topics" ? highlightedItemId : null
            }
            cacheInfo={{
              lastUpdated: cachedTrendingTopics?.lastUpdated,
              isFromCache: cachedTrendingTopics?.cached,
            }}
          />
        </TabsContent>
        <TabsContent value="viral" className="mt-4">
          <ViralPotentialTab
            potentialPosts={viralContentPotential}
            onFeedback={(p, feedbackType) => {
              if (feedbackType === "love" || feedbackType === "like") {
                setPostedInfo({ post: p, type: feedbackType });
              } else {
                setFeedbackInfo({ post: p, type: feedbackType });
              }
            }}
            onGenerate={(post) =>
              generateFromPotentialMutation.mutate({ post })
            }
            isGenerating={generateFromPotentialMutation.isLoading}
            generatingPostId={generatingPotential}
            highlightedPostId={
              activeSubTab === "viral" ? highlightedItemId : null
            }
          />
        </TabsContent>
        <TabsContent value="audience" className="hidden">
          <AudienceInsightsTab
            insights={audienceInsights}
            onFeedback={(p, feedbackType) => {
              if (feedbackType === "love" || feedbackType === "like") {
                setPostedInfo({ post: p, type: feedbackType });
              } else {
                setFeedbackInfo({ post: p, type: feedbackType });
              }
            }}
            highlightedPersonaId={null}
            onRefresh={unifiedRefresh}
          />
        </TabsContent>
        <TabsContent value="saved" className="mt-4">
          <SavedInsightsTab
            savedInsights={savedInsights || []}
            onRemove={(insightId) =>
              removeSavedInsightMutation.mutate({ id: insightId })
            }
            isRemoving={removeSavedInsightMutation.isLoading}
            onGenerate={(insight) => {
              if (insight.type === "trending_topic") {
                generateFromTopicMutation.mutate({
                  topic: insight.data,
                  format: "post",
                });
              } else if (insight.type === "viral_potential") {
                generateFromPotentialMutation.mutate({ post: insight.data });
              }
            }}
            isGenerating={
              generateFromTopicMutation.isLoading ||
              generateFromPotentialMutation.isLoading
            }
          />
        </TabsContent>
      </Tabs>
      {feedbackInfo && (
        <FeedbackDialog
          isOpen={!!feedbackInfo}
          onOpenChange={(isOpen) => !isOpen && setFeedbackInfo(null)}
          feedbackType={feedbackInfo.type}
          onSubmit={(feedbackData) => {
            submitFeedbackMutation.mutate({
              recommendationId: feedbackInfo.post.id,
              source: "viral-potential",
              feedbackType: feedbackInfo.type,
              ...feedbackData,
            });
            setFeedbackInfo(null);
          }}
        />
      )}
      {postedInfo && (
        <IPostedThisDialog
          isOpen={!!postedInfo}
          onOpenChange={(isOpen) => !isOpen && setPostedInfo(null)}
          post={postedInfo.post}
          onSubmit={() => {
            submitFeedbackMutation.mutate({
              recommendationId: postedInfo.post.id,
              source: "viral-potential",
              feedbackType: postedInfo.type,
            });
            setPostedInfo(null);
          }}
        />
      )}
    </div>
  );
}

function ViralThreadsTab({
  onContentGenerated,
}: {
  onContentGenerated: () => void;
}) {
  const safeJsonParse = (str: string | null): any => {
    if (!str) return null;
    try {
      return JSON.parse(str);
    } catch (e) {
      console.error("Failed to parse JSON string:", str, e);
      return null;
    }
  };

  const [source, setSource] = useState("");
  const [targetAudience, setTargetAudience] = useState("");
  const [contentTone, setContentTone] = useState("Educational");
  const [toneTouched, setToneTouched] = useState(false);
  const [audienceTouched, setAudienceTouched] = useState(false);
  const [inputMode, setInputMode] = useState<"TEXT" | "FILE">("TEXT");
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [fileBase64, setFileBase64] = useState<string | null>(null);
  const [fileName, setFileName] = useState<string>("");
  const [targetPlatform, setTargetPlatform] = useState<string>("twitter");
  const [selectedThreadId, setSelectedThreadId] = useState<string | null>(null);

  const [showInsights, setShowInsights] = useState(false);
  const [showAnalytics, setShowAnalytics] = useState(false);

  const queryClient = useQueryClient();
  const { toast } = useToast();

  const saveThreadMutation = useMutation(apiClient.saveViralThreadAsContent, {
    onSuccess: (data) => {
      toast({
        title: "Thread Saved!",
        description: `"${data.title}" has been added to your content library.`,
      });
      onContentGenerated();
      setSelectedThreadId(null); // Close the detail view
    },
    onError: (error) => {
      toast({
        title: "Failed to save thread",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState<"createdAt" | "engagementScore">(
    "createdAt",
  );
  const [filterByPattern, setFilterByPattern] = useState("");
  const [isEditing, setIsEditing] = useState(false);
  const [editedTitle, setEditedTitle] = useState("");
  const [editedTweets, setEditedTweets] = useState<{ content: string }[]>([]);
  const [selectedThreadIds, setSelectedThreadIds] = useState<string[]>([]);
  const [selectedTagIds, setSelectedTagIds] = useState<string[]>([]);

  const { data: tags } = useQuery({
    queryKey: ["viralThreadTags"],
    queryFn: apiClient.listViralThreadTags,
  });

  // Enhanced SocialSpark AI queries
  const { data: smartSuggestions } = useQuery({
    queryKey: ["smartContentSuggestions"],
    queryFn: () => apiClient.getSmartContentSuggestions(),
    staleTime: 300000, // 5 minutes
  });

  const { data: brandVoiceProfile } = useQuery({
    queryKey: ["brandVoiceProfile"],
    queryFn: apiClient.getUserBrandVoiceProfile,
    staleTime: 600000, // 10 minutes
  });

  const { brandContext, brandGuidelines } = useBrandContext();

  // Prefer brand guidelines for default tone (brand persona) on first load
  useEffect(() => {
    if (toneTouched) return;

    const tones = (brandGuidelines as any)?.tonePriorities as
      | string[]
      | undefined;
    const brandVoice = (brandGuidelines as any)?.brandVoice as
      | string
      | undefined;

    const mapToTone = (raw: string) => {
      const t = raw.toLowerCase();
      if (t.includes("professional")) return "Professional";
      if (
        t.includes("educat") ||
        t.includes("informative") ||
        t.includes("tutorial")
      )
        return "Educational";
      if (t.includes("inspir") || t.includes("motiv")) return "Inspirational";
      if (
        t.includes("humor") ||
        t.includes("fun") ||
        t.includes("playful") ||
        t.includes("witty")
      )
        return "Humorous";
      if (
        t.includes("casual") ||
        t.includes("friendly") ||
        t.includes("conversational") ||
        t.includes("relaxed")
      )
        return "Casual";
      return "Professional";
    };

    if (Array.isArray(tones) && tones.length > 0) {
      setContentTone(mapToTone(tones[0]!));
      return;
    }
    if (brandVoice) {
      setContentTone(mapToTone(brandVoice));
    }
  }, [brandGuidelines, toneTouched]);

  const { data: advancedInsights } = useQuery({
    queryKey: ["advancedInsights"],
    queryFn: () => apiClient.getAdvancedInsights(),
    staleTime: 600000,
  });

  useEffect(() => {
    if (toneTouched) return;
    // If brand guidelines already define tone/voice, don't override with profile
    if (
      brandGuidelines &&
      (((brandGuidelines as any).tonePriorities?.length ?? 0) > 0 ||
        (brandGuidelines as any).brandVoice)
    ) {
      return;
    }

    const rawTone = (brandVoiceProfile as any)?.voiceCharacteristics?.tone as
      | string
      | undefined;
    if (!rawTone) return;

    const mapToTone = (raw: string) => {
      const t = raw.toLowerCase();
      if (t.includes("professional")) return "Professional";
      if (
        t.includes("educat") ||
        t.includes("informative") ||
        t.includes("tutorial")
      )
        return "Educational";
      if (t.includes("inspir") || t.includes("motiv")) return "Inspirational";
      if (
        t.includes("humor") ||
        t.includes("fun") ||
        t.includes("playful") ||
        t.includes("witty")
      )
        return "Humorous";
      if (
        t.includes("casual") ||
        t.includes("friendly") ||
        t.includes("conversational") ||
        t.includes("relaxed")
      )
        return "Casual";
      return "Professional";
    };

    setContentTone(mapToTone(rawTone));
  }, [brandVoiceProfile, toneTouched, brandGuidelines]);

  useEffect(() => {
    if (audienceTouched || targetAudience) return;
    const ta: any = (brandContext as any)?.targetAudience;
    if (!ta) return;
    let candidate = "";
    if (typeof ta === "string") candidate = ta;
    else if (typeof ta === "object") {
      candidate = ta.summary || ta.primary || ta.name || "";
      if (!candidate && Array.isArray(ta.personas) && ta.personas.length > 0) {
        candidate = ta.personas[0]?.personaName || ta.personas[0]?.name || "";
      }
    }
    if (candidate) setTargetAudience(candidate);
  }, [brandContext, audienceTouched, targetAudience]);

  useEffect(() => {
    if (audienceTouched || targetAudience) return;
    const personas: any[] =
      (advancedInsights as any)?.audienceInsights?.personas || [];
    if (Array.isArray(personas) && personas.length > 0) {
      const name = personas[0]?.personaName || personas[0]?.name;
      if (name) setTargetAudience(name);
    }
  }, [advancedInsights, audienceTouched, targetAudience]);

  const { data: viralPatterns } = useQuery({
    queryKey: ["viralPatterns"],
    queryFn: apiClient.getViralPatterns,
    staleTime: 600000, // 10 minutes
  });

  const { data: contentStudioAnalytics } = useQuery({
    queryKey: ["contentStudioAnalytics"],
    queryFn: () => apiClient.getContentStudioAnalytics({ timeframe: "30d" }),
    staleTime: 600000, // 10 minutes
  });

  const { data: contentStudioInsights } = useQuery({
    queryKey: ["contentStudioInsights"],
    queryFn: () => apiClient.getContentStudioInsights(),
    staleTime: 600000, // 10 minutes
  });

  // Enhanced performance analytics queries
  const { data: contentStudioDashboard } = useQuery({
    queryKey: ["contentStudioDashboard"],
    queryFn: () => apiClient.getContentStudioDashboard(),
    staleTime: 600000, // 10 minutes
  });

  const { data: realTimeMetrics } = useQuery({
    queryKey: ["realTimePerformanceMetrics"],
    queryFn: () => apiClient.getRealTimePerformanceMetrics(),
    staleTime: 300000, // 5 minutes
    refetchInterval: false, // Disable auto-refresh to prevent constant refreshing
  });

  const { data: recommendationAnalytics } = useQuery({
    queryKey: ["recommendationAnalytics"],
    queryFn: () => apiClient.getRecommendationAnalytics(),
    staleTime: 600000, // 10 minutes
  });

  const { data: optimizationInsights } = useQuery({
    queryKey: ["optimizationInsights"],
    queryFn: () => apiClient.getAdvancedOptimizationInsights(),
    staleTime: 600000, // 10 minutes
  });

  // Brand context display helpers
  const personaLabel =
    ((brandGuidelines as any)?.personaName as string | undefined) ||
    ((brandContext as any)?.persona?.name as string | undefined) ||
    ((brandContext as any)?.brandPersona?.name as string | undefined) ||
    ((brandGuidelines as any)?.brandVoice as string | undefined) ||
    "";
  const toneList = Array.isArray((brandGuidelines as any)?.tonePriorities)
    ? ((brandGuidelines as any)?.tonePriorities as string[]).slice(0, 3)
    : [];
  const phrasesToUse = Array.isArray((brandGuidelines as any)?.phrasesToUse)
    ? ((brandGuidelines as any)?.phrasesToUse as string[]).slice(0, 3)
    : [];
  const phrasesToAvoid = Array.isArray((brandGuidelines as any)?.phrasesToAvoid)
    ? ((brandGuidelines as any)?.phrasesToAvoid as string[]).slice(0, 3)
    : [];

  // Repurpose state
  type RepurposeThreadInput = inferRPCInputType<"repurposeOnBrandThread">;
  const [repurposeState, setRepurposeState] = useState<{
    thread: any | null;
    taskId: string | null;
    platform: string | null;
    isDialogOpen: boolean;
  }>({
    thread: null,
    taskId: null,
    platform: null,
    isDialogOpen: false,
  });

  const [schedulingThread, setSchedulingThread] = useState<any | null>(null);

  const schedulePostMutation = useMutation({
    mutationFn: apiClient.schedulePost,
    onSuccess: () => {
      toast({ title: "Thread scheduled successfully!" });
      setSchedulingThread(null);
      queryClient.invalidateQueries({
        queryKey: queryKeys.scheduledPosts(),
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to schedule thread",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const rippleGenerate = useMutation(apiClient.generateContentWithRipple, {
    onSuccess: () => {
      toast({
        title: "Ripple is creating",
        description: "Your draft will appear in Generated Content shortly.",
      });
      queryClient.invalidateQueries(queryKeys.generatedContent());
    },
    onError: (error) => {
      toast({
        title: "Ripple failed to start",
        description:
          error instanceof Error ? error.message : "Please try again.",
        variant: "destructive",
      });
    },
  });

  const repurposeMutation = useMutation({
    mutationFn: apiClient.repurposeOnBrandThread,
    onSuccess: (data, variables: RepurposeThreadInput) => {
      setRepurposeState((prev) => ({
        ...prev,
        taskId: data.taskId,
        platform: variables.platform,
        isDialogOpen: false,
      }));
      toast({ title: "Repurposing started!" });
    },
    onError: (error) => {
      toast({
        title: "Failed to start repurposing",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const { data: repurposeStatus } = useQuery({
    queryKey: ["repurposeStatus", repurposeState.taskId],
    queryFn: () => {
      if (
        !repurposeState.taskId ||
        !repurposeState.thread?.id ||
        !repurposeState.platform
      ) {
        return Promise.resolve(null);
      }
      return apiClient.getRepurposeResults({
        taskId: repurposeState.taskId,
        threadId: repurposeState.thread.id,
        platform: repurposeState.platform,
      });
    },
    enabled: !!repurposeState.taskId,
    refetchInterval: (data: any) => {
      if (!data) return false;
      return data.status === "PENDING" || data.status === "GENERATING"
        ? 2000
        : false;
    },
  });

  useEffect(() => {
    if (repurposeStatus?.status === "COMPLETED") {
      toast({ title: "Content repurposed and added to library!" });
      queryClient.invalidateQueries({
        queryKey: queryKeys.contentPillars(),
      });
      queryClient.invalidateQueries({
        queryKey: queryKeys.generatedContent(),
      });
      if (repurposeStatus.newContentId) {
        onContentGenerated();
      }
      setRepurposeState((prev) => ({ ...prev, taskId: null }));
    } else if (repurposeStatus?.status === "FAILED") {
      toast({
        title: "Repurposing failed",
        variant: "destructive",
      });
      setRepurposeState((prev) => ({ ...prev, taskId: null }));
    }
  }, [repurposeStatus, toast, queryClient, onContentGenerated]);

  const { mutate: hideThread } = useMutation({
    mutationFn: apiClient.hideViralThread,
    onSuccess: () => {
      toast({ title: "Thread archived" });
      queryClient.invalidateQueries({
        queryKey: queryKeys.viralThreads(),
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to archive thread",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const bulkHideMutation = useMutation(apiClient.bulkHideViralThreads, {
    onSuccess: (data) => {
      toast({ title: `${data.count} threads archived` });
      setSelectedThreadIds([]);
      queryClient.invalidateQueries(queryKeys.viralThreads());
    },
    onError: (error) => {
      toast({
        title: "Failed to archive threads",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const handleBulkHide = () => {
    if (selectedThreadIds.length > 0) {
      bulkHideMutation.mutate({ threadIds: selectedThreadIds });
    }
  };

  const updateThreadMutation = useMutation(apiClient.updateViralThread, {
    onSuccess: () => {
      toast({ title: "Thread updated successfully!" });
      queryClient.invalidateQueries(queryKeys.viralThreads());
      queryClient.invalidateQueries(
        queryKeys.viralThread(selectedThreadId ?? ""),
      );
      setIsEditing(false);
    },
    onError: (error) => {
      toast({
        title: "Failed to update thread",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const handleSaveChanges = () => {
    if (selectedThreadId) {
      updateThreadMutation.mutate({
        threadId: selectedThreadId,
        title: editedTitle,
        tweets: editedTweets,
      });
    }
  };

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
    }, 500);

    return () => clearTimeout(timer);
  }, [searchTerm]);

  const { data: threadsData, isLoading: isLoadingThreads } = useQuery({
    queryKey: [
      "viralThreads",
      debouncedSearchTerm,
      sortBy,
      filterByPattern,
      selectedTagIds,
    ],
    queryFn: () =>
      apiClient.listViralThreads({
        searchTerm: debouncedSearchTerm,
        sortBy: sortBy,
        filterByPattern: filterByPattern,
        tagIds: selectedTagIds,
      }),
    // Disable automatic refresh to prevent dashboard refreshing
    refetchInterval: false,
    refetchOnWindowFocus: false,
    staleTime: 300000, // 5 minutes (increased from 30 seconds)
    cacheTime: 600000, // 10 minutes
  });

  const {
    mutate: generateThread,
    isLoading: isGenerating,
    data: generationTask,
  } = useMutation(apiClient.generateOnBrandThread, {
    onSuccess: (result) => {
      // Check if this is an upgrade flow response
      if (
        result &&
        "upgradeRequired" in result &&
        (result as any).upgradeRequired
      ) {
        toast({
          title: "Premium Feature",
          description:
            (result as any).message ||
            "This feature requires a premium subscription.",
          action: (
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                if ((result as any).upgradeUrl) {
                  window.open((result as any).upgradeUrl, "_blank");
                } else {
                  // Fallback to settings page
                  window.location.href = "/settings";
                }
              }}
            >
              Upgrade
            </Button>
          ),
        });
        return;
      }

      toast({
        title: "Thread generation started!",
        description:
          "Your thread is being generated and will appear below shortly.",
      });
      queryClient.invalidateQueries(queryKeys.viralThreads());
    },
    onError: (error) => {
      const errorMessage =
        error instanceof Error ? error.message : "An unknown error occurred.";

      toast({
        title: "Generation Failed",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  const { data: generationStatus } = useQuery(
    ["viralThreadStatus", (generationTask as any)?.taskId],
    () =>
      apiClient.getViralThreadStatus({
        taskId: (generationTask as any)!.taskId,
      }),
    {
      enabled: !!(generationTask as any)?.taskId,
      refetchInterval: (data: any) =>
        data?.status === "PENDING" || data?.status === "GENERATING"
          ? 2000
          : false,
      onSuccess: (data: any) => {
        if (data.status === "COMPLETED" || data.status === "FAILED") {
          queryClient.invalidateQueries(queryKeys.viralThreads());
        }
      },
    },
  );

  const { data: selectedThread, isLoading: isLoadingSelectedThread } = useQuery(
    ["viralThread", selectedThreadId],
    () => apiClient.getViralThread({ threadId: selectedThreadId! }),
    {
      enabled: !!selectedThreadId,
      onSuccess: (data) => {
        if (data) {
          setEditedTitle((data as any).title || "");
          setEditedTweets((data as any).tweets || []);
        }
      },
    },
  );

  const { data: formatInsights, isFetching: isFetchingFormatInsights } =
    useQuery(
      ["threadFormatInsights", selectedThreadId],
      () => apiClient.getThreadFormatInsights({ threadId: selectedThreadId! }),
      { enabled: !!selectedThreadId },
    );

  const psychologicalTriggers = selectedThread
    ? safeJsonParse((selectedThread as any).psychologicalTriggers)
    : null;
  const optimizationSuggestions = selectedThread
    ? safeJsonParse((selectedThread as any).optimizationSuggestions)
    : null;

  const handleGenerate = () => {
    const payload: any = {
      platform: targetPlatform,
      targetAudience: targetAudience || undefined,
      contentTone: contentTone || undefined,
    };
    if (inputMode === "TEXT") {
      payload.source = source;
    } else if (inputMode === "FILE" && fileBase64) {
      payload.fileBase64 = fileBase64;
      payload.fileName = fileName || selectedFile?.name || "content.txt";
    }
    generateThread(payload);
  };

  const handleUseSuggestion = (suggestion: any) => {
    setSource(suggestion.title || suggestion.content || suggestion.idea);
    if (suggestion.targetAudience) {
      setTargetAudience(suggestion.targetAudience);
    }
    if (suggestion.tone) {
      setContentTone(suggestion.tone);
    }
  };

  return (
    <>
      {/* Content Lab Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-6"
      >
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent">
              Generate & Repurpose
            </h2>
            <p className="text-muted-foreground mt-1">
              On-brand thread creation and one-tap repurposing
            </p>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant={showInsights ? "default" : "outline"}
              size="sm"
              onClick={() => setShowInsights(!showInsights)}
            >
              <Brain className="h-4 w-4 mr-2" />
              Insights
            </Button>
            <Button
              variant={showAnalytics ? "default" : "outline"}
              size="sm"
              onClick={() => setShowAnalytics(!showAnalytics)}
            >
              <BarChart3 className="h-4 w-4 mr-2" />
              Analytics
            </Button>
          </div>
        </div>
      </motion.div>

      {/* Brand Context Bar */}
      <motion.div
        initial={{ opacity: 0, y: -8 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-4"
      >
        <div className="flex flex-wrap items-center gap-2 p-3 rounded-lg border bg-muted/30">
          <Badge variant="secondary">Brand Context</Badge>
          <div className="text-xs sm:text-sm">
            <span className="text-muted-foreground">Persona:</span>{" "}
            {personaLabel || "Your brand"}
          </div>
          <div className="text-xs sm:text-sm">
            <span className="text-muted-foreground">Tone:</span> {contentTone}
          </div>
          <div className="text-xs sm:text-sm">
            <span className="text-muted-foreground">Audience:</span>{" "}
            {targetAudience || "—"}
          </div>
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="ghost" size="sm" className="ml-auto h-8">
                Details
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-80">
              <div className="space-y-2">
                <div>
                  <p className="text-xs text-muted-foreground">
                    Tone Priorities
                  </p>
                  {toneList && toneList.length > 0 ? (
                    <div className="flex flex-wrap gap-1 mt-1">
                      {toneList.map((t: string, i: number) => (
                        <Badge key={i} variant="outline" className="text-xs">
                          {t}
                        </Badge>
                      ))}
                    </div>
                  ) : (
                    <p className="text-xs">No tone priorities set</p>
                  )}
                </div>
                {phrasesToUse && phrasesToUse.length > 0 && (
                  <div>
                    <p className="text-xs text-muted-foreground">
                      Phrases to Use
                    </p>
                    <ul className="list-disc list-inside text-xs">
                      {phrasesToUse.map((p: string, i: number) => (
                        <li key={i}>{p}</li>
                      ))}
                    </ul>
                  </div>
                )}
                {phrasesToAvoid && phrasesToAvoid.length > 0 && (
                  <div>
                    <p className="text-xs text-muted-foreground">
                      Phrases to Avoid
                    </p>
                    <ul className="list-disc list-inside text-xs">
                      {phrasesToAvoid.map((p: string, i: number) => (
                        <li key={i}>{p}</li>
                      ))}
                    </ul>
                  </div>
                )}
                <div className="pt-1">
                  <Button variant="link" className="px-0 h-6" asChild>
                    <a href="/settings">Edit Brand Guidelines</a>
                  </Button>
                </div>
              </div>
            </PopoverContent>
          </Popover>
        </div>
      </motion.div>

      {/* Insights Section */}
      {showInsights && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6"
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="h-5 w-5 text-primary" />
                AI Insights & Intelligence
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Smart Suggestions */}
                <Card className="lg:col-span-1">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Lightbulb className="h-5 w-5 text-yellow-500" />
                      Smart Suggestions
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {smartSuggestions?.contentOpportunities?.map(
                      (suggestion: any, index: number) => (
                        <div
                          key={index}
                          className="p-3 rounded-lg border border-border/50 hover:border-primary/50 cursor-pointer transition-colors"
                          onClick={() => handleUseSuggestion(suggestion)}
                        >
                          <p className="text-sm font-medium">
                            {suggestion.title || suggestion.content}
                          </p>
                          {suggestion.engagement && (
                            <Badge variant="secondary" className="mt-2">
                              {suggestion.engagement}% engagement
                            </Badge>
                          )}
                        </div>
                      ),
                    ) || (
                      <p className="text-sm text-muted-foreground">
                        Loading suggestions...
                      </p>
                    )}
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardTitle>Brand Voice Profile</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {brandVoiceProfile ? (
                      <div className="space-y-3">
                        <div>
                          <p className="text-sm font-medium">Tone</p>
                          <p className="text-sm text-muted-foreground">
                            {(brandVoiceProfile.voiceCharacteristics as any)
                              ?.tone || "Professional"}
                          </p>
                        </div>
                        <div>
                          <p className="text-sm font-medium">Style</p>
                          <p className="text-sm text-muted-foreground">
                            {(brandVoiceProfile.writingPatterns as any)
                              ?.style || "Engaging"}
                          </p>
                        </div>
                        {(brandVoiceProfile.topicPreferences as any)
                          ?.keywords && (
                          <div>
                            <p className="text-sm font-medium mb-2">
                              Key Themes
                            </p>
                            <div className="flex flex-wrap gap-1">
                              {(
                                (brandVoiceProfile.topicPreferences as any)
                                  ?.keywords || []
                              )
                                .slice(0, 5)
                                .map((keyword: string, i: number) => (
                                  <Badge key={i} variant="outline">
                                    {keyword}
                                  </Badge>
                                ))}
                            </div>
                          </div>
                        )}
                      </div>
                    ) : (
                      <p className="text-sm text-muted-foreground">
                        Loading brand voice profile...
                      </p>
                    )}
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Viral Patterns</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {viralPatterns ? (
                      <div className="space-y-3">
                        {viralPatterns &&
                          "personalViralPatterns" in viralPatterns &&
                          viralPatterns.personalViralPatterns
                            ?.slice(0, 3)
                            .map((pattern: any, i: number) => (
                              <div
                                key={i}
                                className="p-3 rounded-lg bg-muted/50"
                              >
                                <div className="flex justify-between items-center">
                                  <p className="text-sm font-medium">
                                    {pattern.patternName}
                                  </p>
                                  <Badge variant="secondary">
                                    {pattern.successRate}%
                                  </Badge>
                                </div>
                                <p className="text-xs text-muted-foreground mt-1">
                                  {pattern.description}
                                </p>
                              </div>
                            ))}
                      </div>
                    ) : (
                      <p className="text-sm text-muted-foreground">
                        Loading viral patterns...
                      </p>
                    )}
                  </CardContent>
                </Card>

                <Card className="lg:col-span-2">
                  <CardHeader>
                    <CardTitle>Creation Insights</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {contentStudioInsights ? (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {contentStudioInsights?.topPerformingThreads
                          ?.slice(0, 4)
                          .map((insight: any, i: number) => (
                            <div
                              key={i}
                              className="p-4 rounded-lg border border-border/50 hover:border-primary/50 transition-colors"
                            >
                              <h4 className="font-medium text-sm">
                                {insight.threadContent || "Performance Insight"}
                              </h4>
                              <p className="text-xs text-muted-foreground mt-1">
                                {insight.performanceMetrics ||
                                  "No description available"}
                              </p>
                              {insight.viralScore && (
                                <Badge variant="outline" className="mt-2">
                                  {insight.viralScore}% viral score
                                </Badge>
                              )}
                            </div>
                          ))}
                      </div>
                    ) : (
                      <p className="text-sm text-muted-foreground">
                        Loading insights...
                      </p>
                    )}
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* Analytics Section */}
      {showAnalytics && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6"
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5 text-primary" />
                Advanced Analytics
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Real-time Performance Metrics */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"
                >
                  <Card className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/20 dark:to-blue-900/20 border-blue-200 dark:border-blue-800">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-blue-700 dark:text-blue-300">
                            Total Content
                          </p>
                          <p className="text-2xl font-bold text-blue-900 dark:text-blue-100">
                            {realTimeMetrics?.current?.totalContent ||
                              contentStudioAnalytics?.summary?.totalPosts ||
                              0}
                          </p>
                        </div>
                        <div className="p-2 bg-blue-100 dark:bg-blue-900/50 rounded-full">
                          <FileText className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                        </div>
                      </div>
                      <div className="mt-2 flex items-center text-xs">
                        <TrendingUp className="h-3 w-3 mr-1 text-green-600" />
                        <span className="text-green-600 font-medium">
                          +
                          {realTimeMetrics?.trends?.performanceChange?.toFixed(
                            1,
                          ) || "12"}
                          %
                        </span>
                        <span className="text-muted-foreground ml-1">
                          vs last month
                        </span>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/20 dark:to-green-900/20 border-green-200 dark:border-green-800">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-green-700 dark:text-green-300">
                            Avg Engagement
                          </p>
                          <p className="text-2xl font-bold text-green-900 dark:text-green-100">
                            {Math.round(
                              realTimeMetrics?.current?.averageScore ||
                                contentStudioAnalytics?.summary
                                  ?.avgEngagementRate ||
                                0,
                            )}
                            %
                          </p>
                        </div>
                        <div className="p-2 bg-green-100 dark:bg-green-900/50 rounded-full">
                          <Heart className="h-5 w-5 text-green-600 dark:text-green-400" />
                        </div>
                      </div>
                      <div className="mt-2 flex items-center text-xs">
                        <TrendingUp className="h-3 w-3 mr-1 text-green-600" />
                        <span className="text-green-600 font-medium">
                          +
                          {realTimeMetrics?.trends?.performanceChange?.toFixed(
                            1,
                          ) || "8"}
                          %
                        </span>
                        <span className="text-muted-foreground ml-1">
                          this week
                        </span>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/20 dark:to-purple-900/20 border-purple-200 dark:border-purple-800">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-purple-700 dark:text-purple-300">
                            Viral Score
                          </p>
                          <p className="text-2xl font-bold text-purple-900 dark:text-purple-100">
                            {Math.round(
                              realTimeMetrics?.current?.averageScore ||
                                contentStudioDashboard?.overview?.viralScore ||
                                0,
                            )}
                          </p>
                        </div>
                        <div className="p-2 bg-purple-100 dark:bg-purple-900/50 rounded-full">
                          <Zap className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                        </div>
                      </div>
                      <div className="mt-2 flex items-center text-xs">
                        <TrendingUp className="h-3 w-3 mr-1 text-purple-600" />
                        <span className="text-purple-600 font-medium">
                          High potential
                        </span>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/20 dark:to-orange-900/20 border-orange-200 dark:border-orange-800">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-orange-700 dark:text-orange-300">
                            Optimization
                          </p>
                          <p className="text-2xl font-bold text-orange-900 dark:text-orange-100">
                            {Math.round(
                              realTimeMetrics?.insights?.consistencyScore ||
                                contentStudioDashboard?.overview
                                  ?.avgEngagementRate ||
                                0,
                            )}
                            %
                          </p>
                        </div>
                        <div className="p-2 bg-orange-100 dark:bg-orange-900/50 rounded-full">
                          <Target className="h-5 w-5 text-orange-600 dark:text-orange-400" />
                        </div>
                      </div>
                      <div className="mt-2 flex items-center text-xs">
                        <TrendingUp className="h-3 w-3 mr-1 text-orange-600" />
                        <span className="text-orange-600 font-medium">
                          Improving
                        </span>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>

                {/* Advanced Analytics Grid */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Performance Insights */}
                  <Card className="lg:col-span-1">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <BarChart3 className="h-5 w-5 text-primary" />
                        Performance Insights
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {optimizationInsights ? (
                        <div className="space-y-4">
                          {optimizationInsights.actionableRecommendations
                            ?.slice(0, 4)
                            .map((insight: any, i: number) => (
                              <motion.div
                                key={i}
                                initial={{ opacity: 0, x: -20 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: i * 0.1 }}
                                className="p-3 rounded-lg border border-border/50 hover:border-primary/30 transition-colors"
                              >
                                <div className="flex items-start justify-between">
                                  <div className="flex-1">
                                    <p className="text-sm font-medium">
                                      {insight.title ||
                                        insight.category ||
                                        "Performance Insight"}
                                    </p>
                                    <p className="text-xs text-muted-foreground mt-1">
                                      {insight.description ||
                                        insight.insight ||
                                        "Detailed analytics insight"}
                                    </p>
                                  </div>
                                  <Badge
                                    variant={
                                      insight.impact === "high"
                                        ? "default"
                                        : "secondary"
                                    }
                                    className="text-xs"
                                  >
                                    {insight.impact || "Medium"} impact
                                  </Badge>
                                </div>
                                {insight.recommendation && (
                                  <div className="mt-2 p-2 bg-muted/30 rounded text-xs">
                                    💡 {insight.recommendation}
                                  </div>
                                )}
                              </motion.div>
                            )) || (
                            <div className="space-y-3">
                              <div className="p-3 rounded-lg border border-border/50">
                                <div className="flex items-start justify-between">
                                  <div className="flex-1">
                                    <p className="text-sm font-medium">
                                      Content Length Optimization
                                    </p>
                                    <p className="text-xs text-muted-foreground mt-1">
                                      Your threads perform best at 280-450
                                      characters per tweet
                                    </p>
                                  </div>
                                  <Badge variant="default" className="text-xs">
                                    High impact
                                  </Badge>
                                </div>
                              </div>
                              <div className="p-3 rounded-lg border border-border/50">
                                <div className="flex items-start justify-between">
                                  <div className="flex-1">
                                    <p className="text-sm font-medium">
                                      Posting Time Analysis
                                    </p>
                                    <p className="text-xs text-muted-foreground mt-1">
                                      Peak engagement occurs between 2-4 PM on
                                      weekdays
                                    </p>
                                  </div>
                                  <Badge
                                    variant="secondary"
                                    className="text-xs"
                                  >
                                    Medium impact
                                  </Badge>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="flex items-center justify-center py-8">
                          <div className="text-center">
                            <BarChart3 className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
                            <p className="text-sm text-muted-foreground">
                              Loading insights...
                            </p>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  {/* Recommendation Analytics */}
                  <Card className="lg:col-span-1">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Brain className="h-5 w-5 text-primary" />
                        AI Recommendations
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {recommendationAnalytics ? (
                        <div className="space-y-4">
                          <div className="grid grid-cols-2 gap-4">
                            <div className="text-center p-3 rounded-lg bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/20 dark:to-blue-900/20">
                              <p className="text-lg font-bold text-blue-900 dark:text-blue-100">
                                {Math.round(
                                  recommendationAnalytics.performanceScore || 0,
                                )}
                                %
                              </p>
                              <p className="text-xs text-blue-700 dark:text-blue-300">
                                Accuracy Rate
                              </p>
                            </div>
                            <div className="text-center p-3 rounded-lg bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/20 dark:to-green-900/20">
                              <p className="text-lg font-bold text-green-900 dark:text-green-100">
                                {recommendationAnalytics.totalRecommendations ||
                                  0}
                              </p>
                              <p className="text-xs text-green-700 dark:text-green-300">
                                Suggestions Given
                              </p>
                            </div>
                          </div>

                          {recommendationAnalytics.totalRecommendations > 0
                            ? ["Top Performing Content"]
                            : []?.slice(0, 3).map((rec: any, i: number) => (
                                <motion.div
                                  key={i}
                                  initial={{ opacity: 0, y: 10 }}
                                  animate={{ opacity: 1, y: 0 }}
                                  transition={{ delay: i * 0.1 }}
                                  className="p-3 rounded-lg bg-muted/30 border border-border/30"
                                >
                                  <div className="flex items-center justify-between">
                                    <p className="text-sm font-medium">
                                      {rec.recommendationType ||
                                        "Content Suggestion"}
                                    </p>
                                    <Badge
                                      variant="outline"
                                      className="text-xs"
                                    >
                                      {Math.round(rec.successRate || 0)}%
                                      success
                                    </Badge>
                                  </div>
                                  <p className="text-xs text-muted-foreground mt-1">
                                    {rec.description ||
                                      "High-performing recommendation type"}
                                  </p>
                                </motion.div>
                              )) || (
                                <div className="space-y-3">
                                  <div className="p-3 rounded-lg bg-muted/30 border border-border/30">
                                    <div className="flex items-center justify-between">
                                      <p className="text-sm font-medium">
                                        Topic Suggestions
                                      </p>
                                      <Badge
                                        variant="outline"
                                        className="text-xs"
                                      >
                                        89% success
                                      </Badge>
                                    </div>
                                    <p className="text-xs text-muted-foreground mt-1">
                                      Trending topic recommendations with high
                                      engagement
                                    </p>
                                  </div>
                                  <div className="p-3 rounded-lg bg-muted/30 border border-border/30">
                                    <div className="flex items-center justify-between">
                                      <p className="text-sm font-medium">
                                        Format Optimization
                                      </p>
                                      <Badge
                                        variant="outline"
                                        className="text-xs"
                                      >
                                        76% success
                                      </Badge>
                                    </div>
                                    <p className="text-xs text-muted-foreground mt-1">
                                      Thread structure and formatting
                                      improvements
                                    </p>
                                  </div>
                                </div>
                              )}
                        </div>
                      ) : (
                        <div className="flex items-center justify-center py-8">
                          <div className="text-center">
                            <Brain className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
                            <p className="text-sm text-muted-foreground">
                              Loading recommendations...
                            </p>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>

                {/* Advanced Dashboard Data */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Activity className="h-5 w-5 text-primary" />
                      Creation Dashboard
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {contentStudioDashboard ? (
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {/* Performance Trends */}
                        <div className="space-y-3">
                          <h4 className="font-medium text-sm flex items-center gap-2">
                            <TrendingUp className="h-4 w-4 text-green-600" />
                            Performance Trends
                          </h4>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center p-2 rounded bg-muted/30">
                              <span className="text-sm">Best Platform</span>
                              <Badge variant="outline">
                                {contentStudioDashboard.performance?.insights
                                  ?.bestPerformingTime || "Twitter"}
                              </Badge>
                            </div>
                            <div className="flex justify-between items-center p-2 rounded bg-muted/30">
                              <span className="text-sm">Peak Hour</span>
                              <Badge variant="outline">
                                {contentStudioDashboard.performance?.insights
                                  ?.bestPerformingTime || "3 PM"}
                              </Badge>
                            </div>
                            <div className="flex justify-between items-center p-2 rounded bg-muted/30">
                              <span className="text-sm">Consistency</span>
                              <Badge variant="outline">
                                {Math.round(
                                  contentStudioDashboard.overview
                                    ?.avgEngagementRate || 0,
                                )}
                                %
                              </Badge>
                            </div>
                          </div>
                        </div>

                        {/* Optimization Opportunities */}
                        <div className="space-y-3">
                          <h4 className="font-medium text-sm flex items-center gap-2">
                            <Target className="h-4 w-4 text-orange-600" />
                            Optimization Opportunities
                          </h4>
                          <div className="space-y-2">
                            {contentStudioDashboard.viralIntelligence?.opportunities
                              ?.slice(0, 3)
                              .map((opp: any, i: number) => (
                                <div
                                  key={i}
                                  className="p-2 rounded bg-muted/30 border-l-2 border-orange-500"
                                >
                                  <p className="text-sm font-medium">
                                    {opp.area || "Content Structure"}
                                  </p>
                                  <p className="text-xs text-muted-foreground">
                                    {opp.suggestion ||
                                      "Improve thread flow and engagement"}
                                  </p>
                                </div>
                              )) || (
                              <div className="space-y-2">
                                <div className="p-2 rounded bg-muted/30 border-l-2 border-orange-500">
                                  <p className="text-sm font-medium">
                                    Content Length
                                  </p>
                                  <p className="text-xs text-muted-foreground">
                                    Optimize thread length for better engagement
                                  </p>
                                </div>
                                <div className="p-2 rounded bg-muted/30 border-l-2 border-blue-500">
                                  <p className="text-sm font-medium">Timing</p>
                                  <p className="text-xs text-muted-foreground">
                                    Post during peak audience activity hours
                                  </p>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Recent Activity */}
                        <div className="space-y-3">
                          <h4 className="font-medium text-sm flex items-center gap-2">
                            <Clock className="h-4 w-4 text-blue-600" />
                            Recent Activity
                          </h4>
                          <div className="space-y-2">
                            {contentStudioDashboard.recommendations?.immediate
                              ?.slice(0, 3)
                              .map((activity: any, i: number) => (
                                <div
                                  key={i}
                                  className="p-2 rounded bg-muted/30"
                                >
                                  <p className="text-sm font-medium">
                                    {activity.action || "Content Generated"}
                                  </p>
                                  <p className="text-xs text-muted-foreground">
                                    {activity.timestamp
                                      ? new Date(
                                          activity.timestamp,
                                        ).toLocaleDateString()
                                      : "Recently"}
                                  </p>
                                </div>
                              )) || (
                              <div className="space-y-2">
                                <div className="p-2 rounded bg-muted/30">
                                  <p className="text-sm font-medium">
                                    Thread Generated
                                  </p>
                                  <p className="text-xs text-muted-foreground">
                                    Today
                                  </p>
                                </div>
                                <div className="p-2 rounded bg-muted/30">
                                  <p className="text-sm font-medium">
                                    Performance Analyzed
                                  </p>
                                  <p className="text-xs text-muted-foreground">
                                    Yesterday
                                  </p>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center py-12">
                        <div className="text-center">
                          <Activity className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                          <p className="text-sm text-muted-foreground mb-2">
                            Loading dashboard data...
                          </p>
                          <div className="flex items-center justify-center space-x-1">
                            <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
                            <div
                              className="w-2 h-2 bg-primary rounded-full animate-pulse"
                              style={{ animationDelay: "0.1s" }}
                            ></div>
                            <div
                              className="w-2 h-2 bg-primary rounded-full animate-pulse"
                              style={{ animationDelay: "0.2s" }}
                            ></div>
                          </div>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* Simple View or Thread List */}
      <div className="flex flex-col lg:grid lg:grid-cols-1 xl:grid-cols-3 gap-4 lg:gap-8">
        <div className="xl:col-span-1 order-2 lg:order-1">
          <Card>
            <CardHeader>
              <CardTitle>Universal Input</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-2">
                <Button
                  variant={inputMode === "TEXT" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setInputMode("TEXT")}
                >
                  Text/URL
                </Button>
                <Button
                  variant={inputMode === "FILE" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setInputMode("FILE")}
                >
                  File Upload
                </Button>
              </div>
              {inputMode === "TEXT" ? (
                <div>
                  <Label htmlFor="source">Enter a keyword, URL, or idea</Label>
                  <Textarea
                    id="source"
                    placeholder="e.g., AI automation, a YouTube/article/social post URL, or a simple idea..."
                    value={source}
                    onChange={(e) => setSource(e.target.value)}
                    className="min-h-[120px]"
                  />
                </div>
              ) : (
                <div className="space-y-2">
                  <Label htmlFor="file">Upload a source file</Label>
                  <Input
                    id="file"
                    type="file"
                    onChange={async (e) => {
                      const f = e.target.files?.[0] || null;
                      setSelectedFile(f);
                      if (f) {
                        const b64 = await encodeFileAsBase64DataURL(f);
                        setFileBase64(b64 || null);
                        setFileName(f.name);
                      } else {
                        setFileBase64(null);
                        setFileName("");
                      }
                    }}
                  />
                  {selectedFile && (
                    <p className="text-xs text-muted-foreground">
                      {selectedFile.name}
                    </p>
                  )}
                </div>
              )}

              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="audience">Target Audience</Label>
                    {(() => {
                      const personas: any[] =
                        (advancedInsights as any)?.audienceInsights?.personas ||
                        [];
                      if (!Array.isArray(personas) || personas.length === 0)
                        return null;
                      return (
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-8 px-2"
                            >
                              Personas
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent
                            align="end"
                            className="max-h-64 overflow-auto"
                          >
                            {personas.map((p: any) => (
                              <DropdownMenuItem
                                key={p.id ?? p.personaName ?? p.name}
                                onClick={() => {
                                  setTargetAudience(
                                    p.personaName || p.name || "",
                                  );
                                  setAudienceTouched(true);
                                }}
                              >
                                {p.personaName || p.name}
                              </DropdownMenuItem>
                            ))}
                          </DropdownMenuContent>
                        </DropdownMenu>
                      );
                    })()}
                  </div>
                  <Input
                    id="audience"
                    value={targetAudience}
                    onChange={(e) => {
                      setAudienceTouched(true);
                      setTargetAudience(e.target.value);
                    }}
                    placeholder="Entrepreneurs, creators, marketers"
                  />
                </div>
                <div>
                  <Label htmlFor="tone">Content Tone</Label>
                  <select
                    id="tone"
                    value={contentTone}
                    onChange={(e) => {
                      setToneTouched(true);
                      setContentTone(e.target.value);
                    }}
                    className="w-full p-3 border rounded-md bg-background min-h-[44px]"
                  >
                    <option>Educational</option>
                    <option>Inspirational</option>
                    <option>Humorous</option>
                    <option>Professional</option>
                    <option>Casual</option>
                  </select>
                </div>
                <div>
                  <Label htmlFor="platform">Target Platform</Label>
                  <select
                    id="platform"
                    value={targetPlatform}
                    onChange={(e) => setTargetPlatform(e.target.value)}
                    className="w-full p-3 border rounded-md bg-background min-h-[44px]"
                  >
                    <option value="twitter">Twitter/X</option>
                    <option value="linkedin">LinkedIn</option>
                    <option value="instagram">Instagram</option>
                    <option value="tiktok">TikTok</option>
                    <option value="youtube">YouTube</option>
                    <option value="facebook">Facebook</option>
                    <option value="pinterest">Pinterest</option>
                    <option value="reddit">Reddit</option>
                    <option value="medium">Medium</option>
                    <option value="blog">Blog</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                <Button
                  onClick={handleGenerate}
                  disabled={
                    isGenerating ||
                    (inputMode === "TEXT" ? !source : !fileBase64)
                  }
                  className="w-full h-12"
                >
                  {isGenerating ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Sparkles className="h-4 w-4 mr-2" />
                      Generate Content
                    </>
                  )}
                </Button>
                <Button
                  variant="outline"
                  onClick={() =>
                    rippleGenerate.mutate({
                      prompt:
                        inputMode === "TEXT"
                          ? source
                          : selectedFile?.name || "Uploaded file",
                      contentType: "TEXT",
                      format: "THREAD",
                    })
                  }
                  disabled={
                    rippleGenerate.isLoading ||
                    (inputMode === "TEXT" ? !source : !fileBase64)
                  }
                  className="w-full h-12"
                >
                  {rippleGenerate.isLoading ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      Asking Ripple...
                    </>
                  ) : (
                    <>
                      <Sparkles className="h-4 w-4 mr-2" />
                      Ask Ripple
                    </>
                  )}
                </Button>
              </div>
              <div className="flex items-center justify-between pt-1">
                <p className="text-xs text-muted-foreground">
                  On-brand: Content will follow your Brand Guidelines.
                </p>
                <Button variant="link" className="h-8 px-0" asChild>
                  <a href="/settings">Edit</a>
                </Button>
              </div>
              {generationStatus &&
                ((generationStatus as any).status === "PENDING" ||
                  (generationStatus as any).status === "GENERATING") && (
                  <div className="text-sm text-muted-foreground pt-2">
                    <p>Status: {(generationStatus as any).status}</p>
                  </div>
                )}
            </CardContent>{" "}
          </Card>
        </div>
        <div className="xl:col-span-2 order-1 lg:order-2">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5 text-primary" />
                    SocialWave Library
                  </CardTitle>
                  <p className="text-sm text-muted-foreground mt-1">
                    Threads created via SocialWave (on‑brand)
                  </p>
                </div>
                {threadsData && (threadsData as any).threads.length > 0 && (
                  <Badge variant="secondary" className="text-xs">
                    {(threadsData as any).threads.length} threads
                  </Badge>
                )}
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 md:space-y-4 mb-4">
                <Input
                  placeholder="Search threads..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full min-h-[44px]"
                />
                <div className="flex flex-col sm:flex-row gap-2 md:gap-3">
                  <select
                    value={sortBy}
                    onChange={(e) =>
                      setSortBy(
                        e.target.value as "createdAt" | "engagementScore",
                      )
                    }
                    className="p-2 md:p-3 border rounded-md bg-background min-h-[44px] text-sm md:text-base flex-1 sm:flex-none sm:min-w-[160px]"
                  >
                    <option value="createdAt">Sort by Date</option>
                    <option value="engagementScore">Sort by Engagement</option>
                  </select>
                  <Input
                    placeholder="Filter by pattern..."
                    value={filterByPattern}
                    onChange={(e) => setFilterByPattern(e.target.value)}
                    className="flex-1 sm:min-w-[160px] min-h-[44px]"
                  />
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="outline"
                        className="min-h-[44px] h-12 px-3 md:px-4 whitespace-nowrap text-sm md:text-base"
                      >
                        <Tag className="h-4 w-4 mr-2" />
                        <span className="hidden sm:inline">
                          Filter by Tag ({selectedTagIds.length} selected)
                        </span>
                        <span className="sm:hidden">
                          Tags ({selectedTagIds.length})
                        </span>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuLabel>Filter by Tags</DropdownMenuLabel>
                      <DropdownMenuSeparator />
                      {tags?.map((tag) => (
                        <DropdownMenuCheckboxItem
                          key={tag.id}
                          checked={selectedTagIds.includes(tag.id)}
                          onCheckedChange={(checked) => {
                            setSelectedTagIds((prev) =>
                              checked
                                ? [...prev, tag.id]
                                : prev.filter((id) => id !== tag.id),
                            );
                          }}
                        >
                          {tag.name}
                        </DropdownMenuCheckboxItem>
                      ))}
                      {tags && tags.length > 0 && <DropdownMenuSeparator />}
                      <div className="p-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="w-full justify-start"
                          onClick={() => setSelectedTagIds([])}
                        >
                          Clear selection
                        </Button>
                      </div>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>
              {isLoadingThreads ? (
                <LoadingSpinner />
              ) : threadsData && (threadsData as any).threads.length > 0 ? (
                <div className="space-y-4">
                  <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-3 border-b gap-3">
                    <div className="flex items-center gap-2">
                      <Checkbox
                        id="select-all-threads"
                        checked={
                          (threadsData as any).threads.length > 0 &&
                          selectedThreadIds.length ===
                            (threadsData as any).threads.length
                        }
                        onCheckedChange={(checked) => {
                          if (checked) {
                            setSelectedThreadIds(
                              (threadsData as any).threads.map(
                                (t: any) => t.id,
                              ),
                            );
                          } else {
                            setSelectedThreadIds([]);
                          }
                        }}
                      />
                      <Label
                        htmlFor="select-all-threads"
                        className="text-sm font-medium"
                      >
                        Select All
                      </Label>
                    </div>
                    {selectedThreadIds.length > 0 && (
                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={handleBulkHide}
                        disabled={bulkHideMutation.isLoading}
                        className="h-10 px-4"
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        <span className="hidden sm:inline">
                          Archive Selected ({selectedThreadIds.length})
                        </span>
                        <span className="sm:hidden">
                          Archive ({selectedThreadIds.length})
                        </span>
                      </Button>
                    )}
                  </div>
                  <div className="max-h-[550px] overflow-y-auto space-y-4">
                    {(threadsData as any).threads.map((thread: any) => (
                      <div
                        key={thread.id}
                        className="flex items-start gap-3 p-2"
                      >
                        <div className="pt-2">
                          <Checkbox
                            id={`select-thread-${thread.id}`}
                            checked={selectedThreadIds.includes(thread.id)}
                            onCheckedChange={(checked) => {
                              setSelectedThreadIds((prev) =>
                                checked
                                  ? [...prev, thread.id]
                                  : prev.filter((id) => id !== thread.id),
                              );
                            }}
                          />
                        </div>
                        <Card
                          className={`flex-grow cursor-pointer transition-all duration-300 group relative overflow-hidden border-2 hover:shadow-lg hover:scale-[1.01] ${selectedThreadId === thread.id ? "bg-gradient-to-r from-primary/5 to-primary/10 border-primary shadow-lg scale-[1.01]" : "border-border/50 hover:border-primary/40 hover:bg-gradient-to-r hover:from-secondary/30 hover:to-secondary/10"}`}
                          onClick={() => setSelectedThreadId(thread.id)}
                        >
                          <CardContent className="p-4">
                            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-2">
                              <div className="flex-1 min-w-0">
                                <div className="flex items-center gap-2">
                                  <p className="font-semibold text-sm sm:text-base break-words">
                                    {thread.title}
                                  </p>
                                  <ChevronRight className="h-4 w-4 text-muted-foreground group-hover:text-primary transition-colors flex-shrink-0" />
                                </div>
                              </div>
                              {typeof thread.engagementScore === "number" && (
                                <div className="flex-shrink-0 self-start">
                                  <TooltipProvider>
                                    <Tooltip>
                                      <TooltipTrigger>
                                        <Badge
                                          variant="outline"
                                          className="text-xs"
                                        >
                                          <TrendingUp className="h-3 w-3 mr-1 text-primary/80" />
                                          {thread.engagementScore.toFixed(1)}
                                        </Badge>
                                      </TooltipTrigger>
                                      <TooltipContent>
                                        <p>Engagement Score</p>
                                      </TooltipContent>
                                    </Tooltip>
                                  </TooltipProvider>
                                </div>
                              )}
                            </div>
                            <p className="text-sm text-muted-foreground whitespace-pre-wrap mt-2 line-clamp-2">
                              {thread.tweets[0]?.content}
                            </p>
                            <div className="mt-3 flex items-center justify-between">
                              <div className="flex items-center gap-2 text-xs text-muted-foreground">
                                <MessageSquare className="h-3 w-3" />
                                <span>{thread.tweets?.length || 0} tweets</span>
                                {thread.createdAt && (
                                  <>
                                    <span>•</span>
                                    <span>
                                      {new Date(
                                        thread.createdAt,
                                      ).toLocaleDateString()}
                                    </span>
                                  </>
                                )}
                              </div>
                              <div className="flex items-center gap-2">
                                <Button
                                  variant="secondary"
                                  size="sm"
                                  className="h-8 px-2"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setSelectedThreadId(thread.id);
                                    repurposeMutation.mutate({
                                      threadId: thread.id,
                                      platform: "linkedin",
                                    });
                                  }}
                                >
                                  LinkedIn
                                </Button>
                                <Button
                                  variant="secondary"
                                  size="sm"
                                  className="h-8 px-2"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setSelectedThreadId(thread.id);
                                    repurposeMutation.mutate({
                                      threadId: thread.id,
                                      platform: "instagram",
                                    });
                                  }}
                                >
                                  Instagram
                                </Button>
                                <Button
                                  variant="secondary"
                                  size="sm"
                                  className="h-8 px-2"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setSelectedThreadId(thread.id);
                                    repurposeMutation.mutate({
                                      threadId: thread.id,
                                      platform: "tiktok",
                                    });
                                  }}
                                >
                                  TikTok
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  className="h-8 px-2"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setRepurposeState((prev) => ({
                                      ...prev,
                                      thread,
                                      isDialogOpen: true,
                                    }));
                                  }}
                                >
                                  More…
                                </Button>
                              </div>{" "}
                            </div>
                          </CardContent>
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 sm:opacity-100 transition-opacity h-8 w-8 bg-background/80 hover:bg-background"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    if (thread.id === selectedThreadId) {
                                      setSelectedThreadId(null);
                                    }
                                    hideThread({ threadId: thread.id });
                                  }}
                                >
                                  <Trash2 className="h-4 w-4 text-destructive" />
                                </Button>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p>Archive thread</p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </Card>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <EmptyState
                  title={
                    debouncedSearchTerm || filterByPattern
                      ? "No threads found"
                      : "No threads generated yet"
                  }
                  description={
                    debouncedSearchTerm || filterByPattern
                      ? "No threads match your filters."
                      : "Your generated threads will appear here."
                  }
                />
              )}
            </CardContent>
          </Card>

          {selectedThreadId && (
            <Card className="mt-4">
              {isLoadingSelectedThread ? (
                <CardContent className="p-6 text-center">
                  <LoadingSpinner />
                  <p className="mt-2 text-sm text-muted-foreground">
                    Loading thread...
                  </p>
                </CardContent>
              ) : !selectedThread ? (
                <CardContent className="p-6 text-center">
                  <p className="text-destructive">
                    Could not load thread details.
                  </p>
                </CardContent>
              ) : (
                <>
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <CardTitle className="text-lg">
                        {selectedThread.title}
                      </CardTitle>
                      <div className="flex items-center gap-2">
                        {selectedThreadId && !isEditing && (
                          <ViralThreadTagManager threadId={selectedThreadId} />
                        )}
                        {!isEditing && selectedThread && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setSchedulingThread(selectedThread)}
                          >
                            <Clock className="h-4 w-4 mr-2" />
                            Schedule
                          </Button>
                        )}
                        {!isEditing && selectedThread && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setIsEditing(true)}
                          >
                            <PenSquare className="h-4 w-4 mr-2" />
                            Edit
                          </Button>
                        )}
                        {!isEditing && selectedThread && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={async () => {
                              try {
                                await apiClient.optimizeViralThread({
                                  threadId: selectedThreadId!,
                                });
                                toast({
                                  title: "Optimizing thread",
                                  description: "Updates will appear shortly.",
                                });
                                queryClient.invalidateQueries(
                                  queryKeys.viralThread(selectedThreadId ?? ""),
                                );
                              } catch (error) {
                                void error;
                                toast({
                                  title: "Optimization failed",
                                  description:
                                    error instanceof Error
                                      ? error.message
                                      : "Please try again.",
                                  variant: "destructive",
                                });
                              }
                            }}
                          >
                            <Target className="h-4 w-4 mr-2" />
                            Optimize
                          </Button>
                        )}
                        {!isEditing && selectedThread && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() =>
                              setRepurposeState((prev) => ({
                                ...prev,
                                thread: selectedThread,
                                isDialogOpen: true,
                              }))
                            }
                            disabled={repurposeMutation.isLoading}
                          >
                            {repurposeMutation.isLoading ? (
                              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                            ) : (
                              <RefreshCw className="h-4 w-4 mr-2" />
                            )}
                            Repurpose
                          </Button>
                        )}
                        {!isEditing && selectedThread && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() =>
                              saveThreadMutation.mutate({
                                threadId: selectedThreadId,
                              })
                            }
                            disabled={saveThreadMutation.isLoading}
                          >
                            {saveThreadMutation.isLoading ? (
                              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                            ) : (
                              <Download className="h-4 w-4 mr-2" />
                            )}
                            Save to Library
                          </Button>
                        )}
                        {!isEditing && selectedThread && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              try {
                                const prompt =
                                  `${selectedThread.title || ""}\n\n${(
                                    selectedThread.tweets || []
                                  )
                                    .map((t: any) => t.content)
                                    .join("\n\n")}`.trim();
                                rippleGenerate.mutate({
                                  prompt,
                                  contentType: "TEXT",
                                  format: "THREAD",
                                });
                              } catch (error) {
                                void error;
                              }
                            }}
                            disabled={rippleGenerate.isLoading}
                          >
                            {rippleGenerate.isLoading ? (
                              <>
                                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                                Asking Ripple...
                              </>
                            ) : (
                              <>
                                <Sparkles className="h-4 w-4 mr-2" />
                                Create with Ripple
                              </>
                            )}
                          </Button>
                        )}
                        {!isEditing && selectedThread && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={async () => {
                              try {
                                const res = await apiClient.shareViralThread({
                                  threadId: selectedThreadId!,
                                });
                                const url =
                                  (res as any)?.url ??
                                  new URL(
                                    `/share/thread/${(res as any)?.shareId}`,
                                    window.location.origin,
                                  ).toString();
                                copy(url);
                                copy(
                                  ((selectedThread as any)?.title
                                    ? `${(selectedThread as any).title}\n`
                                    : "") + url,
                                );
                                toast({ title: "Share link copied!" });
                              } catch (error: any) {
                                toast({
                                  title: "Failed to create share link",
                                  description:
                                    error?.message || "Please try again.",
                                  variant: "destructive",
                                });
                              }
                            }}
                          >
                            <Share2 className="h-4 w-4 mr-2" />
                            Share
                          </Button>
                        )}
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8"
                          onClick={() => setSelectedThreadId(null)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground pt-2">
                      {typeof selectedThread.engagementScore === "number" && (
                        <Badge variant="secondary">
                          Engagement Score:{" "}
                          {selectedThread.engagementScore.toFixed(1)}
                        </Badge>
                      )}
                      <div className="flex flex-wrap gap-1">
                        {selectedThread.tags?.map(({ tag }) => (
                          <Badge key={tag.id} variant="outline">
                            {tag.name}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    {isEditing ? (
                      <div className="space-y-4">
                        <div>
                          <Label
                            htmlFor="thread-title-edit"
                            className="text-base font-semibold"
                          >
                            Title
                          </Label>
                          <Input
                            id="thread-title-edit"
                            value={editedTitle}
                            onChange={(e) => setEditedTitle(e.target.value)}
                            className="mt-1"
                          />
                        </div>
                        <div className="space-y-2">
                          <Label className="text-base font-semibold">
                            Tweets
                          </Label>
                          {editedTweets.map((tweet, index) => (
                            <div key={index} className="flex items-start gap-2">
                              <Textarea
                                value={tweet.content}
                                onChange={(e) => {
                                  const newTweets = [...editedTweets];
                                  if (newTweets[index]) {
                                    newTweets[index]!.content = e.target.value;
                                    setEditedTweets(newTweets);
                                  }
                                }}
                                className="min-h-[100px] flex-grow"
                              />
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() =>
                                  setEditedTweets(
                                    editedTweets.filter((_, i) => i !== index),
                                  )
                                }
                              >
                                <Trash2 className="h-4 w-4 text-destructive" />
                              </Button>
                            </div>
                          ))}
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() =>
                              setEditedTweets([
                                ...editedTweets,
                                { content: "" },
                              ])
                            }
                          >
                            Add Tweet
                          </Button>
                        </div>
                        <div className="flex justify-end gap-2">
                          <Button
                            variant="ghost"
                            onClick={() => {
                              setIsEditing(false);
                              setEditedTitle(selectedThread.title || "");
                              setEditedTweets(selectedThread.tweets || []);
                            }}
                          >
                            Cancel
                          </Button>
                          <Button
                            onClick={handleSaveChanges}
                            disabled={updateThreadMutation.isLoading}
                          >
                            {updateThreadMutation.isLoading && (
                              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                            )}
                            Save Changes
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <div>
                        <div className="space-y-3">
                          {selectedThread.tweets.map(
                            (tweet: any, index: number) => (
                              <div
                                key={index}
                                className="p-4 bg-muted/50 rounded-lg border border-border/50 flex items-start gap-3"
                              >
                                <Avatar className="h-8 w-8 mt-1">
                                  <AvatarFallback>{index + 1}</AvatarFallback>
                                </Avatar>
                                <p className="flex-1 whitespace-pre-wrap text-sm break-all">
                                  {tweet.content}
                                </p>
                              </div>
                            ),
                          )}
                        </div>
                        <div className="mt-6 space-y-4 pt-4 border-t">
                          <h4 className="text-md font-semibold">
                            Thread Insights
                          </h4>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                            <div className="space-y-1">
                              <p className="text-muted-foreground">Pattern</p>
                              <p className="font-medium">
                                {selectedThread.pattern}
                              </p>
                            </div>
                            <div className="space-y-1">
                              <p className="text-muted-foreground">
                                Word Count
                              </p>
                              <p className="font-medium">
                                {selectedThread.wordCount ?? "N/A"}
                              </p>
                            </div>
                          </div>

                          <div className="space-y-1 mt-4">
                            <p className="text-muted-foreground">
                              Format Insights
                            </p>
                            {isFetchingFormatInsights ? (
                              <p className="text-xs text-muted-foreground">
                                Analyzing format...
                              </p>
                            ) : formatInsights ? (
                              <div className="p-3 rounded-lg bg-muted/30 border border-border/50 text-sm">
                                {Array.isArray(
                                  (formatInsights as any).suggestions,
                                ) ? (
                                  <ul className="list-disc list-inside space-y-1">
                                    {(
                                      (formatInsights as any)
                                        .suggestions as any[]
                                    )
                                      .slice(0, 6)
                                      .map((s: any, i: number) => (
                                        <li key={i}>
                                          {typeof s === "string"
                                            ? s
                                            : s?.text || JSON.stringify(s)}
                                        </li>
                                      ))}
                                  </ul>
                                ) : (
                                  <pre className="whitespace-pre-wrap text-xs">
                                    {JSON.stringify(formatInsights, null, 2)}
                                  </pre>
                                )}
                              </div>
                            ) : (
                              <p className="text-xs text-muted-foreground">
                                No insights available.
                              </p>
                            )}
                          </div>

                          {Array.isArray(psychologicalTriggers) &&
                            psychologicalTriggers.length > 0 && (
                              <div className="space-y-1 mt-4">
                                <p className="text-muted-foreground">
                                  Psychological Triggers
                                </p>
                                <div className="flex flex-wrap gap-2 mt-1">
                                  {psychologicalTriggers.map(
                                    (trigger: string, i: number) => (
                                      <Badge key={i} variant="outline">
                                        {trigger}
                                      </Badge>
                                    ),
                                  )}
                                </div>
                              </div>
                            )}
                          {Array.isArray(optimizationSuggestions) &&
                            optimizationSuggestions.length > 0 && (
                              <div className="mt-4">
                                <Accordion type="single" collapsible>
                                  <AccordionItem value="item-1">
                                    <AccordionTrigger>
                                      Optimization Suggestions
                                    </AccordionTrigger>
                                    <AccordionContent>
                                      <ul className="list-disc list-inside text-sm space-y-1">
                                        {optimizationSuggestions.map(
                                          (suggestion: string, i: number) => (
                                            <li key={i}>{suggestion}</li>
                                          ),
                                        )}
                                      </ul>
                                    </AccordionContent>
                                  </AccordionItem>
                                </Accordion>
                              </div>
                            )}
                        </div>{" "}
                      </div>
                    )}
                  </CardContent>
                </>
              )}
            </Card>
          )}
        </div>
      </div>
      {repurposeState.isDialogOpen && (
        <RepurposeThreadDialog
          isOpen={repurposeState.isDialogOpen}
          onOpenChange={(isOpen) =>
            setRepurposeState((prev) => ({
              ...prev,
              isDialogOpen: isOpen,
              thread: null,
            }))
          }
          threadId={repurposeState.thread.id}
          onRepurpose={(input) => {
            repurposeMutation.mutate({
              threadId: input.threadId,
              platform: input.platform,
            });
          }}
        />
      )}
      {schedulingThread && (
        <SchedulePostDialog
          isOpen={!!schedulingThread}
          onOpenChange={() => setSchedulingThread(null)}
          item={schedulingThread}
          sourceType="VIRAL_THREAD"
          onSchedule={(data) =>
            schedulePostMutation.mutate({
              ...data,
              imageUrl: undefined,
            })
          }
          isScheduling={schedulePostMutation.isLoading}
        />
      )}
    </>
  );
}

function CreatePage() {
  const location = useLocation();
  const [activeTab, setActiveTab] = useState(
    location.state?.activeTab === "image" ||
      location.state?.activeTab === "video"
      ? "media"
      : location.state?.activeTab || "generatedContent",
  );
  const [highlightedPillar, setHighlightedPillar] = useState<string | null>(
    null,
  );
  const [inlinePreviewContentId, setInlinePreviewContentId] = useState<
    string | null
  >(null);
  const [previewContentId, setPreviewContentId] = useState<string | null>(null);
  const queryClient = useQueryClient();

  // Pull to refresh functionality for mobile
  const handleRefresh = useCallback(async () => {
    await queryClient.invalidateQueries({
      queryKey: ["generatedContent"],
    });
    await queryClient.invalidateQueries({
      queryKey: ["contentPillars"],
    });
  }, [queryClient]);

  // Pull to refresh functionality for mobile
  usePullToRefresh(handleRefresh);

  const handleImageGenerated = (pillarId: string) => {
    setActiveTab("generatedContent");
    setHighlightedPillar(pillarId);
  };

  const handleVideoGenerated = () => {
    setActiveTab("generatedContent");
    setHighlightedPillar(null);
  };

  const handleContentGenerated = () => {
    setActiveTab("generatedContent");
    setHighlightedPillar(null); // Don't highlight any specific pillar
  };

  // Keyboard shortcuts for preview
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        setPreviewContentId(null);
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, []);

  return (
    <div>
      <MetaTags
        title="Create | SocialWave"
        description="Generate viral threads, images, and videos with AI. Manage your content library and schedule posts across all platforms."
        keywords="AI content generator, social media scheduler, content library, image generation, video scriptwriting"
      />
      <StructuredData
        data={{
          "@context": "https://schema.org",
          "@type": "WebPage",
          name: "Create | SocialWave",
          description:
            "Generate viral threads, images, and videos with AI, and manage your content library.",
        }}
      />
      {/* Brand Setup Indicator */}
      <BrandSetupIndicator className="mb-4" />

      <div className="flex items-center justify-between mb-2">
        <h1 className="text-3xl font-bold gradient-text">Create</h1>
      </div>
      <p className="text-muted-foreground text-lg mb-8">
        Generate content ideas, captions, and images tailored to your brand.
      </p>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="mb-8">
        <TabsList className="flex flex-wrap h-auto justify-start">
          <TabsTrigger value="generatedContent">Generated Content</TabsTrigger>
          <TabsTrigger value="viralThreads">Generate & Repurpose</TabsTrigger>
          <TabsTrigger value="media">Media Studio</TabsTrigger>
        </TabsList>
      </Tabs>

      {activeTab === "generatedContent" && (
        <GeneratedContentTab
          highlightedPillarId={highlightedPillar}
          inlinePreviewContentId={inlinePreviewContentId}
          onPreviewClose={() => setInlinePreviewContentId(null)}
        />
      )}
      {activeTab === "media" && (
        <div className="space-y-8">
          <ImageGenerationTab onImageGenerated={handleImageGenerated} />
          <VideoGenerationTab onVideoGenerated={handleVideoGenerated} />
        </div>
      )}

      {activeTab === "viralThreads" && (
        <ViralThreadsTab onContentGenerated={handleContentGenerated} />
      )}

      {/* Enhanced Content Preview */}
      {previewContentId && (
        <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-background border border-border rounded-none sm:rounded-lg shadow-2xl w-full max-w-full sm:max-w-4xl h-[90vh] sm:h-auto overflow-auto">
            <InlineContentPreview
              contentId={previewContentId}
              onClose={() => setPreviewContentId(null)}
            />
          </div>
        </div>
      )}
    </div>
  );
}

type GeneratedContent = inferRPCOutputType<"listGeneratedContent">[number];

function GeneratedContentCard({ item }: { item: GeneratedContent }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editedTitle, setEditedTitle] = useState(item.title);
  const [editedContent, setEditedContent] = useState(item.content);
  const [isScheduling, setIsScheduling] = useState(false);
  const [isPressed, setIsPressed] = useState(false);
  const [showContextMenu, setShowContextMenu] = useState(false);
  const [showClean, setShowClean] = useState(true);
  const cleanedText = React.useMemo(() => {
    const lines = (item.content ?? "").split(/\r?\n/);
    const filtered = lines.filter(
      (l) =>
        !/^\s*(image\s*prompt|image\s*idea|visual\s*prompt)\s*:/i.test(
          l.trim(),
        ),
    );
    return filtered
      .join("\n")
      .replace(/\n{3,}/g, "\n\n")
      .trim();
  }, [item.content]);
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const isDesktop = useMediaQuery("(min-width: 768px)");

  // Long press for context menu on mobile
  const handleLongPress = useCallback(() => {
    if (!isDesktop) {
      setShowContextMenu(true);
      // Haptic feedback if available
      if (navigator.vibrate) {
        navigator.vibrate(50);
      }
    }
  }, [isDesktop]);

  const { isPressed: isLongPressed } = useLongPress(handleLongPress, 500);

  const { data: itemStatus } = useQuery({
    queryKey: ["generatedContentStatus", item.id],
    queryFn: () => apiClient.getGeneratedContentStatus({ contentId: item.id }),
    enabled: item.status === "PENDING" || item.status === "GENERATING",
    refetchInterval: (data) => {
      // Only refresh if the item is still being generated
      if (data?.status === "GENERATING" || data?.status === "PENDING") {
        return 3000; // Refresh every 3 seconds only while generating
      }
      return false; // Stop refreshing when completed
    },
  });

  useEffect(() => {
    if (itemStatus && itemStatus.status !== item.status) {
      queryClient.invalidateQueries({
        queryKey: queryKeys.generatedContent(item.pillarId),
      });
    }
  }, [itemStatus, item.status, item.pillarId, queryClient]);

  const updateMutation = useMutation({
    mutationFn: apiClient.updateGeneratedContent,
    onSuccess: () => {
      toast({ title: "Content updated!" });
      queryClient.invalidateQueries({
        queryKey: queryKeys.generatedContent(item.pillarId),
      });
      setIsEditing(false);
    },
    onError: (error) => {
      toast({
        title: "Failed to update content",
        description:
          error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });

  const schedulePostMutation = useMutation({
    mutationFn: apiClient.schedulePost,
    onSuccess: () => {
      toast({ title: "Content scheduled successfully!" });
      setIsScheduling(false);
      queryClient.invalidateQueries(queryKeys.scheduledPosts());
    },
    onError: (error: any) => {
      toast({
        title: "Failed to schedule content",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const deleteMutation = useMutation({
    mutationFn: apiClient.deleteGeneratedContent,
    onSuccess: () => {
      toast({ title: "Content deleted" });
      queryClient.invalidateQueries({
        queryKey: queryKeys.generatedContent(item.pillarId),
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to delete content",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const retryMutation = useMutation({
    mutationFn: apiClient.retryVideoGeneration,
    onSuccess: () => {
      toast({ title: "Retrying video generation..." });
      queryClient.invalidateQueries({
        queryKey: queryKeys.generatedContent(item.pillarId),
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to retry generation",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const setThumbnailMutation = useMutation({
    mutationFn: apiClient.setCustomContentThumbnail,
    onSuccess: () => {
      toast({ title: "Custom thumbnail uploaded successfully!" });
      queryClient.invalidateQueries({
        queryKey: queryKeys.generatedContent(item.pillarId),
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to upload thumbnail",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const handleThumbnailUpload = async (
    event: React.ChangeEvent<HTMLInputElement>,
  ) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const thumbnailBase64 = await encodeFileAsBase64DataURL(file);
      if (thumbnailBase64) {
        setThumbnailMutation.mutate({ contentId: item.id, thumbnailBase64 });
      }
    } catch (uploadError: any) {
      console.error("Thumbnail upload error:", uploadError);
      toast({
        title: "Error reading file",
        description: "Could not process the selected image file.",
        variant: "destructive",
      });
    }
  };

  const currentStatus = itemStatus?.status || item.status;
  const contentUrl = itemStatus?.content || item.content;
  const customThumbnailUrl =
    itemStatus?.customThumbnailUrl || item.customThumbnailUrl;
  const thumbnailUrl = itemStatus?.thumbnailUrl || item.thumbnailUrl;
  const displayThumbnail = customThumbnailUrl || thumbnailUrl;

  if (item.status === "GENERATING" || currentStatus === "GENERATING") {
    return (
      <Card className="overflow-hidden animate-pulse transition-all duration-200 active:scale-[0.98] md:active:scale-100">
        <CardHeader className="pb-3 md:pb-6">
          <Skeleton className="h-5 md:h-6 w-3/4" />
        </CardHeader>
        <CardContent className="pb-3 md:pb-6">
          <div className="flex items-center space-x-2 text-muted-foreground">
            <RefreshCw className="h-4 w-4 animate-spin" />
            <span className="text-sm md:text-base">
              Content is being generated...
            </span>
          </div>
          <Skeleton className="h-16 md:h-20 w-full mt-2" />
        </CardContent>
        <CardFooter className="pt-3 md:pt-6">
          <Skeleton className="h-3 md:h-4 w-1/4" />
        </CardFooter>
      </Card>
    );
  }

  if (item.status === "FAILED") {
    return (
      <Card className="overflow-hidden border-destructive bg-destructive/10 transition-all duration-200 active:scale-[0.98] md:active:scale-100">
        <CardHeader className="pb-3 md:pb-6">
          <CardTitle className="text-destructive flex items-center gap-2 text-base md:text-lg">
            <XCircle className="h-4 w-4 md:h-5 md:w-5" />
            Generation Failed
          </CardTitle>
        </CardHeader>
        <CardContent className="pb-3 md:pb-6">
          <p className="text-sm text-destructive-foreground bg-destructive/20 p-3 rounded-md">
            {item.content}
          </p>
        </CardContent>
        <CardFooter className="flex flex-col md:flex-row gap-3 md:gap-0 md:justify-between md:items-center pt-3 md:pt-6">
          <p className="text-xs text-muted-foreground">
            Failed on {formatDate(item.updatedAt)}
          </p>
          {item.type === "VIDEO" && (
            <Button
              size={isDesktop ? "sm" : "default"}
              variant="destructive"
              onClick={() => retryMutation.mutate({ contentId: item.id })}
              disabled={retryMutation.isLoading}
              className="w-full md:w-auto min-h-[44px] md:min-h-auto transition-all duration-200 active:scale-95"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              Retry
            </Button>
          )}
        </CardFooter>
      </Card>
    );
  }

  const handleSave = () => {
    const data: {
      contentId: string;
      title: string;
      content?: string;
    } = {
      contentId: item.id,
      title: editedTitle,
    };
    if (item.type === "TEXT") {
      data.content = editedContent;
    }
    updateMutation.mutate(data);
  };

  const handleCancel = () => {
    setIsEditing(false);
    setEditedTitle(item.title);
    setEditedContent(item.content);
  };

  return (
    <>
      <Card
        className={`overflow-hidden transition-all duration-200 hover:shadow-lg hover:shadow-primary/5 active:scale-[0.98] md:active:scale-100 ${
          isPressed || isLongPressed ? "scale-[0.98]" : ""
        } ${isLongPressed ? "ring-2 ring-primary" : ""}`}
        onTouchStart={() => setIsPressed(true)}
        onTouchEnd={() => setIsPressed(false)}
        onTouchCancel={() => setIsPressed(false)}
      >
        <CardHeader className="pb-3 md:pb-6">
          <div className="flex justify-between items-start gap-3">
            {isEditing ? (
              <Input
                value={editedTitle}
                onChange={(e) => setEditedTitle(e.target.value)}
                className="font-bold text-base md:text-lg min-h-[44px] md:min-h-auto"
              />
            ) : (
              <CardTitle className="text-base md:text-lg leading-tight">
                {item.title}
              </CardTitle>
            )}
            <div className="flex items-center gap-2 flex-wrap-reverse">
              <Badge
                variant="outline"
                className="w-fit text-xs px-2 py-1 flex-shrink-0"
              >
                {item.type}
              </Badge>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <span className="inline-flex cursor-help">
                      <Badge
                        variant="secondary"
                        className="w-fit text-[10px] px-2 py-0.5 flex-shrink-0 bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-200 border-green-200 dark:border-green-800"
                      >
                        On‑brand
                      </Badge>
                    </span>
                  </TooltipTrigger>
                  <TooltipContent
                    side="bottom"
                    className="max-w-xs text-xs leading-relaxed"
                  >
                    This content follows your Brand Vibe rules (e.g., tone,
                    topics, safety). Edit rules in Settings → Brand Vibe to
                    change how alignment works.
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </div>
        </CardHeader>
        <CardContent className="pb-3 md:pb-6">
          {isEditing && item.type === "TEXT" ? (
            <Textarea
              value={editedContent}
              onChange={(e) => setEditedContent(e.target.value)}
              className="min-h-[120px] md:min-h-[150px] text-sm md:text-base"
            />
          ) : item.type === "IMAGE" ? (
            <img
              src={item.content}
              alt={item.title}
              className="rounded-lg border max-w-full h-auto transition-transform duration-200 active:scale-[0.98]"
            />
          ) : item.type === "VIDEO" ? (
            <div className="aspect-video bg-secondary flex items-center justify-center relative rounded-lg overflow-hidden">
              {currentStatus === "DRAFT" && contentUrl && displayThumbnail ? (
                <a
                  href={contentUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="block w-full h-full relative group transition-transform duration-200 active:scale-[0.98]"
                >
                  <img
                    src={displayThumbnail}
                    alt={item.title}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-black/50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                    <Youtube className="h-12 w-12 text-white" />
                  </div>
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={handleThumbnailUpload}
                    accept="image/*"
                    className="hidden"
                  />
                  <Button
                    size="icon"
                    variant="secondary"
                    className="absolute bottom-2 right-2 opacity-0 group-hover:opacity-100 md:opacity-100 transition-all duration-200 h-9 w-9 md:h-8 md:w-8 rounded-full active:scale-90"
                    onClick={(e) => {
                      e.preventDefault();
                      fileInputRef.current?.click();
                    }}
                    disabled={setThumbnailMutation.isLoading}
                  >
                    {setThumbnailMutation.isLoading ? (
                      <RefreshCw className="h-4 w-4 animate-spin" />
                    ) : (
                      <Camera className="h-4 w-4" />
                    )}
                  </Button>
                </a>
              ) : (
                <div className="text-center p-4">
                  {currentStatus === "PENDING" && (
                    <>
                      <RefreshCw className="h-8 w-8 mx-auto text-muted-foreground" />
                      <p className="mt-2 text-sm font-semibold">Pending...</p>
                    </>
                  )}
                  {currentStatus === "GENERATING" && (
                    <>
                      <RefreshCw className="h-8 w-8 mx-auto animate-spin text-primary" />
                      <p className="mt-2 text-sm font-semibold">
                        Generating...
                      </p>
                    </>
                  )}
                  {currentStatus === "FAILED" && (
                    <>
                      <XCircle className="h-8 w-8 mx-auto text-destructive" />
                      <p className="mt-2 text-sm font-semibold text-destructive">
                        Failed
                      </p>
                    </>
                  )}
                </div>
              )}
            </div>
          ) : (
            (() => {
              // Cleaned text is computed above; used when copying or toggling clean/raw.
              // Try to parse as comprehensive content package first
              try {
                const contentPackage = JSON.parse(item.content) as any;
                // Check for new comprehensive content package format
                if (contentPackage.postText && contentPackage.hashtags) {
                  return (
                    <div className="space-y-6">
                      {/* Main Post Content */}
                      <div className="bg-gradient-to-br from-primary/5 to-primary/10 p-6 rounded-xl border border-primary/20">
                        <div className="flex items-center gap-2 mb-4">
                          <div className="w-2 h-2 bg-primary rounded-full" />
                          <h4 className="font-semibold text-primary">
                            Post Content
                          </h4>
                        </div>
                        <div className="space-y-4">
                          {/* Hook */}
                          {contentPackage.hook && (
                            <div className="bg-background/80 p-4 rounded-lg border border-primary/10">
                              <h5 className="text-xs font-semibold text-primary mb-2 uppercase tracking-wide">
                                Hook
                              </h5>
                              <p className="text-sm font-medium text-foreground">
                                {contentPackage.hook}
                              </p>
                            </div>
                          )}
                          {/* Main Post Text */}
                          <div className="bg-background/80 p-4 rounded-lg border border-primary/10">
                            <h5 className="text-xs font-semibold text-primary mb-2 uppercase tracking-wide">
                              Main Content
                            </h5>
                            <p className="text-sm leading-relaxed whitespace-pre-wrap">
                              {contentPackage.postText}
                            </p>
                          </div>
                          {/* Call to Action */}
                          {contentPackage.callToAction && (
                            <div className="bg-background/80 p-4 rounded-lg border border-primary/10">
                              <h5 className="text-xs font-semibold text-primary mb-2 uppercase tracking-wide">
                                Call to Action
                              </h5>
                              <p className="text-sm font-medium text-foreground">
                                {contentPackage.callToAction}
                              </p>
                            </div>
                          )}
                          {/* Caption (if different from postText) */}
                          {contentPackage.caption &&
                            contentPackage.caption !==
                              contentPackage.postText && (
                              <div className="bg-background/80 p-4 rounded-lg border border-primary/10">
                                <h5 className="text-xs font-semibold text-primary mb-2 uppercase tracking-wide">
                                  Caption
                                </h5>
                                <p className="text-sm leading-relaxed whitespace-pre-wrap">
                                  {contentPackage.caption}
                                </p>
                              </div>
                            )}
                        </div>
                      </div>

                      {/* Visual Assets */}
                      {(contentPackage.imageUrl || contentPackage.videoUrl) && (
                        <div className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/20 dark:to-green-900/20 p-6 rounded-xl border border-green-200 dark:border-green-800">
                          <div className="flex items-center gap-2 mb-4">
                            <div className="w-2 h-2 bg-green-600 rounded-full" />
                            <h4 className="font-semibold text-green-700 dark:text-green-400">
                              Visual Assets
                            </h4>
                          </div>
                          <div className="grid gap-4">
                            {contentPackage.imageUrl && (
                              <div>
                                <h5 className="text-xs font-semibold text-green-600 dark:text-green-400 mb-2 uppercase tracking-wide">
                                  Generated Image
                                </h5>
                                <div className="relative group">
                                  <img
                                    src={contentPackage.imageUrl}
                                    alt="Generated content image"
                                    className="rounded-lg border border-green-200 dark:border-green-700 max-w-full h-auto transition-transform duration-200 hover:scale-[1.02]"
                                  />
                                  <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-200 rounded-lg flex items-center justify-center opacity-0 group-hover:opacity-100">
                                    <Button
                                      size="sm"
                                      variant="secondary"
                                      className="bg-white/90 hover:bg-white text-black"
                                      onClick={() => {
                                        copy(contentPackage.imageUrl);
                                        toast({ title: "Image URL copied!" });
                                      }}
                                    >
                                      <Copy className="h-4 w-4 mr-2" />
                                      Copy URL
                                    </Button>
                                  </div>
                                </div>
                              </div>
                            )}
                            {contentPackage.videoUrl && (
                              <div>
                                <h5 className="text-xs font-semibold text-green-600 dark:text-green-400 mb-2 uppercase tracking-wide">
                                  Generated Video
                                </h5>
                                <div className="relative group">
                                  <video
                                    src={contentPackage.videoUrl}
                                    className="rounded-lg border border-green-200 dark:border-green-700 max-w-full h-auto"
                                    controls
                                    preload="metadata"
                                  />
                                  <Button
                                    size="sm"
                                    variant="secondary"
                                    className="absolute bottom-2 right-2 bg-white/90 hover:bg-white text-black"
                                    onClick={() => {
                                      copy(contentPackage.videoUrl);
                                      toast({ title: "Video URL copied!" });
                                    }}
                                  >
                                    <Copy className="h-4 w-4 mr-2" />
                                    Copy URL
                                  </Button>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      )}

                      {/* Platform-Specific Strategies */}
                      {contentPackage.platformStrategies &&
                        (Array.isArray(contentPackage.platformStrategies)
                          ? contentPackage.platformStrategies.length > 0
                          : Object.keys(contentPackage.platformStrategies)
                              .length > 0) && (
                          <div className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/20 dark:to-blue-900/20 p-6 rounded-xl border border-blue-200 dark:border-blue-800">
                            <div className="flex items-center gap-2 mb-4">
                              <div className="w-2 h-2 bg-blue-600 rounded-full" />
                              <h4 className="font-semibold text-blue-700 dark:text-blue-400">
                                Platform Optimization Strategy
                              </h4>
                            </div>
                            <div className="grid gap-4">
                              {/* Handle both array and object formats */}
                              {Array.isArray(contentPackage.platformStrategies)
                                ? // New array format from generateContentFromTrendingTopic
                                  contentPackage.platformStrategies.map(
                                    (strategy: any, index: number) => (
                                      <div
                                        key={index}
                                        className="bg-background/80 p-4 rounded-lg border border-blue-200 dark:border-blue-700"
                                      >
                                        <div className="flex items-center justify-between mb-3">
                                          <div className="flex items-center gap-3">
                                            <Badge
                                              variant="outline"
                                              className="bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 border-blue-300 dark:border-blue-700"
                                            >
                                              {strategy.platform}
                                            </Badge>
                                            {strategy.viralityScore && (
                                              <div className="flex items-center gap-1">
                                                <div className="flex">
                                                  {[...Array(5)].map((_, i) => (
                                                    <div
                                                      key={i}
                                                      className={`w-2 h-2 rounded-full mr-1 ${
                                                        i <
                                                        Math.round(
                                                          strategy.viralityScore /
                                                            2,
                                                        )
                                                          ? "bg-yellow-400"
                                                          : "bg-gray-300 dark:bg-gray-600"
                                                      }`}
                                                    />
                                                  ))}
                                                </div>
                                                <span className="text-xs text-muted-foreground ml-1">
                                                  {strategy.viralityScore}/10
                                                </span>
                                              </div>
                                            )}
                                          </div>
                                        </div>
                                        <p className="text-sm text-muted-foreground mb-3 leading-relaxed">
                                          {strategy.strategy}
                                        </p>
                                        {strategy.optimizedText &&
                                          strategy.optimizedText !==
                                            contentPackage.postText && (
                                            <div className="mb-3 p-3 bg-blue-50 dark:bg-blue-950/30 rounded border border-blue-200 dark:border-blue-800">
                                              <h6 className="text-xs font-semibold text-blue-600 dark:text-blue-400 mb-1 uppercase tracking-wide">
                                                Platform-Optimized Text
                                              </h6>
                                              <p className="text-sm text-blue-800 dark:text-blue-200">
                                                {strategy.optimizedText}
                                              </p>
                                            </div>
                                          )}
                                        {strategy.bestTimes &&
                                          strategy.bestTimes.length > 0 && (
                                            <div className="mb-3">
                                              <h6 className="text-xs font-semibold text-blue-600 dark:text-blue-400 mb-2 uppercase tracking-wide">
                                                Optimal Posting Times
                                              </h6>
                                              <div className="flex flex-wrap gap-1">
                                                {strategy.bestTimes.map(
                                                  (
                                                    time: string,
                                                    timeIndex: number,
                                                  ) => (
                                                    <span
                                                      key={timeIndex}
                                                      className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 px-2 py-1 rounded border border-blue-200 dark:border-blue-700"
                                                    >
                                                      {time}
                                                    </span>
                                                  ),
                                                )}
                                              </div>
                                            </div>
                                          )}
                                      </div>
                                    ),
                                  )
                                : // Legacy object format from generateContentFromViralPotential
                                  Object.entries(
                                    contentPackage.platformStrategies,
                                  ).map(
                                    ([platform, strategy]: [string, any]) => (
                                      <div
                                        key={platform}
                                        className="bg-background/80 p-4 rounded-lg border border-blue-200 dark:border-blue-700"
                                      >
                                        <div className="flex items-center gap-3 mb-3">
                                          <Badge
                                            variant="outline"
                                            className="bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 border-blue-300 dark:border-blue-700 capitalize"
                                          >
                                            {platform}
                                          </Badge>
                                        </div>
                                        <p className="text-sm text-muted-foreground leading-relaxed">
                                          {typeof strategy === "string"
                                            ? strategy
                                            : JSON.stringify(strategy)}
                                        </p>
                                      </div>
                                    ),
                                  )}
                            </div>
                          </div>
                        )}

                      {/* Hashtag Strategy */}
                      {contentPackage.hashtags && (
                        <div className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/20 dark:to-purple-900/20 p-6 rounded-xl border border-purple-200 dark:border-purple-800">
                          <div className="flex items-center gap-2 mb-4">
                            <div className="w-2 h-2 bg-purple-600 rounded-full" />
                            <h4 className="font-semibold text-purple-700 dark:text-purple-400">
                              Hashtag Strategy
                            </h4>
                          </div>
                          <div className="grid gap-4">
                            {typeof contentPackage.hashtags === "object" &&
                            contentPackage.hashtags !== null
                              ? Object.entries(contentPackage.hashtags).map(
                                  ([platform, tags]: [string, any]) => (
                                    <div
                                      key={platform}
                                      className="bg-background/80 p-4 rounded-lg border border-purple-200 dark:border-purple-700"
                                    >
                                      <div className="flex items-center gap-2 mb-3">
                                        <Badge
                                          variant="outline"
                                          className="bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 border-purple-300 dark:border-purple-700 capitalize"
                                        >
                                          {platform}
                                        </Badge>
                                        <span className="text-xs text-muted-foreground">
                                          {Array.isArray(tags)
                                            ? tags.length
                                            : 0}{" "}
                                          hashtags
                                        </span>
                                      </div>
                                      {Array.isArray(tags) &&
                                        tags.length > 0 && (
                                          <div className="flex flex-wrap gap-2">
                                            {tags.map(
                                              (
                                                tag: string,
                                                tagIndex: number,
                                              ) => (
                                                <button
                                                  key={tagIndex}
                                                  onClick={() => {
                                                    copy(tag);
                                                    toast({
                                                      title: `Copied: ${tag}`,
                                                    });
                                                  }}
                                                  className="text-sm bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 px-3 py-1 rounded-full border border-purple-200 dark:border-purple-700 hover:bg-purple-200 dark:hover:bg-purple-800 transition-colors cursor-pointer"
                                                >
                                                  {tag}
                                                </button>
                                              ),
                                            )}
                                          </div>
                                        )}
                                    </div>
                                  ),
                                )
                              : // Handle legacy array format
                                Array.isArray(contentPackage.hashtags) && (
                                  <div className="bg-background/80 p-4 rounded-lg border border-purple-200 dark:border-purple-700">
                                    <div className="flex items-center gap-2 mb-3">
                                      <Badge
                                        variant="outline"
                                        className="bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 border-purple-300 dark:border-purple-700"
                                      >
                                        General
                                      </Badge>
                                      <span className="text-xs text-muted-foreground">
                                        {contentPackage.hashtags.length}{" "}
                                        hashtags
                                      </span>
                                    </div>
                                    <div className="flex flex-wrap gap-2">
                                      {contentPackage.hashtags.map(
                                        (tag: string, tagIndex: number) => (
                                          <button
                                            key={tagIndex}
                                            onClick={() => {
                                              copy(tag);
                                              toast({
                                                title: `Copied: ${tag}`,
                                              });
                                            }}
                                            className="text-sm bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 px-3 py-1 rounded-full border border-purple-200 dark:border-purple-700 hover:bg-purple-200 dark:hover:bg-purple-800 transition-colors cursor-pointer"
                                          >
                                            {tag}
                                          </button>
                                        ),
                                      )}
                                    </div>
                                  </div>
                                )}
                          </div>
                        </div>
                      )}

                      {/* Optimization Tips */}
                      {contentPackage.optimizationTips &&
                        contentPackage.optimizationTips.length > 0 && (
                          <div className="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/20 dark:to-orange-900/20 p-6 rounded-xl border border-orange-200 dark:border-orange-800">
                            <div className="flex items-center gap-2 mb-4">
                              <div className="w-2 h-2 bg-orange-600 rounded-full" />
                              <h4 className="font-semibold text-orange-700 dark:text-orange-400">
                                Performance Optimization Tips
                              </h4>
                            </div>
                            <div className="space-y-3">
                              {contentPackage.optimizationTips.map(
                                (tip: string, index: number) => (
                                  <div
                                    key={index}
                                    className="flex items-start gap-3 bg-background/80 p-4 rounded-lg border border-orange-200 dark:border-orange-700"
                                  >
                                    <div className="w-6 h-6 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                                      <span className="text-xs font-bold text-orange-700 dark:text-orange-300">
                                        {index + 1}
                                      </span>
                                    </div>
                                    <p className="text-sm text-foreground leading-relaxed">
                                      {tip}
                                    </p>
                                  </div>
                                ),
                              )}
                            </div>
                          </div>
                        )}

                      {/* Target Audience & Goals */}
                      {(contentPackage.targetAudience ||
                        contentPackage.contentGoals) && (
                        <div className="bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-950/20 dark:to-gray-900/20 p-6 rounded-xl border border-gray-200 dark:border-gray-800">
                          <div className="flex items-center gap-2 mb-4">
                            <div className="w-2 h-2 bg-gray-600 rounded-full" />
                            <h4 className="font-semibold text-gray-700 dark:text-gray-400">
                              Strategy Overview
                            </h4>
                          </div>
                          <div className="grid gap-4">
                            {contentPackage.targetAudience && (
                              <div className="bg-background/80 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                                <h5 className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 uppercase tracking-wide">
                                  Target Audience
                                </h5>
                                <p className="text-sm text-foreground leading-relaxed">
                                  {contentPackage.targetAudience}
                                </p>
                              </div>
                            )}
                            {contentPackage.contentGoals &&
                              contentPackage.contentGoals.length > 0 && (
                                <div className="bg-background/80 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                                  <h5 className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2 uppercase tracking-wide">
                                    Content Goals
                                  </h5>
                                  <div className="space-y-2">
                                    {contentPackage.contentGoals.map(
                                      (goal: string, index: number) => (
                                        <div
                                          key={index}
                                          className="flex items-center gap-2"
                                        >
                                          <div className="w-1.5 h-1.5 bg-gray-400 rounded-full flex-shrink-0" />
                                          <p className="text-sm text-foreground">
                                            {goal}
                                          </p>
                                        </div>
                                      ),
                                    )}
                                  </div>
                                </div>
                              )}
                          </div>
                        </div>
                      )}

                      {/* Viral Score Display (if available) */}
                      {contentPackage.viralScore && (
                        <div className="bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-950/20 dark:to-amber-950/20 p-6 rounded-xl border border-yellow-200 dark:border-yellow-800">
                          <div className="flex items-center gap-2 mb-4">
                            <div className="w-2 h-2 bg-yellow-600 rounded-full" />
                            <h4 className="font-semibold text-yellow-700 dark:text-yellow-400">
                              Viral Potential Score
                            </h4>
                          </div>
                          <div className="flex items-center gap-4">
                            <div className="flex items-center gap-2">
                              <div className="text-3xl font-bold text-yellow-700 dark:text-yellow-400">
                                {contentPackage.viralScore}
                              </div>
                              <div className="text-sm text-yellow-600 dark:text-yellow-500">
                                /10
                              </div>
                            </div>
                            <div className="flex">
                              {[...Array(10)].map((_, i) => (
                                <div
                                  key={i}
                                  className={`w-3 h-3 rounded-full mr-1 ${
                                    i < contentPackage.viralScore
                                      ? "bg-yellow-400"
                                      : "bg-gray-300 dark:bg-gray-600"
                                  }`}
                                />
                              ))}
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Quick Actions for Enterprise Users */}
                      <div className="bg-gradient-to-r from-indigo-50 to-cyan-50 dark:from-indigo-950/20 dark:to-cyan-950/20 p-6 rounded-xl border border-indigo-200 dark:border-indigo-800">
                        <div className="flex items-center gap-2 mb-4">
                          <div className="w-2 h-2 bg-indigo-600 rounded-full" />
                          <h4 className="font-semibold text-indigo-700 dark:text-indigo-400">
                            Quick Actions
                          </h4>
                        </div>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-auto p-3 flex flex-col items-center gap-2 bg-white/80 hover:bg-white border-indigo-200 hover:border-indigo-300"
                            onClick={() => {
                              const fullContent = `${contentPackage.hook || ""}${contentPackage.hook ? "\n\n" : ""}${contentPackage.postText}${contentPackage.callToAction ? "\n\n" + contentPackage.callToAction : ""}`;
                              copy(fullContent);
                              toast({ title: "Full post content copied!" });
                            }}
                          >
                            <Copy className="h-4 w-4 text-indigo-600" />
                            <span className="text-xs text-indigo-700">
                              Copy Full Post
                            </span>
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-auto p-3 flex flex-col items-center gap-2 bg-white/80 hover:bg-white border-indigo-200 hover:border-indigo-300"
                            onClick={() => {
                              const allHashtags =
                                typeof contentPackage.hashtags === "object" &&
                                contentPackage.hashtags !== null
                                  ? Object.values(contentPackage.hashtags)
                                      .flat()
                                      .join(" ")
                                  : Array.isArray(contentPackage.hashtags)
                                    ? contentPackage.hashtags.join(" ")
                                    : "";
                              copy(allHashtags);
                              toast({ title: "All hashtags copied!" });
                            }}
                          >
                            <Hash className="h-4 w-4 text-indigo-600" />
                            <span className="text-xs text-indigo-700">
                              Copy Hashtags
                            </span>
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-auto p-3 flex flex-col items-center gap-2 bg-white/80 hover:bg-white border-indigo-200 hover:border-indigo-300"
                            onClick={() => {
                              const reportContent = `Content Analysis Report\n\n**Target Audience:** ${contentPackage.targetAudience || "Not specified"}\n\n**Content Goals:**\n${contentPackage.contentGoals?.map((goal: string) => `• ${goal}`).join("\n") || "Not specified"}\n\n**Optimization Tips:**\n${contentPackage.optimizationTips?.map((tip: string, i: number) => `${i + 1}. ${tip}`).join("\n") || "Not specified"}${contentPackage.viralScore ? `\n\n**Viral Potential Score:** ${contentPackage.viralScore}/10` : ""}`;
                              copy(reportContent);
                              toast({ title: "Strategy report copied!" });
                            }}
                          >
                            <FileText className="h-4 w-4 text-indigo-600" />
                            <span className="text-xs text-indigo-700">
                              Copy Report
                            </span>
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-auto p-3 flex flex-col items-center gap-2 bg-white/80 hover:bg-white border-indigo-200 hover:border-indigo-300"
                            onClick={() => setIsScheduling(true)}
                          >
                            <Calendar className="h-4 w-4 text-indigo-600" />
                            <span className="text-xs text-indigo-700">
                              Schedule All
                            </span>
                          </Button>
                        </div>
                      </div>
                    </div>
                  );
                }

                // Check for legacy viral package format
                if (contentPackage.content && contentPackage.hashtags) {
                  // Legacy viral content format
                  return (
                    <div className="space-y-4">
                      <div className="bg-muted/30 p-4 rounded-lg border">
                        <h4 className="font-semibold mb-2 text-sm">
                          Post Content
                        </h4>
                        <p className="text-sm whitespace-pre-wrap leading-relaxed">
                          {contentPackage.content}
                        </p>
                      </div>

                      {/* Hook */}
                      {contentPackage.hook && (
                        <div className="bg-muted/30 p-4 rounded-lg border">
                          <h4 className="font-semibold mb-2 text-sm">Hook</h4>
                          <p className="text-sm leading-relaxed">
                            {contentPackage.hook}
                          </p>
                        </div>
                      )}

                      {/* Call to Action */}
                      {contentPackage.callToAction && (
                        <div className="bg-muted/30 p-4 rounded-lg border">
                          <h4 className="font-semibold mb-2 text-sm">
                            Call to Action
                          </h4>
                          <p className="text-sm leading-relaxed">
                            {contentPackage.callToAction}
                          </p>
                        </div>
                      )}

                      {/* Visual Assets */}
                      {(contentPackage.imageUrl || contentPackage.videoUrl) && (
                        <div className="bg-muted/30 p-4 rounded-lg border">
                          <h4 className="font-semibold mb-2 text-sm">
                            Visual Assets
                          </h4>
                          {contentPackage.imageUrl && (
                            <img
                              src={contentPackage.imageUrl}
                              alt="Generated content image"
                              className="rounded-lg border max-w-full h-auto mb-2"
                            />
                          )}
                          {contentPackage.videoUrl && (
                            <video
                              src={contentPackage.videoUrl}
                              className="rounded-lg border max-w-full h-auto"
                              controls
                              preload="metadata"
                            />
                          )}
                        </div>
                      )}

                      {/* Hashtags */}
                      {contentPackage.hashtags && (
                        <div className="bg-muted/30 p-4 rounded-lg border">
                          <h4 className="font-semibold mb-2 text-sm">
                            Hashtags
                          </h4>
                          <div className="flex flex-wrap gap-2">
                            {(typeof contentPackage.hashtags === "object" &&
                            contentPackage.hashtags !== null
                              ? Object.values(contentPackage.hashtags).flat()
                              : Array.isArray(contentPackage.hashtags)
                                ? contentPackage.hashtags
                                : []
                            ).map((tag: string, index: number) => (
                              <span
                                key={index}
                                className="text-sm bg-primary/10 text-primary px-2 py-1 rounded"
                              >
                                {tag}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Platform Strategies */}
                      {contentPackage.platformStrategies && (
                        <div className="bg-muted/30 p-4 rounded-lg border">
                          <h4 className="font-semibold mb-2 text-sm">
                            Platform Strategies
                          </h4>
                          <div className="space-y-2">
                            {typeof contentPackage.platformStrategies ===
                              "object" &&
                              Object.entries(
                                contentPackage.platformStrategies,
                              ).map(([platform, strategy]: [string, any]) => (
                                <div key={platform} className="text-sm">
                                  <strong className="capitalize">
                                    {platform}:
                                  </strong>{" "}
                                  {typeof strategy === "string"
                                    ? strategy
                                    : JSON.stringify(strategy)}
                                </div>
                              ))}
                          </div>
                        </div>
                      )}
                    </div>
                  );
                }

                // Check for simple viral package format
                if (
                  contentPackage.postText &&
                  contentPackage.platformStrategies
                ) {
                  // Legacy format - simplified display
                  return (
                    <div className="space-y-4">
                      <div className="bg-muted/30 p-4 rounded-lg border">
                        <h4 className="font-semibold mb-2 text-sm">
                          Post Content
                        </h4>
                        <p className="text-sm whitespace-pre-wrap leading-relaxed">
                          {contentPackage.postText}
                        </p>
                      </div>
                      {contentPackage.imageUrl && (
                        <div className="bg-muted/30 p-4 rounded-lg border">
                          <h4 className="font-semibold mb-2 text-sm">
                            Generated Image
                          </h4>
                          <img
                            src={contentPackage.imageUrl}
                            alt="Generated content image"
                            className="rounded-lg border max-w-full h-auto"
                          />
                        </div>
                      )}
                    </div>
                  );
                }
              } catch (error) {
                void error;
                // Not a JSON package, continue to other formats
              }

              // Default plain text display with auto-clean + quick copy
              return (
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Switch
                        id={`clean-toggle-${item.id}`}
                        checked={showClean}
                        onCheckedChange={(v) => setShowClean(!!v)}
                      />
                      <Label
                        htmlFor={`clean-toggle-${item.id}`}
                        className="text-xs text-muted-foreground"
                      >
                        Auto-clean (remove image prompts)
                      </Label>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          copy(showClean ? cleanedText : item.content);
                          toast({
                            title: `Copied ${showClean ? "clean" : "raw"} text!`,
                          });
                        }}
                        className="h-8"
                      >
                        <Copy className="h-4 w-4 mr-2" />
                        Copy {showClean ? "Clean" : "Raw"}
                      </Button>
                    </div>
                  </div>
                  <div className="prose dark:prose-invert max-w-none text-sm md:text-base text-muted-foreground whitespace-pre-wrap leading-relaxed">
                    <ReactMarkdown remarkPlugins={[remarkGfm]}>
                      {showClean ? cleanedText : item.content}
                    </ReactMarkdown>
                  </div>
                </div>
              );
            })()
          )}
        </CardContent>
        <CardFooter className="flex flex-col md:flex-row gap-3 md:gap-0 md:justify-between md:items-center pt-3 md:pt-6">
          <div className="flex flex-col md:flex-row md:items-center gap-2">
            <p className="text-xs text-muted-foreground">
              Generated on {formatDate(item.createdAt)}
            </p>
            <Badge
              variant={
                currentStatus === "DRAFT"
                  ? "default"
                  : currentStatus === "FAILED"
                    ? "destructive"
                    : "secondary"
              }
              className="w-fit text-xs px-2 py-1"
            >
              {currentStatus}
            </Badge>
          </div>
          <div className={`flex gap-2 ${isDesktop ? "" : "flex-wrap"}`}>
            {isEditing ? (
              <>
                <Button
                  variant="ghost"
                  onClick={handleCancel}
                  disabled={updateMutation.isLoading}
                  size={isDesktop ? "sm" : "default"}
                  className={`${isDesktop ? "" : "flex-1 min-h-[44px]"} transition-all duration-200 active:scale-95`}
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleSave}
                  disabled={updateMutation.isLoading}
                  size={isDesktop ? "sm" : "default"}
                  className={`${isDesktop ? "" : "flex-1 min-h-[44px]"} transition-all duration-200 active:scale-95`}
                >
                  {updateMutation.isLoading && (
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  )}
                  Save
                </Button>
              </>
            ) : (
              <>
                <TagManager content={item} />
                <Button
                  variant="outline"
                  size={isDesktop ? "sm" : "default"}
                  onClick={() => setIsEditing(true)}
                  className={`${isDesktop ? "" : "min-h-[44px]"} transition-all duration-200 active:scale-95`}
                >
                  <PenSquare className="h-4 w-4 mr-2" />
                  {isDesktop ? "Edit" : "Edit"}
                </Button>
                {currentStatus === "FAILED" && (
                  <Button
                    size={isDesktop ? "sm" : "default"}
                    variant="destructive"
                    onClick={() => retryMutation.mutate({ contentId: item.id })}
                    disabled={retryMutation.isLoading}
                    className={`${isDesktop ? "" : "min-h-[44px]"} transition-all duration-200 active:scale-95`}
                  >
                    <RefreshCw className="h-4 w-4 mr-2" />
                    Retry
                  </Button>
                )}
                {currentStatus === "DRAFT" && contentUrl && (
                  <>
                    <Button
                      size={isDesktop ? "sm" : "default"}
                      variant="outline"
                      onClick={() => setIsScheduling(true)}
                      className={`${isDesktop ? "" : "min-h-[44px]"} transition-all duration-200 active:scale-95`}
                    >
                      <Clock className="h-4 w-4 mr-2" />
                      Schedule
                    </Button>
                    <Button
                      size={isDesktop ? "sm" : "default"}
                      variant="outline"
                      onClick={async () => {
                        try {
                          const res = await apiClient.shareGeneratedContent({
                            contentId: item.id,
                          });
                          const url = new URL(
                            `/share/content/${(res as any).shareId}`,
                            window.location.origin,
                          ).toString();
                          copy(
                            ((item as any)?.title
                              ? `${(item as any).title}\n`
                              : "") + url,
                          );
                          toast({ title: "Share link copied!" });
                        } catch (error) {
                          void error;
                          toast({
                            title: "Failed to create share link",
                            variant: "destructive",
                          });
                        }
                      }}
                      className={`${isDesktop ? "" : "min-h-[44px]"} transition-all duration-200 active:scale-95`}
                    >
                      <Share2 className="h-4 w-4 mr-2" />
                      Share
                    </Button>{" "}
                    {item.type === "VIDEO" && (
                      <a
                        href={contentUrl}
                        download
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <Button
                          size={isDesktop ? "sm" : "default"}
                          variant="outline"
                          className={`${isDesktop ? "" : "min-h-[44px]"} transition-all duration-200 active:scale-95`}
                        >
                          <Download className="h-4 w-4 mr-2" />
                          Download
                        </Button>
                      </a>
                    )}
                  </>
                )}
                <Button
                  size={isDesktop ? "sm" : "default"}
                  variant="destructive"
                  onClick={() => deleteMutation.mutate({ contentId: item.id })}
                  disabled={deleteMutation.isLoading}
                  className={`${isDesktop ? "" : "min-h-[44px]"} transition-all duration-200 active:scale-95`}
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </Button>
              </>
            )}
          </div>
        </CardFooter>
      </Card>
      {isScheduling && (
        <SchedulePostDialog
          isOpen={isScheduling}
          onOpenChange={setIsScheduling}
          item={item}
          sourceType="GENERATED_CONTENT"
          onSchedule={schedulePostMutation.mutate}
          isScheduling={schedulePostMutation.isLoading}
        />
      )}

      {/* Mobile Context Menu */}
      {showContextMenu && (
        <>
          <div
            className="fixed inset-0 bg-black/20 z-40"
            onClick={() => setShowContextMenu(false)}
          />
          <div className="fixed bottom-4 left-4 right-4 bg-background border rounded-lg shadow-lg z-50 p-2">
            <div className="grid grid-cols-2 gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setIsEditing(true);
                  setShowContextMenu(false);
                }}
                className="min-h-[44px] flex items-center justify-center gap-2"
              >
                <PenSquare className="h-4 w-4" />
                Edit
              </Button>
              {currentStatus === "DRAFT" && contentUrl && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setIsScheduling(true);
                    setShowContextMenu(false);
                  }}
                  className="min-h-[44px] flex items-center justify-center gap-2"
                >
                  <Clock className="h-4 w-4" />
                  Schedule
                </Button>
              )}
              {currentStatus === "DRAFT" && contentUrl && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    copy(contentUrl);
                    toast({ title: "Content link copied to clipboard!" });
                    setShowContextMenu(false);
                  }}
                  className="min-h-[44px] flex items-center justify-center gap-2"
                >
                  <Copy className="h-4 w-4" />
                  Copy
                </Button>
              )}
              <Button
                variant="destructive"
                size="sm"
                onClick={() => {
                  deleteMutation.mutate({ contentId: item.id });
                  setShowContextMenu(false);
                }}
                disabled={deleteMutation.isLoading}
                className="min-h-[44px] flex items-center justify-center gap-2"
              >
                <Trash2 className="h-4 w-4" />
                Delete
              </Button>
            </div>
          </div>
        </>
      )}
    </>
  );
}

function InlineContentPreview({
  contentId,
  onClose,
}: {
  contentId: string | null;
  onClose?: () => void;
}) {
  const { toast } = useToast();
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const {
    data: contentItem,
    isLoading,
    isError,
  } = useQuery({
    queryKey: ["generatedContentStatus", contentId],
    queryFn: () =>
      apiClient.getGeneratedContentStatus({ contentId: contentId! }),
    enabled: !!contentId,
    refetchInterval: (data) =>
      data?.status === "GENERATING" || data?.status === "PENDING"
        ? 2000
        : false,
    onSuccess: (data) => {
      if (data && (data.status === "DRAFT" || data.status === "FAILED")) {
        queryClient.invalidateQueries(
          queryKeys.generatedContent(data.pillarId),
        );
      }
    },
  });

  const [isScheduling, setIsScheduling] = useState(false);

  const schedulePostMutation = useMutation(apiClient.schedulePost, {
    onSuccess: () => {
      toast({ title: "Content scheduled successfully!" });
      setIsScheduling(false);
      if (onClose) onClose();
      queryClient.invalidateQueries(queryKeys.scheduledPosts());
    },
    onError: (error) => {
      toast({
        title: "Failed to schedule content",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
      setIsScheduling(false);
    },
  });

  const handleEdit = () => {
    navigate("/create");
    if (onClose) onClose();
  };

  const renderContent = () => {
    if (
      isLoading ||
      !contentItem ||
      contentItem.status === "GENERATING" ||
      contentItem.status === "PENDING"
    ) {
      return (
        <div className="text-center p-6 md:p-8 space-y-3 md:space-y-4">
          <RefreshCw className="h-8 w-8 mx-auto animate-spin text-primary" />
          <p className="text-muted-foreground">Generating your content...</p>
        </div>
      );
    }

    if (isError || contentItem.status === "FAILED") {
      return (
        <Alert variant="destructive">
          <XCircle className="h-4 w-4" />
          <AlertTitle>Generation Failed</AlertTitle>
          <AlertDescription>
            {contentItem?.content || "An error occurred."}
          </AlertDescription>
        </Alert>
      );
    }

    return (
      <div className="space-y-4">
        <div className="flex items-center gap-2">
          <h3 className="text-base md:text-lg font-semibold leading-tight">
            {contentItem.title}
          </h3>
          <Badge variant="outline">{contentItem.type}</Badge>
        </div>
        <div className="border rounded-lg p-3 md:p-4">
          {contentItem.type === "IMAGE" ? (
            <img
              src={contentItem.content}
              alt={contentItem.title}
              className="rounded-lg border max-w-full h-auto"
            />
          ) : (
            <div className="prose prose-sm max-w-none">
              <ReactMarkdown
                remarkPlugins={[remarkGfm]}
                components={{
                  p: ({ children }) => (
                    <p className="text-sm text-muted-foreground whitespace-pre-wrap mb-2">
                      {children}
                    </p>
                  ),
                  h1: ({ children }) => (
                    <h1 className="text-lg font-semibold mb-2">{children}</h1>
                  ),
                  h2: ({ children }) => (
                    <h2 className="text-md font-semibold mb-2">{children}</h2>
                  ),
                  h3: ({ children }) => (
                    <h3 className="text-sm font-semibold mb-1">{children}</h3>
                  ),
                  ul: ({ children }) => (
                    <ul className="list-disc pl-4 mb-2">{children}</ul>
                  ),
                  ol: ({ children }) => (
                    <ol className="list-decimal pl-4 mb-2">{children}</ol>
                  ),
                  li: ({ children }) => (
                    <li className="text-sm text-muted-foreground mb-1">
                      {children}
                    </li>
                  ),
                  strong: ({ children }) => (
                    <strong className="font-semibold">{children}</strong>
                  ),
                  em: ({ children }) => <em className="italic">{children}</em>,
                }}
              >
                {contentItem.content}
              </ReactMarkdown>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <Card className="w-full">
      <CardHeader className="flex flex-row items-center justify-between">
        <div>
          <CardTitle>Content Generated!</CardTitle>
          <CardDescription>
            Here's a preview of your new content. You can edit it further in the
            Content Hub or schedule it to be posted.
          </CardDescription>
        </div>
        {onClose && (
          <Button variant="ghost" size="sm" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        )}
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {renderContent()}
          <div className="flex flex-col md:flex-row gap-2 pt-3 md:pt-4">
            <Button
              variant="outline"
              onClick={handleEdit}
              className="min-h-[44px] md:min-h-auto"
            >
              <Edit className="h-4 w-4 mr-2" />
              Edit in Content Hub
            </Button>
            <Button
              onClick={() => setIsScheduling(true)}
              disabled={!contentItem || contentItem.status !== "DRAFT"}
              className="min-h-[44px] md:min-h-auto"
            >
              <Clock className="h-4 w-4 mr-2" />
              Schedule
            </Button>
          </div>
        </div>
      </CardContent>

      {contentItem && (
        <SchedulePostDialog
          isOpen={isScheduling}
          onOpenChange={setIsScheduling}
          item={contentItem}
          sourceType="GENERATED_CONTENT"
          onSchedule={(data) => {
            let content = contentItem.content;
            if (contentItem.type === "IMAGE") {
              content = `${contentItem.title}`;
            }
            schedulePostMutation.mutate({
              ...data,
              content,
              imageUrl:
                contentItem.type === "IMAGE" ? contentItem.content : undefined,
            });
          }}
          isScheduling={schedulePostMutation.isLoading}
        />
      )}
    </Card>
  );
}

function GeneratedContentTab({
  highlightedPillarId,
  inlinePreviewContentId,
  onPreviewClose,
}: {
  highlightedPillarId: string | null;
  inlinePreviewContentId?: string | null;
  onPreviewClose?: () => void;
}) {
  const {
    data: pillars,
    isLoading: isLoadingPillars,
    isError: isErrorPillars,
  } = useContentPillars();
  const [selectedPillarId, setSelectedPillarId] = useState<string | null>(null);

  useEffect(() => {
    if (highlightedPillarId) {
      setSelectedPillarId(highlightedPillarId);
    } else if (pillars && pillars.length > 0 && !selectedPillarId) {
      setSelectedPillarId(pillars[0]!.id);
    }
  }, [pillars, selectedPillarId, highlightedPillarId]);

  const {
    data: generatedContent,
    isLoading: isLoadingContent,
    isError: isErrorContent,
  } = useGeneratedContent(selectedPillarId || undefined);

  const queryClient = useQueryClient();
  const [isRefreshing, setIsRefreshing] = useState(false);
  const handleRefresh = useCallback(async () => {
    setIsRefreshing(true);
    try {
      await queryClient.invalidateQueries({ queryKey: ["generatedContent"] });
      await queryClient.invalidateQueries({ queryKey: ["contentPillars"] });
    } finally {
      setIsRefreshing(false);
    }
  }, [queryClient]);

  // Pull-to-refresh (mobile)
  usePullToRefresh(handleRefresh);

  // UI/UX enhancements: search and sort toolbar
  const [search, setSearch] = useState("");
  const [sortBy, setSortBy] = useState<"newest" | "oldest" | "title">("newest");

  const visibleContent = React.useMemo(() => {
    const items = (generatedContent ?? []).filter((it: any) => {
      if (!search.trim()) return true;
      const hay = `${it.title ?? ""} ${it.content ?? ""}`.toLowerCase();
      return hay.includes(search.toLowerCase());
    });
    return items.sort((a: any, b: any) => {
      if (sortBy === "title") {
        return (a.title ?? "").localeCompare(b.title ?? "");
      }
      const ad = new Date(a.createdAt).getTime();
      const bd = new Date(b.createdAt).getTime();
      return sortBy === "newest" ? bd - ad : ad - bd;
    });
  }, [generatedContent, search, sortBy]);

  return (
    <Card>
      <CardHeader className="sticky top-0 z-10 bg-card/80 backdrop-blur supports-[backdrop-filter]:bg-card/60">
        <div className="flex items-center justify-between gap-3">
          <div>
            <CardTitle>Generated Content</CardTitle>
            <CardDescription>
              Content generated from your recommendations, organized by pillar.
            </CardDescription>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={handleRefresh}
            disabled={isRefreshing}
            className="shrink-0"
            aria-label="Refresh generated content"
          >
            {isRefreshing ? (
              <RefreshCw className="h-4 w-4 animate-spin mr-2" />
            ) : (
              <RefreshCw className="h-4 w-4 mr-2" />
            )}
            Refresh
          </Button>
        </div>
        {/* Toolbar */}
        <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-3">
          <div className="md:col-span-2">
            <Input
              placeholder="Search titles and text…"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              className="h-9"
            />
          </div>
          <div className="flex items-center gap-2 md:justify-end">
            <span className="text-xs text-muted-foreground hidden md:inline">
              Sort
            </span>
            <Select value={sortBy} onValueChange={(v) => setSortBy(v as any)}>
              <SelectTrigger className="h-9 w-[150px]">
                <SelectValue placeholder="Sort by" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="newest">Newest first</SelectItem>
                <SelectItem value="oldest">Oldest first</SelectItem>
                <SelectItem value="title">Title A–Z</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 md:gap-6">
          <div className="md:col-span-1 md:sticky md:top-20 md:self-start max-h-[70vh] overflow-y-auto">
            <h4 className="font-semibold mb-2">Content Pillars</h4>
            {isLoadingPillars ? (
              <div className="space-y-2">
                <Skeleton className="h-8 w-full" />
                <Skeleton className="h-8 w-full" />
                <Skeleton className="h-8 w-full" />
              </div>
            ) : isErrorPillars ? (
              <Alert variant="destructive">
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>
                  Could not load content pillars.
                </AlertDescription>
              </Alert>
            ) : pillars && pillars.length > 0 ? (
              <div className="flex flex-col space-y-2 max-h-[60vh] md:max-h-[70vh] overflow-y-auto pr-1">
                {pillars.map((pillar) => (
                  <Button
                    key={pillar.id}
                    variant={
                      selectedPillarId === pillar.id ? "secondary" : "ghost"
                    }
                    className="justify-start text-left whitespace-normal break-words h-auto py-2 px-3 leading-snug text-sm md:text-[0.95rem]"
                    onClick={() => setSelectedPillarId(pillar.id)}
                    title={pillar.name}
                  >
                    <span className="block w-full">{pillar.name}</span>
                  </Button>
                ))}
              </div>
            ) : (
              <p className="text-sm text-muted-foreground break-words">
                No content pillars found. Start by generating content from the
                Strategy Hub.
              </p>
            )}
          </div>
          <div className="md:col-span-3">
            {/* Inline Preview for New Content */}
            {inlinePreviewContentId && (
              <InlineContentPreview
                contentId={inlinePreviewContentId}
                onClose={onPreviewClose}
              />
            )}

            {isLoadingContent ? (
              <LoadingSpinner />
            ) : isErrorContent ? (
              <Alert variant="destructive">
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>
                  Could not load content for this pillar.
                </AlertDescription>
              </Alert>
            ) : visibleContent && visibleContent.length > 0 ? (
              <div className="space-y-4 max-w-3xl mx-auto">
                <div className="text-xs text-muted-foreground">
                  Showing {visibleContent.length} item
                  {visibleContent.length === 1 ? "" : "s"}
                </div>
                {visibleContent.map((item: any) => (
                  <GeneratedContentCard key={item.id} item={item} />
                ))}
              </div>
            ) : (
              <EmptyState
                icon={<PenSquare className="h-12 w-12" />}
                title="No Content Yet"
                description="No content has been generated for this pillar. Generate some from the Strategy Hub!"
              />
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

function ImageGenerationTab({
  onImageGenerated,
}: {
  onImageGenerated: (pillarId: string) => void;
}) {
  const [prompt, setPrompt] = useState("");
  // Removed unused upgrade dialog state
  const { toast } = useToast();

  const generateImageMutation = useMutation({
    mutationFn: (prompt: string) =>
      apiClient.generateImageFromPrompt({
        prompt,
      }),
    onSuccess: (data: inferRPCOutputType<"generateImageFromPrompt">) => {
      toast({
        title: "Image Generated Successfully!",
        description:
          "Your new image has been added to the Generated Content library.",
      });
      onImageGenerated(data.pillarId); // Notify parent to switch tab
    },
    onError: (error: Error) => {
      if (
        error.message?.includes("credit") ||
        error.message?.includes("insufficient")
      ) {
        // setUpgradeDialogOpen(true); // Removed upgrade dialog
      } else {
        toast({
          title: "Failed to generate image",
          description:
            error instanceof Error
              ? error.message
              : "An unknown error occurred.",
          variant: "destructive",
        });
      }
    },
  });

  const handleGenerate = () => {
    if (prompt) {
      generateImageMutation.mutate(prompt);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>AI Image Generation</CardTitle>
        <CardDescription>
          Create stunning images for your social media posts with a simple text
          prompt. Generated images will be added to your "Generated Content"
          library.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="image-prompt">Image Prompt</Label>
          <Textarea
            id="image-prompt"
            placeholder="e.g., A futuristic cityscape at sunset, with flying cars and neon lights"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="min-h-[100px]"
          />
        </div>
        <Button
          onClick={handleGenerate}
          disabled={generateImageMutation.isLoading || !prompt}
        >
          {generateImageMutation.isLoading ? (
            <RefreshCw className="h-4 w-4 animate-spin mr-2" />
          ) : (
            <Sparkles className="h-4 w-4 mr-2" />
          )}
          Generate & Add to Library
        </Button>
        {generateImageMutation.isLoading && (
          <div className="flex justify-center items-center p-8">
            <LoadingSpinner />
          </div>
        )}
      </CardContent>
    </Card>
  );
}

function VideoGenerationTab({
  onVideoGenerated,
}: {
  onVideoGenerated: () => void;
}) {
  const [title, setTitle] = useState("");
  const [script, setScript] = useState("");
  // Removed unused upgrade dialog state
  const { toast } = useToast();

  const generateVideoMutation = useMutation({
    mutationFn: apiClient.generateVideoFromScript,
    onSuccess: () => {
      toast({
        title: "Video Generation Started!",
        description:
          "Your new video is being generated and will be available in the Generated Content library.",
      });
      onVideoGenerated(); // Notify parent to switch tab
    },
    onError: (error: Error) => {
      if (
        error.message.includes("credit") ||
        error.message.includes("insufficient")
      ) {
        // setUpgradeDialogOpen(true); // Removed upgrade dialog
      } else {
        toast({
          title: "Failed to generate video",
          description:
            error instanceof Error
              ? error.message
              : "An unknown error occurred.",
          variant: "destructive",
        });
      }
    },
  });

  const handleGenerate = () => {
    if (title && script) {
      generateVideoMutation.mutate({ title, script });
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>AI Video Generation</CardTitle>
        <CardDescription>
          Create engaging videos from a script. Generated videos will be added
          to your "Generated Content" library.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="video-title">Video Title</Label>
          <Input
            id="video-title"
            placeholder="e.g., How to improve your social media engagement"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="video-script">Video Script</Label>
          <Textarea
            id="video-script"
            placeholder="Enter your video script here..."
            value={script}
            onChange={(e) => setScript(e.target.value)}
            className="min-h-[200px]"
          />
        </div>
        <Button
          onClick={handleGenerate}
          disabled={generateVideoMutation.isLoading || !title || !script}
        >
          {generateVideoMutation.isLoading ? (
            <RefreshCw className="h-4 w-4 animate-spin mr-2" />
          ) : (
            <Sparkles className="h-4 w-4 mr-2" />
          )}
          Generate & Add to Library
        </Button>
      </CardContent>
    </Card>
  );
}

function TagManager({ content }: { content: GeneratedContent }) {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [newTag, setNewTag] = useState("");

  const { data: allTags } = useQuery(
    ["contentTags"],
    apiClient.listContentTags,
  );

  const addTagMutation = useMutation(apiClient.addTagToContent, {
    onSuccess: (_, variables) => {
      const tagName = allTags?.find((t) => t.id === variables.tagId)?.name;
      toast({ title: `Tag "${tagName || "New"}" applied` });
      queryClient.invalidateQueries({
        queryKey: ["generatedContent", content.pillarId],
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to add tag",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const removeTagMutation = useMutation(apiClient.removeTagFromContent, {
    onSuccess: (_, variables) => {
      const tagName = allTags?.find((t) => t.id === variables.tagId)?.name;
      toast({ title: `Tag "${tagName || "New"}" removed` });
      queryClient.invalidateQueries({
        queryKey: ["generatedContent", content.pillarId],
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to remove tag",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const createTagMutation = useMutation(apiClient.createContentTag, {
    onSuccess: (newTagData) => {
      toast({ title: `Tag "${newTagData.name}" created.` });
      queryClient.invalidateQueries({ queryKey: queryKeys.contentTags() });
      addTagMutation.mutate({ contentId: content.id, tagId: newTagData.id });
      setNewTag("");
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to create tag",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const contentTagIds = new Set(content.tags.map((t) => t.tagId));

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button size="sm" variant="outline">
          <Tag className="h-4 w-4 mr-2" />
          Tags
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56">
        <DropdownMenuLabel>Apply Tags</DropdownMenuLabel>
        <DropdownMenuSeparator />
        <div className="max-h-40 overflow-y-auto px-1">
          {allTags?.map((tag) => (
            <DropdownMenuCheckboxItem
              key={tag.id}
              checked={contentTagIds.has(tag.id)}
              onCheckedChange={(checked) => {
                if (checked) {
                  addTagMutation.mutate({
                    contentId: content.id,
                    tagId: tag.id,
                  });
                } else {
                  removeTagMutation.mutate({
                    contentId: content.id,
                    tagId: tag.id,
                  });
                }
              }}
            >
              {tag.name}
            </DropdownMenuCheckboxItem>
          ))}
        </div>
        <DropdownMenuSeparator />
        <div className="p-2">
          <Input
            placeholder="Create new tag..."
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter" && newTag.trim()) {
                createTagMutation.mutate({ name: newTag.trim() });
              }
            }}
          />
        </div>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

function DiscoverPage() {
  const location = useLocation();
  const [previewContentId, setPreviewContentId] = useState<string | null>(null);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);

  // Responsive breakpoint handling
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const subTab = location.state?.subTab;
  const highlightedItemId = location.state?.highlightedItemId;

  // Support URL query params for deep-linking into Discover tabs
  const searchParams = new URLSearchParams(location.search);
  const tabParam = searchParams.get("tab") || undefined;
  const subtabParam = searchParams.get("subtab") || undefined;

  const mapTabParam = (
    tab?: string,
    subtab?: string,
  ): "topics" | "viral" | "audience" | "saved" | undefined => {
    const t = (tab || "").toLowerCase();
    const s = (subtab || "").toLowerCase();
    if (
      t === "viral" ||
      t === "viral-potential" ||
      t === "trending-viral" ||
      s === "trend-analysis"
    )
      return "viral";
    if (
      t === "topics" ||
      t === "insights" ||
      t === "trending" ||
      s === "trending-topics"
    )
      return "topics";
    if (t === "audience") return "topics";
    if (t === "saved" || t === "bookmarks" || t === "favorites") return "saved";
    return undefined;
  };

  const initialSubTabFromQuery = mapTabParam(tabParam, subtabParam);
  const resolvedInitialSubTab = (initialSubTabFromQuery || subTab) as
    | "topics"
    | "viral"
    | "saved"
    | undefined;

  return (
    <div className="space-y-6 overflow-x-hidden max-w-full">
      <MetaTags
        title="Discover | SocialWave"
        description="Uncover viral trends, get AI-powered content recommendations, and develop your content strategy with SocialWave's Discover hub."
        keywords="content strategy, viral marketing, trend analysis, social media insights, AI recommendations"
      />
      <StructuredData
        data={{
          "@context": "https://schema.org",
          "@type": "WebPage",
          name: "Discover | SocialWave",
          description:
            "Uncover viral trends, get AI-powered content recommendations, and develop your content strategy.",
        }}
      />

      {/* Brand Setup Indicator */}
      <BrandSetupIndicator className="mb-4" />

      {/* Intelligence Hub Content - No Navigation Tabs */}
      <div className="w-full min-w-0 min-h-[600px] overflow-x-hidden">
        <InsightsTab
          key={`insights-${resolvedInitialSubTab ?? "default"}`}
          setPreviewContentId={setPreviewContentId}
          initialSubTab={resolvedInitialSubTab}
          highlightedItemId={highlightedItemId}
          onRefreshRegistration={() => {
            /* No-op for now */
          }}
        />
      </div>

      {/* Enhanced Content Preview */}
      {previewContentId && (
        <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div
            className={`bg-background border border-border rounded-lg shadow-2xl w-full max-h-[90vh] overflow-auto ${isMobile ? "mx-2" : "max-w-4xl"}`}
          >
            <InlineContentPreview
              contentId={previewContentId}
              onClose={() => setPreviewContentId(null)}
            />
          </div>
        </div>
      )}
    </div>
  );
}

function DocumentUpload() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const { data: documents, isLoading: isLoadingDocuments } =
    useUploadedDocuments();

  const uploadMutation = useMutation({
    mutationFn: apiClient.uploadDocument,
    onSuccess: () => {
      toast({ title: "Document uploaded successfully!" });
      queryClient.invalidateQueries({
        queryKey: queryKeys.uploadedDocuments(),
      });
      setSelectedFile(null);
    },
    onError: (error: Error) => {
      toast({
        title: "Upload failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const deleteMutation = useMutation({
    mutationFn: apiClient.deleteUploadedDocument,
    onSuccess: () => {
      toast({ title: "Document deleted successfully." });
      queryClient.invalidateQueries({
        queryKey: queryKeys.uploadedDocuments(),
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Deletion failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setSelectedFile(event.target.files[0]);
    } else {
      setSelectedFile(null);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      toast({
        title: "No file selected",
        description: "Please select a file to upload.",
        variant: "destructive",
      });
      return;
    }

    const reader = new FileReader();
    reader.readAsDataURL(selectedFile);
    reader.onload = () => {
      const base64Content = reader.result as string;
      if (!base64Content) {
        toast({
          title: "File read error",
          description: "Could not read the selected file.",
          variant: "destructive",
        });
        return;
      }
      uploadMutation.mutate({
        fileName: selectedFile.name,
        fileContent: base64Content,
        fileType: selectedFile.type,
        fileSize: selectedFile.size,
      });
    };
    reader.onerror = () => {
      toast({
        title: "File read error",
        description: "Could not read the selected file.",
        variant: "destructive",
      });
    };
  };

  const formatBytes = (bytes: number, decimals = 2) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
    if (bytes < 1) return `0 Bytes`;
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>My Documents</CardTitle>
        <CardDescription>
          Upload additional documents like chat or search logs to help the AI
          generate more powerful insights.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex gap-4 items-center">
            <Input
              type="file"
              onChange={handleFileChange}
              className="flex-grow"
            />
            <Button
              onClick={handleUpload}
              disabled={!selectedFile || uploadMutation.isLoading}
            >
              {uploadMutation.isLoading ? (
                <RefreshCw className="h-4 w-4 animate-spin mr-2" />
              ) : null}
              Upload Document
            </Button>
          </div>
          {selectedFile && (
            <div className="text-sm text-muted-foreground">
              Selected: {selectedFile.name} ({formatBytes(selectedFile.size)})
            </div>
          )}
        </div>
        <Separator className="my-6" />
        <div>
          <h3 className="text-lg font-medium mb-4">Uploaded Documents</h3>
          {isLoadingDocuments ? (
            <LoadingSpinner />
          ) : documents && documents.length > 0 ? (
            <div className="space-y-2">
              {documents.map((doc) => (
                <div
                  key={doc.id}
                  className="flex items-center justify-between p-3 bg-secondary/20 rounded-lg"
                >
                  <div>
                    <p className="font-medium">{doc.name}</p>
                    <p className="text-sm text-muted-foreground break-words">
                      {doc.fileType} - {formatBytes(doc.size)}
                    </p>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() =>
                      deleteMutation.mutate({ documentId: doc.id })
                    }
                    disabled={
                      deleteMutation.isLoading &&
                      deleteMutation.variables?.documentId === doc.id
                    }
                  >
                    {deleteMutation.isLoading &&
                    deleteMutation.variables?.documentId === doc.id ? (
                      <RefreshCw className="h-4 w-4 animate-spin" />
                    ) : (
                      <Trash2 className="h-4 w-4 text-destructive" />
                    )}
                  </Button>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-muted-foreground text-center py-4">
              No documents uploaded yet.
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

function PostingActivityHeatmap({
  data,
  isLoading,
}: {
  data: { day: number; hour: number; activity: number }[];
  isLoading: boolean;
}) {
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);
  if (isLoading) {
    return (
      <Card className={isMobile ? "" : "lg:col-span-7"}>
        <CardHeader className={isMobile ? "pb-3" : ""}>
          <CardTitle className={isMobile ? "text-base" : "text-lg"}>
            Best Times to Post
          </CardTitle>
          <CardDescription className={isMobile ? "text-sm" : ""}>
            {isMobile
              ? "Your audience activity patterns"
              : "Visualizing your audience's activity by day and hour."}
          </CardDescription>
        </CardHeader>
        <CardContent
          className={`flex items-center justify-center ${isMobile ? "h-64" : "h-96"}`}
        >
          <LoadingSpinner />
        </CardContent>
      </Card>
    );
  }

  if (!data || data.length === 0) {
    return (
      <Card className={isMobile ? "" : "lg:col-span-7"}>
        <CardHeader className={isMobile ? "pb-3" : ""}>
          <CardTitle className={isMobile ? "text-base" : "text-lg"}>
            Best Times to Post
          </CardTitle>
          <CardDescription className={isMobile ? "text-sm" : ""}>
            {isMobile
              ? "Your audience activity patterns"
              : "Visualizing your audience's activity by day and hour."}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <EmptyState
            icon={<BarChart3 />}
            title="Not Enough Data"
            description={
              isMobile
                ? "Need more data for heatmap"
                : "We need more comment data to generate an activity heatmap."
            }
          />
        </CardContent>
      </Card>
    );
  }

  const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const hours = Array.from({ length: 24 }, (_, i) => i);
  const maxActivity = Math.max(...data.map((d) => d.activity), 1);

  const activityGrid: number[][] = Array(7)
    .fill(0)
    .map(() => Array(24).fill(0));
  data.forEach((d) => {
    if (d.day >= 0 && d.day < 7 && d.hour >= 0 && d.hour < 24) {
      activityGrid[d.day]![d.hour] = d.activity;
    }
  });

  return (
    <Card className={isMobile ? "" : "lg:col-span-7"}>
      <CardHeader className={isMobile ? "pb-3" : ""}>
        <CardTitle className={isMobile ? "text-base" : "text-lg"}>
          Best Times to Post
        </CardTitle>
        <CardDescription className={isMobile ? "text-sm" : ""}>
          {isMobile
            ? "Darker = higher engagement"
            : "Darker squares indicate higher engagement. All times are in UTC."}
        </CardDescription>
      </CardHeader>
      <CardContent className={`overflow-x-auto ${isMobile ? "p-3" : ""}`}>
        <div className="inline-block min-w-full">
          <div className={`flex justify-end ${isMobile ? "pr-4" : "pr-8"}`}>
            <div
              className="grid gap-1"
              style={{
                gridTemplateColumns: isMobile
                  ? "repeat(24, minmax(1rem, 1fr))"
                  : "repeat(24, minmax(2rem, 1fr))",
              }}
            >
              {hours.map((hour) => (
                <div
                  key={hour}
                  className={`text-center text-muted-foreground ${isMobile ? "text-xs" : "text-xs"}`}
                >
                  {isMobile
                    ? hour % 8 === 0
                      ? `${hour}`
                      : ""
                    : hour % 6 === 0
                      ? `${hour}`
                      : ""}
                </div>
              ))}
            </div>
          </div>
          <div className="grid grid-rows-7 gap-1">
            {days.map((day, dayIndex) => (
              <div key={dayIndex} className="flex items-center gap-2">
                <div
                  className={`text-xs text-muted-foreground text-right ${isMobile ? "w-6" : "w-8"}`}
                >
                  {isMobile ? day.substring(0, 1) : day}
                </div>
                <div
                  className="grid gap-1 flex-1"
                  style={{
                    gridTemplateColumns: isMobile
                      ? "repeat(24, minmax(1rem, 1fr))"
                      : "repeat(24, minmax(2rem, 1fr))",
                  }}
                >
                  {hours.map((hourIndex) => {
                    const activity = activityGrid[dayIndex]?.[hourIndex] || 0;
                    const opacity =
                      maxActivity > 0 ? activity / maxActivity : 0;
                    return (
                      <TooltipProvider key={hourIndex}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div
                              className={`w-full aspect-square ${isMobile ? "rounded-sm" : "rounded-sm"}`}
                              style={{
                                backgroundColor: `hsla(var(--primary), ${opacity})`,
                                minHeight: isMobile ? "12px" : "16px",
                              }}
                            />
                          </TooltipTrigger>
                          <TooltipContent>
                            <p className={isMobile ? "text-xs" : ""}>
                              {activity} interactions on {day} at {hourIndex}:00
                              UTC
                            </p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    );
                  })}
                </div>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

function NotificationsPage() {
  const navigate = useNavigate();
  const {
    notifications,
    unreadCount,
    totalCount,
    isLoading,
    markAsRead,
    markAllAsRead,
    dismiss,
    isMarkingAllRead,
  } = useNotifications();

  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [isHeaderRefreshing, setIsHeaderRefreshing] = useState(false);
  async function handleRefresh() {
    try {
      setIsHeaderRefreshing(true);
      await Promise.allSettled([
        queryClient.invalidateQueries({ queryKey: ["notifications"] }),
        queryClient.refetchQueries({ queryKey: ["notifications"] }),
        queryClient.invalidateQueries({ queryKey: ["notificationCounts"] }),
        queryClient.refetchQueries({ queryKey: ["notificationCounts"] }),
      ] as unknown as Promise<any>[]);
      toast({ title: "Refreshing notifications…" });
    } catch (e: any) {
      toast({
        title: "Refresh failed",
        description: e?.message ?? "Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsHeaderRefreshing(false);
    }
  }

  usePullToRefresh(async () => {
    await handleRefresh();
  });

  const [filter, setFilter] = useState<"all" | "unread" | "read">("all");
  const [typeFilter, setTypeFilter] = useState<string>("all");

  const handleNotificationClick = (notification: any) => {
    // Handle deep linking based on notification action
    if (notification.actionType === "navigate" && notification.actionUrl) {
      navigate(notification.actionUrl);
    } else if (
      notification.actionType === "external" &&
      notification.actionUrl
    ) {
      window.open(notification.actionUrl, "_blank");
    } else {
      // Default navigation based on notification type
      switch (notification.type) {
        case "engagement":
          navigate("/engage");
          break;
        case "trend":
          navigate("/discover");
          break;
        case "content":
          navigate("/create");
          break;
        case "insight":
          navigate("/analytics");
          break;
        default:
          navigate("/");
      }
    }
  };

  const filteredNotifications = notifications.filter((notification) => {
    if (filter === "unread" && notification.status !== "unread") return false;
    if (filter === "read" && notification.status === "unread") return false;
    if (typeFilter !== "all" && notification.type !== typeFilter) return false;
    return true;
  });

  const notificationTypes = [
    { value: "all", label: "All Types", icon: Bell },
    { value: "engagement", label: "Engagement", icon: MessageSquare },
    { value: "trend", label: "Trends", icon: TrendingUp },
    { value: "content", label: "Content", icon: PenSquare },
    { value: "system", label: "System", icon: Settings },
    { value: "achievement", label: "Achievements", icon: Award },
    { value: "reminder", label: "Reminders", icon: Clock },
    { value: "insight", label: "Insights", icon: Lightbulb },
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-foreground">Notifications</h1>
          <p className="text-muted-foreground mt-1">
            Stay updated with your latest activity and insights
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button
            onClick={handleRefresh}
            disabled={isHeaderRefreshing}
            variant="outline"
            className="transition-all duration-200 active:scale-95"
          >
            <motion.div
              animate={isHeaderRefreshing ? { rotate: 360 } : { rotate: 0 }}
              transition={
                isHeaderRefreshing
                  ? { duration: 1, repeat: Infinity, ease: "linear" }
                  : { duration: 0.3 }
              }
              className="mr-2"
            >
              <RefreshCw className="h-4 w-4" />
            </motion.div>
            Refresh
          </Button>
          {unreadCount > 0 && (
            <Button
              onClick={() => markAllAsRead({})}
              disabled={isMarkingAllRead}
              className="transition-all duration-200 active:scale-95"
            >
              {isMarkingAllRead ? (
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
              ) : (
                <CheckCheck className="h-4 w-4 mr-2" />
              )}
              Mark all read
            </Button>
          )}
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <Bell className="h-5 w-5 text-blue-500" />
              <div>
                <p className="text-sm font-medium">Total</p>
                <p className="text-2xl font-bold">{totalCount}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <AlertCircle className="h-5 w-5 text-orange-500" />
              <div>
                <p className="text-sm font-medium">Unread</p>
                <p className="text-2xl font-bold">{unreadCount}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              <div>
                <p className="text-sm font-medium">Read</p>
                <p className="text-2xl font-bold">{totalCount - unreadCount}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex items-center gap-2">
              <Filter className="h-4 w-4 text-muted-foreground" />
              <span className="text-sm font-medium">Filter by status:</span>
              <div className="flex gap-1">
                {(["all", "unread", "read"] as const).map((status) => (
                  <Button
                    key={status}
                    variant={filter === status ? "default" : "outline"}
                    size="sm"
                    onClick={() => setFilter(status)}
                    className="capitalize"
                  >
                    {status}
                  </Button>
                ))}
              </div>
            </div>
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium">Type:</span>
              <div className="flex gap-1 flex-wrap">
                {notificationTypes.slice(0, 4).map((type) => {
                  const Icon = type.icon;
                  return (
                    <Button
                      key={type.value}
                      variant={
                        typeFilter === type.value ? "default" : "outline"
                      }
                      size="sm"
                      onClick={() => setTypeFilter(type.value)}
                      className="text-xs"
                    >
                      <Icon className="h-3 w-3 mr-1" />
                      {type.label}
                    </Button>
                  );
                })}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Notifications List */}
      <Card>
        <CardContent className="p-0">
          {isLoading ? (
            <div className="p-8 text-center">
              <Loader2 className="h-8 w-8 mx-auto mb-4 animate-spin" />
              <p className="text-muted-foreground">Loading notifications...</p>
            </div>
          ) : filteredNotifications.length === 0 ? (
            <div className="p-8 text-center">
              <Bell className="h-12 w-12 mx-auto mb-4 text-muted-foreground/50" />
              <h3 className="text-lg font-medium mb-2">
                No notifications found
              </h3>
              <p className="text-muted-foreground">
                {filter === "all"
                  ? "You don't have any notifications yet."
                  : `No ${filter} notifications found.`}
              </p>
            </div>
          ) : (
            <div>
              {filteredNotifications.map((notification, index) => (
                <div key={notification.id}>
                  <NotificationItem
                    notification={notification}
                    onRead={(id: string, trackClick?: boolean) =>
                      markAsRead({ id, trackClick })
                    }
                    onDismiss={(id: string) => dismiss({ id })}
                    onNavigate={handleNotificationClick}
                  />
                  {index < filteredNotifications.length - 1 && <Separator />}
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

function AnalyticsPage() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [activeTab, setActiveTab] = useState("overview");

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const { data: accounts, isLoading: isLoadingAccounts } = useQuery({
    queryKey: ["accounts"],
    queryFn: apiClient.getConnectedAccounts,
  });

  const connectedPlatforms = accounts
    ? [...new Set(accounts.map((a) => a.platform))]
    : [];

  const [selectedPlatform, setSelectedPlatform] = useState<string | null>(null);

  const facebookPages = React.useMemo(() => {
    return (
      accounts
        ?.filter(
          (a) =>
            a.platform === "facebook" &&
            a.pages.length > 0 &&
            (!selectedPlatform || selectedPlatform === "facebook"),
        )
        ?.flatMap((a) => a.pages) ?? []
    );
  }, [accounts, selectedPlatform]);

  const [selectedPageId, setSelectedPageId] = useState<string | null>(null);

  useEffect(() => {
    if (facebookPages && facebookPages.length > 0 && !selectedPageId) {
      setSelectedPageId(facebookPages[0]!.pageId);
    } else if (selectedPlatform !== "facebook") {
      setSelectedPageId(null);
    }
  }, [facebookPages, selectedPlatform]);

  const [isHeaderRefreshing, setIsHeaderRefreshing] = useState(false);

  async function handleRefreshAll() {
    try {
      setIsHeaderRefreshing(true);
      await Promise.allSettled([
        queryClient.invalidateQueries({ queryKey: ["accounts"] }),
        queryClient.refetchQueries({ queryKey: ["accounts"] }),
        queryClient.invalidateQueries({ queryKey: ["analyticsSummary"] }),
        queryClient.refetchQueries({ queryKey: ["analyticsSummary"] }),
        queryClient.invalidateQueries({ queryKey: ["postingActivityHeatmap"] }),
        queryClient.refetchQueries({ queryKey: ["postingActivityHeatmap"] }),
        queryClient.invalidateQueries({ queryKey: ["learningInsights"] }),
        queryClient.refetchQueries({ queryKey: ["learningInsights"] }),
        queryClient.invalidateQueries({ queryKey: ["learningAnalytics"] }),
        queryClient.refetchQueries({ queryKey: ["learningAnalytics"] }),
        ...(selectedPlatform === "facebook" && selectedPageId
          ? [
              queryClient.invalidateQueries({
                queryKey: ["pageAnalytics", selectedPageId],
              }),
              queryClient.refetchQueries({
                queryKey: ["pageAnalytics", selectedPageId],
              }),
            ]
          : []),
      ] as unknown as Promise<any>[]);
      toast({ title: "Refreshing analytics…" });
    } catch (e: any) {
      toast({
        title: "Refresh failed",
        description: e?.message ?? "Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsHeaderRefreshing(false);
    }
  }

  usePullToRefresh(async () => {
    await handleRefreshAll();
  });

  const { data: summary, isLoading: isLoadingSummary } = useQuery({
    queryKey: ["analyticsSummary", selectedPageId, selectedPlatform],
    queryFn: () =>
      apiClient.getAnalyticsSummary({
        pageId: selectedPageId || undefined,
        platform: selectedPlatform || undefined,
      }),
  });

  const { data: heatmapData, isLoading: isLoadingHeatmap } = useQuery({
    queryKey: ["postingActivityHeatmap", selectedPageId, selectedPlatform],
    queryFn: () =>
      apiClient.getPostingActivityHeatmap({
        pageId: selectedPageId || undefined,
        platform: selectedPlatform || undefined,
      }),
  });

  const { data: learningInsights, isLoading: isLoadingInsights } = useQuery({
    queryKey: ["learningInsights"],
    queryFn: apiClient.getLearningInsights,
  });

  const { data: learningAnalytics, isLoading: isLoadingLearningAnalytics } =
    useQuery({
      queryKey: ["learningAnalytics"],
      queryFn: apiClient.getLearningAnalytics,
    });

  // Brand Intelligence Analytics
  const { data: brandSignals } = useBrandSignals();

  const { data: feedbackAnalytics } = useQuery(
    ["feedbackAnalytics", { timeRange: 30 }],
    () => apiClient.getFeedbackAnalytics({ timeRange: 30 }),
    { enabled: !!brandSignals },
  );

  const { data: resonanceAnalytics } = useQuery(
    ["resonanceAnalytics", { timeRange: 30 }],
    () =>
      apiClient.getResonanceAnalytics({
        timeRange: 30,
        includeBreakdown: true,
      }),
    { enabled: !!brandSignals },
  );

  const { data: analyticsData, isLoading: isLoadingAnalytics } = useQuery({
    queryKey: ["pageAnalytics", selectedPageId],
    queryFn: () => apiClient.getPageAnalytics({ pageId: selectedPageId! }),
    enabled: !!selectedPageId && selectedPlatform === "facebook",
  });

  const { mutate: refreshAnalytics, isLoading: isRefreshing } = useMutation({
    mutationFn: apiClient.refreshAnalyticsData,
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: ["pageAnalytics", selectedPageId],
      });
      toast({ title: "Analytics data is being refreshed." });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to refresh analytics",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const { mutate: fetchComments, isLoading: isFetchingComments } = useMutation({
    mutationFn: apiClient.fetchComments,
    onSuccess: (result) => {
      queryClient.invalidateQueries({ queryKey: ["analyticsSummary"] });
      queryClient.invalidateQueries({ queryKey: ["pageAnalytics"] });
      toast({
        title: "Comments fetched successfully!",
        description: `Found ${result.newCommentsCount} new comments.`,
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to fetch comments",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const lineChartData = {
    labels: analyticsData?.map((d) => new Date(d.date).toLocaleDateString()),
    datasets: [
      {
        label: "Impressions",
        data: analyticsData?.map((d) => d.impressions),
        borderColor: "hsl(var(--primary))",
        backgroundColor: "hsla(var(--primary), 0.2)",
        fill: true,
        tension: 0.3,
        yAxisID: "y",
      },
      {
        label: "Reach",
        data: analyticsData?.map((d) => d.reach),
        borderColor: "hsl(var(--foreground))",
        backgroundColor: "hsla(var(--foreground), 0.2)",
        tension: 0.3,
        yAxisID: "y",
      },
      {
        label: "Engagement Rate (%)",
        data: analyticsData?.map((d) => d.engagementRate),
        borderColor: "hsl(var(--destructive))",
        backgroundColor: "hsla(var(--destructive), 0.2)",
        tension: 0.3,
        yAxisID: "y1",
      },
    ],
  };

  const lineChartOptions = {
    maintainAspectRatio: false,
    scales: {
      y: {
        type: "linear" as const,
        display: true,
        position: "left" as const,
      },
      y1: {
        type: "linear" as const,
        display: true,
        position: "right" as const,
        grid: {
          drawOnChartArea: false,
        },
        ticks: {
          callback: function (value: string | number) {
            return `${value}%`;
          },
        },
      },
    },
  };

  const sentimentData = {
    labels: Object.keys(summary?.sentimentBreakdown || {}),
    datasets: [
      {
        data: Object.values(summary?.sentimentBreakdown || {}),
        backgroundColor: [
          "hsl(var(--primary))",
          "hsl(var(--muted-foreground))",
          "hsl(var(--destructive))",
        ],
        borderColor: "hsl(var(--background))",
        borderWidth: 2,
      },
    ],
  };

  const AnalyticsStatsCard = ({
    title,
    value,
    change,
    icon,
    description,
  }: {
    title: string;
    value: string;
    change?: number;
    icon: React.ReactNode;
    description: string;
  }) => (
    <Card className="stats-card">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        {icon}
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        <p className="text-xs text-muted-foreground">{description}</p>
      </CardContent>
      {change !== undefined && change !== null && (
        <CardFooter>
          <p
            className={`text-xs font-medium flex items-center ${
              change >= 0 ? "text-green-500" : "text-red-500"
            }`}
          >
            {change >= 0 ? (
              <TrendingUp className="h-4 w-4 mr-1" />
            ) : (
              <TrendingDown className="h-4 w-4 mr-1" />
            )}
            {change.toFixed(1)}% from last period
          </p>
        </CardFooter>
      )}
    </Card>
  );

  return (
    <div className={`${isMobile ? "space-y-4" : "space-y-6"}`}>
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className={`${isMobile ? "space-y-4" : "flex justify-between items-center"}`}
      >
        <div>
          <motion.h1
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.1, duration: 0.5 }}
            className={`font-bold gradient-text ${isMobile ? "text-2xl" : "text-3xl"}`}
          >
            Analytics
          </motion.h1>
          <motion.p
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2, duration: 0.5 }}
            className={`text-muted-foreground ${isMobile ? "text-sm" : "text-lg"}`}
          >
            {isMobile
              ? "Track social media performance"
              : "Track your social media performance and audience engagement."}
          </motion.p>
        </div>

        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.3, duration: 0.5 }}
          className={`flex items-center ${isMobile ? "flex-col space-y-3" : "gap-4"}`}
        >
          <div
            className={`flex items-center gap-2 ${isMobile ? "w-full" : ""}`}
          >
            <motion.select
              whileHover={{ scale: 1.02 }}
              whileFocus={{ scale: 1.02 }}
              value={selectedPlatform || "all"}
              onChange={(e) => {
                setSelectedPlatform(
                  e.target.value === "all" ? null : e.target.value,
                );
                if (e.target.value !== "facebook") {
                  setSelectedPageId(null);
                }
              }}
              className={`px-3 py-2 rounded-md border border-input bg-background transition-all duration-200 hover:border-primary/50 focus:border-primary ${isMobile ? "flex-1" : ""}`}
            >
              <option value="all">All Platforms</option>
              {connectedPlatforms.map((platform) => (
                <option key={platform} value={platform} className="capitalize">
                  {platform}
                </option>
              ))}
            </motion.select>

            {selectedPlatform === "facebook" &&
              facebookPages &&
              facebookPages.length > 0 && (
                <motion.select
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3 }}
                  whileHover={{ scale: 1.02 }}
                  whileFocus={{ scale: 1.02 }}
                  value={selectedPageId || ""}
                  onChange={(e) => setSelectedPageId(e.target.value)}
                  className={`px-3 py-2 rounded-md border border-input bg-background transition-all duration-200 hover:border-primary/50 focus:border-primary ${isMobile ? "flex-1" : ""}`}
                >
                  {facebookPages.map((page: any) => (
                    <option key={page.pageId} value={page.pageId}>
                      {isMobile
                        ? page.pageName.length > 20
                          ? page.pageName.substring(0, 20) + "..."
                          : page.pageName
                        : page.pageName}
                    </option>
                  ))}
                </motion.select>
              )}
          </div>

          <Button
            onClick={handleRefreshAll}
            disabled={isHeaderRefreshing}
            size={isMobile ? "sm" : "default"}
            variant="secondary"
            className={`${isMobile ? "w-full" : ""} relative overflow-hidden group hover:shadow-md transition-all duration-300`}
          >
            <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            <motion.div
              animate={isHeaderRefreshing ? { rotate: 360 } : { rotate: 0 }}
              transition={
                isHeaderRefreshing
                  ? { duration: 1, repeat: Infinity, ease: "linear" }
                  : { duration: 0.3 }
              }
              className="relative z-10"
            >
              <RefreshCw
                className={isMobile ? "mr-1 h-3 w-3" : "mr-2 h-4 w-4"}
              />
            </motion.div>
            <span className="relative z-10">
              {isMobile ? "Refresh" : "Refresh"}
            </span>
          </Button>

          {selectedPlatform === "facebook" && (
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.3 }}
              className="flex gap-2 flex-wrap"
            >
              <Button
                onClick={() => fetchComments()}
                disabled={isFetchingComments}
                size={isMobile ? "sm" : "default"}
                className={`${isMobile ? "flex-1" : ""} relative overflow-hidden group hover:shadow-md transition-all duration-300`}
              >
                <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                <motion.div
                  animate={isFetchingComments ? { rotate: 360 } : { rotate: 0 }}
                  transition={
                    isFetchingComments
                      ? { duration: 1, repeat: Infinity, ease: "linear" }
                      : { duration: 0.3 }
                  }
                  className="relative z-10"
                >
                  <MessageSquare
                    className={isMobile ? "mr-1 h-3 w-3" : "mr-2 h-4 w-4"}
                  />
                </motion.div>
                <span className="relative z-10">
                  {isMobile ? "Fetch" : "Fetch Comments"}
                </span>
              </Button>
              <Button
                onClick={() => {
                  if (selectedPageId) {
                    refreshAnalytics({ pageId: selectedPageId });
                  }
                }}
                disabled={isRefreshing || !selectedPageId}
                size={isMobile ? "sm" : "default"}
                variant="outline"
                className={`${isMobile ? "flex-1" : ""} relative overflow-hidden group hover:shadow-md transition-all duration-300`}
              >
                <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                <motion.div
                  animate={isRefreshing ? { rotate: 360 } : { rotate: 0 }}
                  transition={
                    isRefreshing
                      ? { duration: 1, repeat: Infinity, ease: "linear" }
                      : { duration: 0.3 }
                  }
                  className="relative z-10"
                >
                  <RefreshCw
                    className={isMobile ? "mr-1 h-3 w-3" : "mr-2 h-4 w-4"}
                  />
                </motion.div>
                <span className="relative z-10">
                  {isMobile ? "Refresh" : "Refresh Data"}
                </span>
              </Button>
            </motion.div>
          )}
        </motion.div>
      </motion.div>
      {isLoadingAccounts ? (
        <div className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            {[...Array(4)].map((_, i) => (
              <Card key={i} className="stats-card">
                <CardHeader className="flex flex-row items-center justify-between pb-2">
                  <Skeleton className="h-4 w-20" />
                  <Skeleton className="h-4 w-4 rounded" />
                </CardHeader>
                <CardContent>
                  <Skeleton className="h-8 w-16 mb-2" />
                  <Skeleton className="h-3 w-24" />
                </CardContent>
              </Card>
            ))}
          </div>
          <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-7 w-full max-w-full">
            <Card className="lg:col-span-4">
              <CardHeader>
                <Skeleton className="h-5 w-32" />
                <Skeleton className="h-4 w-48" />
              </CardHeader>
              <CardContent className="h-96">
                <Skeleton className="h-full w-full" />
              </CardContent>
            </Card>
            <Card className="lg:col-span-3">
              <CardHeader>
                <Skeleton className="h-5 w-32" />
                <Skeleton className="h-4 w-48" />
              </CardHeader>
              <CardContent className="h-80">
                <Skeleton className="h-full w-full rounded-full" />
              </CardContent>
            </Card>
          </div>
        </div>
      ) : isLoadingSummary ? (
        <div className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            {[...Array(4)].map((_, i) => (
              <Card key={i} className="stats-card">
                <CardHeader className="flex flex-row items-center justify-between pb-2">
                  <CardTitle className="text-sm font-medium">
                    Loading...
                  </CardTitle>
                  <Skeleton className="h-4 w-4 rounded" />
                </CardHeader>
                <CardContent>
                  <Skeleton className="h-8 w-16 mb-2" />
                  <Skeleton className="h-3 w-24" />
                </CardContent>
              </Card>
            ))}
          </div>
          <LoadingSpinner className="py-8" />
        </div>
      ) : !accounts || accounts.length === 0 ? (
        <EmptyState
          icon={<BarChart3 />}
          title="Connect Your Social Media Accounts"
          description="To view analytics, you need to connect at least one social media account. Connect your Facebook, Twitter, YouTube, or Instagram accounts to start tracking your performance."
        >
          <div className="flex flex-col sm:flex-row gap-2">
            <Button
              onClick={() => navigate("/settings")}
              className="flex items-center gap-2"
            >
              <Settings className="h-4 w-4" />
              Connect Accounts
            </Button>
          </div>
        </EmptyState>
      ) : summary &&
        summary.totalComments === 0 &&
        summary.totalEngagement === 0 ? (
        <EmptyState
          icon={<MessageCircle />}
          title="No Comments Data Yet"
          description="You have connected accounts, but no comments have been fetched yet. Fetch comments from your social media accounts to see analytics data."
        >
          <div className="flex flex-col sm:flex-row gap-2">
            <Button
              onClick={() => navigate("/engage")}
              className="flex items-center gap-2"
            >
              <MessageCircle className="h-4 w-4" />
              Go to Engage Page
            </Button>
            <Button
              variant="outline"
              onClick={() => {
                // Trigger comment fetching
                queryClient.invalidateQueries({ queryKey: ["accounts"] });
                queryClient.invalidateQueries({
                  queryKey: ["analyticsSummary"],
                });
                toast({
                  title: "Refreshing data...",
                  description:
                    "Please check the Engage page to fetch comments first.",
                });
              }}
              className="flex items-center gap-2"
            >
              <RefreshCw className="h-4 w-4" />
              Refresh Data
            </Button>
          </div>
        </EmptyState>
      ) : (
        <>
          <div
            className={`grid gap-4 ${isMobile ? "grid-cols-1" : "md:grid-cols-2 lg:grid-cols-4"}`}
          >
            <AnalyticsStatsCard
              title="Total Engagement"
              value={summary?.totalEngagement?.toLocaleString() || "0"}
              icon={<ThumbsUp className="h-4 w-4 text-muted-foreground" />}
              description="Likes, comments, shares"
            />
            <AnalyticsStatsCard
              title="Response Rate"
              value={`${summary?.responseRate.toFixed(1) || "0"}%`}
              icon={<Percent className="h-4 w-4 text-muted-foreground" />}
              description={`${summary?.totalComments || "0"} total comments`}
            />
            <AnalyticsStatsCard
              title="Followers"
              value={summary?.followerCount.current?.toLocaleString() || "N/A"}
              change={summary?.followerCount.change ?? undefined}
              icon={<Users className="h-4 w-4 text-muted-foreground" />}
              description="Only available for Facebook Pages"
            />
            <AnalyticsStatsCard
              title="Total Comments"
              value={summary?.totalComments.toLocaleString() || "0"}
              icon={<MessageCircle className="h-4 w-4 text-muted-foreground" />}
              description="Across selected platforms"
            />
          </div>
          {/* Mobile: Stack Charts Vertically, Desktop: Side by Side */}
          <div
            className={`grid gap-4 w-full max-w-full ${isMobile ? "grid-cols-1" : "md:grid-cols-2 lg:grid-cols-7"}`}
          >
            <Card className={isMobile ? "" : "lg:col-span-4"}>
              <CardHeader className={isMobile ? "pb-3" : ""}>
                <CardTitle className={isMobile ? "text-base" : "text-lg"}>
                  Impressions & Reach
                </CardTitle>
                <CardDescription className={isMobile ? "text-sm" : ""}>
                  Only available for Facebook Pages.
                </CardDescription>
              </CardHeader>
              <CardContent className={isMobile ? "h-64" : "h-96"}>
                {selectedPlatform === "facebook" && selectedPageId ? (
                  isLoadingAnalytics ? (
                    <LoadingSpinner />
                  ) : analyticsData && analyticsData.length > 0 ? (
                    <Line
                      data={lineChartData}
                      options={{
                        ...lineChartOptions,
                        maintainAspectRatio: false,
                        responsive: true,
                        plugins: {
                          legend: {
                            position: isMobile ? "bottom" : "top",
                            labels: {
                              boxWidth: isMobile ? 12 : 15,
                              font: {
                                size: isMobile ? 10 : 12,
                              },
                            },
                          },
                        },
                      }}
                    />
                  ) : (
                    <EmptyState
                      icon={<BarChart3 />}
                      title="No Analytics Data"
                      description={
                        isMobile
                          ? "No data for this page yet."
                          : "We don't have any analytics data for this page yet. Try refreshing the data."
                      }
                    />
                  )
                ) : (
                  <EmptyState
                    icon={<BarChart3 />}
                    title="Select a Facebook Page"
                    description={
                      isMobile
                        ? "Only available for Facebook."
                        : "This chart is only available for Facebook Pages."
                    }
                  />
                )}
              </CardContent>
            </Card>

            <Card className={isMobile ? "" : "lg:col-span-3"}>
              <CardHeader className={isMobile ? "pb-3" : ""}>
                <CardTitle className={isMobile ? "text-base" : "text-lg"}>
                  Sentiment Breakdown
                </CardTitle>
                <CardDescription className={isMobile ? "text-sm" : ""}>
                  Sentiment analysis of all comments.
                </CardDescription>
              </CardHeader>
              <CardContent
                className={`flex justify-center items-center ${isMobile ? "h-64" : "h-80"}`}
              >
                {summary &&
                Object.values(summary.sentimentBreakdown).some((v) => v > 0) ? (
                  <Doughnut
                    data={sentimentData}
                    options={{
                      responsive: true,
                      maintainAspectRatio: false,
                      plugins: {
                        legend: {
                          position: "bottom",
                          labels: {
                            boxWidth: isMobile ? 12 : 15,
                            font: {
                              size: isMobile ? 10 : 12,
                            },
                          },
                        },
                      },
                    }}
                  />
                ) : (
                  <EmptyState
                    icon={<PieChart />}
                    title="No Sentiment Data"
                    description={
                      isMobile
                        ? "No comments found."
                        : "No comments with sentiment data found."
                    }
                  />
                )}
              </CardContent>
            </Card>
          </div>
          {/* Tabs for different analytics views */}
          <Tabs
            value={activeTab}
            onValueChange={setActiveTab}
            className="w-full"
          >
            <TabsList
              className={`grid w-full ${isMobile ? "grid-cols-1 h-auto" : "grid-cols-4"}`}
            >
              <TabsTrigger
                value="overview"
                className={isMobile ? "w-full" : ""}
              >
                Overview
              </TabsTrigger>
              <TabsTrigger
                value="learning"
                className={isMobile ? "w-full" : ""}
              >
                Learning Insights
              </TabsTrigger>
              <TabsTrigger
                value="correlation"
                className={isMobile ? "w-full" : ""}
              >
                Performance Correlation
              </TabsTrigger>
              <TabsTrigger
                value="intelligence"
                className={isMobile ? "w-full" : ""}
              >
                <Brain className="h-4 w-4 mr-2" />
                Brand Intelligence
              </TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-4">
              <PostingActivityHeatmap
                data={heatmapData || []}
                isLoading={isLoadingHeatmap}
              />
            </TabsContent>

            <TabsContent value="learning" className="space-y-4">
              {isLoadingInsights ? (
                <LoadingSpinner />
              ) : learningInsights && learningInsights.length > 0 ? (
                <div className="grid gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Brain className="h-5 w-5" />
                        AI Learning Insights
                      </CardTitle>
                      <CardDescription>
                        Patterns and insights discovered by analyzing your
                        content performance
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        {learningInsights.map((insight, index) => (
                          <div key={index} className="border rounded-lg p-4">
                            <div className="flex items-start justify-between mb-2">
                              <h4 className="font-medium">{insight.title}</h4>
                              <Badge
                                variant={
                                  insight.confidence > 0.8
                                    ? "default"
                                    : "secondary"
                                }
                              >
                                {Math.round(insight.confidence * 100)}%
                                confident
                              </Badge>
                            </div>
                            <p className="text-sm text-muted-foreground mb-3">
                              {insight.description}
                            </p>
                            {insight.recommendations &&
                              insight.recommendations.length > 0 && (
                                <div className="space-y-2">
                                  <h5 className="text-sm font-medium">
                                    Recommendations:
                                  </h5>
                                  <ul className="list-disc list-inside text-sm text-muted-foreground space-y-1">
                                    {insight.recommendations.map(
                                      (rec, recIndex) => (
                                        <li key={recIndex}>{rec}</li>
                                      ),
                                    )}
                                  </ul>
                                </div>
                              )}
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              ) : (
                <EmptyState
                  icon={<Brain />}
                  title="No Learning Insights Yet"
                  description="AI insights will appear here as your content performance data grows. Keep posting and engaging to unlock personalized insights."
                />
              )}
            </TabsContent>

            <TabsContent value="correlation" className="space-y-4">
              {isLoadingLearningAnalytics ? (
                <LoadingSpinner />
              ) : learningAnalytics ? (
                <div className="grid gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <TrendingUp className="h-5 w-5" />
                        Performance Correlation Analysis
                      </CardTitle>
                      <CardDescription>
                        How different factors correlate with your content
                        performance
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="grid gap-6">
                        {/* Content Length Correlation */}
                        {learningAnalytics.lengthCorrelation && (
                          <div className="space-y-3">
                            <h4 className="font-medium flex items-center gap-2">
                              <FileText className="h-4 w-4" />
                              Content Length vs Performance
                            </h4>
                            <div className="bg-muted/50 rounded-lg p-4">
                              <div className="flex justify-between items-center mb-2">
                                <span className="text-sm text-muted-foreground">
                                  Correlation Strength
                                </span>
                                <Badge
                                  variant={
                                    Math.abs(
                                      learningAnalytics.lengthCorrelation
                                        .correlation,
                                    ) > 0.5
                                      ? "default"
                                      : "secondary"
                                  }
                                >
                                  {(
                                    learningAnalytics.lengthCorrelation
                                      .correlation * 100
                                  ).toFixed(1)}
                                  %
                                </Badge>
                              </div>
                              <p className="text-sm">
                                Optimal length:{" "}
                                {
                                  learningAnalytics.lengthCorrelation
                                    .optimalRange.min
                                }
                                -
                                {
                                  learningAnalytics.lengthCorrelation
                                    .optimalRange.max
                                }{" "}
                                characters
                              </p>
                            </div>
                          </div>
                        )}

                        {/* Timing Correlation */}
                        {learningAnalytics.timingCorrelation && (
                          <div className="space-y-3">
                            <h4 className="font-medium flex items-center gap-2">
                              <Clock className="h-4 w-4" />
                              Posting Time vs Performance
                            </h4>
                            <div className="bg-muted/50 rounded-lg p-4">
                              <div className="flex justify-between items-center mb-2">
                                <span className="text-sm text-muted-foreground">
                                  Best Performance Window
                                </span>
                                <Badge variant="default">
                                  {learningAnalytics.timingCorrelation.bestHours.join(
                                    ", ",
                                  )}
                                  :00
                                </Badge>
                              </div>
                              <p className="text-sm">
                                {learningAnalytics.timingCorrelation.insights}
                              </p>
                            </div>
                          </div>
                        )}

                        {/* Platform Correlation */}
                        {learningAnalytics.platformCorrelation && (
                          <div className="space-y-3">
                            <h4 className="font-medium flex items-center gap-2">
                              <Share2 className="h-4 w-4" />
                              Platform Performance
                            </h4>
                            <div className="grid gap-3">
                              {Object.entries(
                                learningAnalytics.platformCorrelation,
                              ).map(([platform, data]: [string, any]) => (
                                <div
                                  key={platform}
                                  className="bg-muted/50 rounded-lg p-4"
                                >
                                  <div className="flex justify-between items-center mb-2">
                                    <span className="text-sm font-medium capitalize">
                                      {platform}
                                    </span>
                                    <Badge
                                      variant={
                                        data.avgScore > 7
                                          ? "default"
                                          : "secondary"
                                      }
                                    >
                                      {data.avgScore.toFixed(1)}/10
                                    </Badge>
                                  </div>
                                  <p className="text-xs text-muted-foreground">
                                    {data.totalPosts} posts analyzed
                                  </p>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}

                        {/* Hashtag Correlation */}
                        {learningAnalytics.hashtagCorrelation && (
                          <div className="space-y-3">
                            <h4 className="font-medium flex items-center gap-2">
                              <Hash className="h-4 w-4" />
                              Hashtag Performance
                            </h4>
                            <div className="bg-muted/50 rounded-lg p-4">
                              <div className="flex justify-between items-center mb-2">
                                <span className="text-sm text-muted-foreground">
                                  Optimal Hashtag Count
                                </span>
                                <Badge variant="default">
                                  {
                                    learningAnalytics.hashtagCorrelation
                                      .optimalCount
                                  }
                                </Badge>
                              </div>
                              {learningAnalytics.hashtagCorrelation
                                .topPerformingTags.length > 0 && (
                                <div className="mt-3">
                                  <p className="text-xs text-muted-foreground mb-2">
                                    Top performing tags:
                                  </p>
                                  <div className="flex flex-wrap gap-1">
                                    {learningAnalytics.hashtagCorrelation.topPerformingTags
                                      .slice(0, 5)
                                      .map((tag, index) => (
                                        <Badge
                                          key={index}
                                          variant="outline"
                                          className="text-xs"
                                        >
                                          #{tag}
                                        </Badge>
                                      ))}
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              ) : (
                <EmptyState
                  icon={<TrendingUp />}
                  title="No Correlation Data Yet"
                  description="Performance correlation analysis will appear here as you post more content and track its performance."
                />
              )}
            </TabsContent>

            <TabsContent value="intelligence" className="space-y-6">
              <div className="grid gap-6">
                {/* Brand Signals Overview */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <TrendingUp className="h-5 w-5" />
                      Brand Signals Overview
                    </CardTitle>
                    <CardDescription>
                      Real-time insights into your brand performance and
                      audience engagement
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {brandSignals ? (
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-muted/50 p-4 rounded-lg">
                          <div className="text-2xl font-bold text-primary">
                            {brandSignals?.behaviorInsights?.averageResonance?.toFixed(
                              1,
                            ) || "N/A"}
                          </div>
                          <div className="text-sm text-muted-foreground">
                            Overall Brand Score
                          </div>
                        </div>
                        <div className="bg-muted/50 p-4 rounded-lg">
                          <div className="text-2xl font-bold text-green-600">
                            {brandSignals?.behaviorInsights?.interactionStyle ||
                              "N/A"}
                          </div>
                          <div className="text-sm text-muted-foreground">
                            Engagement Trend
                          </div>
                        </div>
                        <div className="bg-muted/50 p-4 rounded-lg">
                          <div className="text-2xl font-bold text-blue-600">
                            {brandSignals?.behaviorInsights?.totalEvents ||
                              "N/A"}
                          </div>
                          <div className="text-sm text-muted-foreground">
                            Audience Growth
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-32">
                        <Loader2 className="h-6 w-6 animate-spin" />
                        <span className="ml-2">Loading brand signals...</span>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Feedback Analytics */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <MessageSquare className="h-5 w-5" />
                      Feedback Analytics
                    </CardTitle>
                    <CardDescription>
                      Analysis of user feedback and response patterns
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {feedbackAnalytics ? (
                      <div className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="bg-muted/50 p-4 rounded-lg">
                            <div className="text-lg font-semibold">
                              {feedbackAnalytics?.summary?.totalFeedback || 0}
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Total Feedback Items
                            </div>
                          </div>
                          <div className="bg-muted/50 p-4 rounded-lg">
                            <div className="text-lg font-semibold text-green-600">
                              {feedbackAnalytics?.summary?.positiveRate?.toFixed(
                                1,
                              ) || 0}
                              %
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Positive Feedback
                            </div>
                          </div>
                        </div>
                        {feedbackAnalytics?.summary?.mostCommonTags && (
                          <div>
                            <h4 className="font-medium mb-2">
                              Feedback Categories
                            </h4>
                            <div className="space-y-2">
                              {feedbackAnalytics.summary.mostCommonTags.map(
                                (tag) => (
                                  <div
                                    key={tag.tag}
                                    className="flex justify-between items-center"
                                  >
                                    <span className="capitalize">
                                      {tag.tag}
                                    </span>
                                    <Badge variant="secondary">
                                      {tag.count}
                                    </Badge>
                                  </div>
                                ),
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-32">
                        <Loader2 className="h-6 w-6 animate-spin" />
                        <span className="ml-2">
                          Loading feedback analytics...
                        </span>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Resonance Analytics */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="h-5 w-5" />
                      Content Resonance Analytics
                    </CardTitle>
                    <CardDescription>
                      How well your content resonates with your audience
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {resonanceAnalytics ? (
                      <div className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div className="bg-muted/50 p-4 rounded-lg">
                            <div className="text-lg font-semibold text-primary">
                              {resonanceAnalytics?.averageResonance?.toFixed(
                                2,
                              ) || "N/A"}
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Avg Resonance Score
                            </div>
                          </div>
                          <div className="bg-muted/50 p-4 rounded-lg">
                            <div className="text-lg font-semibold text-blue-600">
                              {resonanceAnalytics?.highPerformingContent || 0}
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Top Performing Content
                            </div>
                          </div>
                          <div className="bg-muted/50 p-4 rounded-lg">
                            <div className="text-lg font-semibold text-green-600">
                              {resonanceAnalytics?.insights?.improvementTrend ||
                                "N/A"}
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Improvement Trend
                            </div>
                          </div>
                        </div>
                        {resonanceAnalytics?.breakdown &&
                          Object.keys(resonanceAnalytics.breakdown).length >
                            0 && (
                            <div>
                              <h4 className="font-medium mb-2">
                                Content Type Performance
                              </h4>
                              <div className="flex flex-wrap gap-2">
                                {Object.entries(
                                  resonanceAnalytics.breakdown,
                                ).map(([type, data], index) => (
                                  <Badge key={index} variant="outline">
                                    {type}: {(data as any).count}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-32">
                        <Loader2 className="h-6 w-6 animate-spin" />
                        <span className="ml-2">
                          Loading resonance analytics...
                        </span>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Predictive Analytics */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Zap className="h-5 w-5" />
                      Predictive Analytics
                    </CardTitle>
                    <CardDescription>
                      AI-powered predictions for content performance and trends
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="text-center py-8">
                      <Brain className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                      <p className="text-muted-foreground mb-4">
                        Advanced predictive analytics coming soon
                      </p>
                      <Button variant="outline" size="sm">
                        Request Early Access
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </>
      )}
    </div>
  );
}

// Updated landing page with Content Lab positioning
function SharedThreadPage() {
  const { shareId } = useParams();
  const { toast } = useToast();
  const { data, isLoading, isError, refetch } = useQuery(
    ["sharedThread", shareId],
    () => apiClient.getSharedThread({ shareId: shareId! }),
    { enabled: !!shareId },
  );

  if (isLoading) {
    return (
      <div
        className="flex min-h-[50vh] items-center justify-center text-muted-foreground"
        role="status"
        aria-live="polite"
        aria-busy="true"
      >
        Loading shared thread...
      </div>
    );
  }

  if (isError || !data) {
    return (
      <div className="flex min-h-[50vh] items-center justify-center">
        <Card className="max-w-md w-full mx-4">
          <CardHeader>
            <CardTitle>We couldn't open this link</CardTitle>
            <CardDescription>
              This link may be invalid or expired.
            </CardDescription>
          </CardHeader>
          <CardFooter className="gap-2">
            <Button variant="default" onClick={() => refetch()}>
              Try again
            </Button>
            <Button variant="outline" asChild>
              <a href="/">Go Home</a>
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  const thread: any = data;

  return (
    <div className="max-w-3xl mx-auto p-4 sm:p-6">
      <Card>
        <CardHeader>
          <CardTitle className="text-xl">
            {thread.title || "Shared Thread"}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          {Array.isArray(thread.tweets) && thread.tweets.length > 0 ? (
            thread.tweets.map((t: any, i: number) => (
              <div
                key={i}
                className="p-3 rounded-lg bg-muted/40 border text-sm"
              >
                {t.content}
              </div>
            ))
          ) : (
            <p className="text-sm text-muted-foreground">
              No content available.
            </p>
          )}
          <div className="pt-2 flex items-center gap-2">
            <Button
              variant="outline"
              aria-label="Copy share link"
              onClick={() => {
                copy(
                  `${thread.title ? thread.title + "\n" : ""}${window.location.href}`,
                );
                toast({ title: "Share link copied!" });
              }}
            >
              {" "}
              <Share2 className="h-4 w-4 mr-2" /> Copy Link
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function SharedGeneratedContentPage() {
  const { shareId } = useParams();
  const { toast } = useToast();
  const { data, isLoading, isError, refetch } = useQuery(
    ["sharedGenerated", shareId],
    () => apiClient.getSharedGeneratedContent({ shareId: shareId! }),
    { enabled: !!shareId },
  );

  if (isLoading) {
    return (
      <div
        className="flex min-h-[50vh] items-center justify-center text-muted-foreground"
        role="status"
        aria-live="polite"
        aria-busy="true"
      >
        Loading content...
      </div>
    );
  }

  if (isError || !data) {
    return (
      <div className="flex min-h-[50vh] items-center justify-center">
        <Card className="max-w-md w-full mx-4">
          <CardHeader>
            <CardTitle>We couldn't open this link</CardTitle>
            <CardDescription>
              This link may be invalid or expired.
            </CardDescription>
          </CardHeader>
          <CardFooter className="gap-2">
            <Button variant="default" onClick={() => refetch()}>
              Try again
            </Button>
            <Button variant="outline" asChild>
              <a href="/">Go Home</a>
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  const content = data as any;
  const cover = content.customThumbnailUrl || content.thumbnailUrl;

  return (
    <div className="max-w-3xl mx-auto p-4 sm:p-6">
      <Card>
        <CardHeader>
          <CardTitle className="text-xl">{content.title}</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {content.type === "IMAGE" && (
            <img
              src={content.content}
              alt={content.title || "Shared content image"}
              className="rounded-lg border"
            />
          )}
          {content.type === "VIDEO" && (
            <div className="space-y-2">
              {cover && (
                <img
                  src={cover}
                  alt="Video thumbnail"
                  className="rounded-lg border"
                />
              )}
              <a
                href={content.content}
                target="_blank"
                rel="noopener noreferrer"
                className="underline"
                aria-label={`Open video${content.title ? ` for ${content.title}` : ""} in a new tab`}
                title={
                  content.title
                    ? `Open video for ${content.title}`
                    : "Open video"
                }
              >
                {" "}
                Open video
              </a>
            </div>
          )}
          {content.type === "TEXT" && (
            <div className="prose dark:prose-invert max-w-none whitespace-pre-wrap text-sm">
              {content.content}
            </div>
          )}
          <div>
            <Button
              variant="outline"
              aria-label="Copy share link"
              onClick={() => {
                const ok = copy(
                  `${content.title ? content.title + "\n" : ""}${window.location.href}`,
                );
                if (ok) toast({ title: "Share link copied!" });
                else
                  toast({
                    title: "Could not copy link",
                    description: "Please copy it manually.",
                  });
              }}
            >
              <Share2 className="h-4 w-4 mr-2" /> Copy Link
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function App() {
  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <Router>
          <Routes>
            <Route
              path="/share/thread/:shareId"
              element={
                <PublicLayout>
                  <SharedThreadPage />
                </PublicLayout>
              }
            />
            <Route
              path="/share/content/:shareId"
              element={
                <PublicLayout>
                  <SharedGeneratedContentPage />
                </PublicLayout>
              }
            />
            <Route
              path="/blog"
              element={
                <PublicLayout>
                  <BlogPage />
                </PublicLayout>
              }
            />
            <Route
              path="/blog/:slug"
              element={
                <PublicLayout>
                  <BlogPostPage />
                </PublicLayout>
              }
            />
            <Route
              path="/*"
              element={
                <AuthErrorBoundary>
                  <MainApp />
                </AuthErrorBoundary>
              }
            />
          </Routes>
        </Router>
      </QueryClientProvider>
    </ErrorBoundary>
  );
}

function MainApp() {
  const auth = useAuth();
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [hasCheckedOnboarding, setHasCheckedOnboarding] = useState(false);
  const queryClient = useQueryClient();

  // Background prefetch for Discover data when authenticated
  useEffect(() => {
    if (auth.status !== "authenticated") return;

    const w = window as any;
    const schedule = (cb: () => void) =>
      w.requestIdleCallback
        ? w.requestIdleCallback(cb, { timeout: 1500 })
        : window.setTimeout(cb, 800);

    const id = schedule(() => {
      (async () => {
        try {
          await Promise.all([
            queryClient.prefetchQuery(
              ["cachedTrendingTopics"],
              () => apiClient.getTrendingTopicsResults(),
              { staleTime: 30_000, cacheTime: 300_000 },
            ),
            queryClient.prefetchQuery(
              ["savedInsights"],
              () => apiClient.listSavedInsights(),
              { staleTime: 30_000, cacheTime: 300_000 },
            ),
            queryClient.prefetchQuery(
              queryKeys.pages(),
              () => apiClient.getPages(),
              { staleTime: 15 * 60_000, cacheTime: 30 * 60_000 },
            ),
          ]);

          const pages = queryClient.getQueryData<any>(queryKeys.pages());
          const firstPageId =
            Array.isArray(pages) && pages.length > 0 ? pages[0]?.id : null;

          await Promise.allSettled([
            queryClient.prefetchQuery(
              ["advancedInsights", null],
              () => apiClient.getAdvancedInsights({ pageId: undefined }),
              { staleTime: 24 * 60 * 60_000, cacheTime: 24 * 60 * 60_000 },
            ),
            queryClient.prefetchQuery(
              ["advancedInsights", firstPageId],
              () =>
                apiClient.getAdvancedInsights({
                  pageId: firstPageId || undefined,
                }),
              { staleTime: 24 * 60 * 60_000, cacheTime: 24 * 60 * 60_000 },
            ),
          ]);
        } catch (error) {
          void error;
          // silently ignore prefetch errors
        }
      })();
    });

    return () => {
      if (w.cancelIdleCallback && typeof id === "number") {
        w.cancelIdleCallback(id);
      } else if (typeof id === "number") {
        clearTimeout(id);
      }
    };
  }, [auth.status, queryClient]);

  const { data: currentUser, isLoading: isUserLoading } = useQuery({
    queryKey: ["currentUser"],
    queryFn: apiClient.getCurrentUser,
    enabled: auth.status === "authenticated",
    staleTime: 5 * 60 * 1000, // Cache for 5 minutes
  });

  // Disable automatic onboarding popup - users must manually trigger it
  // This prevents the onboarding from appearing automatically
  useEffect(() => {
    if (currentUser && !hasCheckedOnboarding && !isUserLoading) {
      setHasCheckedOnboarding(true);
      // Only mark as checked, don't auto-show onboarding
    }
  }, [currentUser, hasCheckedOnboarding, isUserLoading]);

  // Listen for custom events to trigger onboarding
  useEffect(() => {
    const handleShowOnboarding = () => {
      setShowOnboarding(true);
    };

    const handleStartOnboarding = () => {
      setShowOnboarding(true);
    };

    window.addEventListener("showOnboarding", handleShowOnboarding);
    window.addEventListener("startOnboarding", handleStartOnboarding);

    return () => {
      window.removeEventListener("showOnboarding", handleShowOnboarding);
      window.removeEventListener("startOnboarding", handleStartOnboarding);
    };
  }, []);

  if (auth.status === "loading") {
    return (
      <div className="flex h-screen items-center justify-center bg-background">
        <RefreshCw className="h-10 w-10 animate-spin text-primary" />
      </div>
    );
  }

  if (auth.status === "unauthenticated") {
    return (
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route path="/signup" element={<SignUpPage />} />
        <Route path="*" element={<LandingPage />} />
      </Routes>
    );
  }

  return (
    <Layout>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/engage" element={<EngagePage />} />
        <Route path="/discover" element={<DiscoverPage />} />
        <Route path="/create" element={<CreatePage />} />
        <Route path="/analytics" element={<AnalyticsPage />} />
        <Route path="/schedule" element={<SchedulerPage />} />
        <Route path="/notifications" element={<NotificationsPage />} />
        <Route path="/settings" element={<SettingsPage />} />{" "}
        <Route
          path="/oauth/linkedin/callback"
          element={<LinkedInOAuthCallback />}
        />
        <Route path="*" element={<HomePage />} />
      </Routes>

      {/* Onboarding Guide */}
      <OnboardingGuide
        isOpen={showOnboarding}
        onClose={() => setShowOnboarding(false)}
        currentUser={currentUser}
        onComplete={() => {
          setShowOnboarding(false);
          // Clear localStorage flag and refresh user data
          if (currentUser) {
            localStorage.removeItem(`socialwave_onboarding_${currentUser.id}`);
            localStorage.setItem(
              `socialwave_onboarding_completed_${currentUser.id}`,
              "true",
            );
          }
          queryClient.invalidateQueries({ queryKey: ["currentUser"] });
        }}
      />
    </Layout>
  );
}

const StrategySummary = ({ summary }: { summary: any }) => {
  const { toast } = useToast();
  const [open, setOpen] = useState(false);

  // Fetch saved preferences
  const { refetch: refetchPrefs, isFetching: prefsLoading } = useQuery({
    queryKey: ["strategyPreferences"],
    queryFn: () => apiClient.getStrategyPreferences(),
    staleTime: 30_000,
  });

  // Local editable values
  const [themesInput, setThemesInput] = useState("");
  const [audience, setAudience] = useState("");
  const [informational, setInformational] = useState<number>(0);
  const [inspirational, setInspirational] = useState<number>(0);
  const [entertaining, setEntertaining] = useState<number>(0);
  const [promotional, setPromotional] = useState<number>(0);
  const [kpisInput, setKpisInput] = useState("");

  const parseList = (val: string) =>
    val
      .split(/\n|,/)
      .map((s) => s.trim())
      .filter((s) => s.length > 0);

  const fillFrom = (prefs?: any) => {
    const p = prefs ?? summary;
    if (!p) return;
    setThemesInput((p.keyThemes || []).join(", "));
    setAudience(p.targetAudience || "");
    const mix = p.contentMix || {};
    setInformational(Number(mix.Informational ?? 0));
    setInspirational(Number(mix.Inspirational ?? 0));
    setEntertaining(Number(mix.Entertaining ?? 0));
    setPromotional(Number(mix.Promotional ?? 0));
    setKpisInput((p.kpis || []).join(", "));
  };

  useEffect(() => {
    // Seed the editor with saved preferences when dialog opens, otherwise use current summary
    if (open) {
      void refetchPrefs().then((res) => {
        const prefs = (res.data as { preferences?: any } | undefined)
          ?.preferences;
        if (prefs) fillFrom(prefs);
        else fillFrom(summary);
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open]);

  const updatePrefsMutation = useMutation(apiClient.updateStrategyPreferences, {
    onSuccess: () => {
      toast({ title: "Preferences saved" });
    },
    onError: (err: unknown) => {
      toast({
        title: "Could not save preferences",
        description: err instanceof Error ? err.message : "",
        variant: "destructive",
      });
    },
  });

  const clearPrefsMutation = useMutation(apiClient.clearStrategyPreferences, {
    onSuccess: () => {
      toast({ title: "Preferences cleared" });
      fillFrom(summary);
    },
  });

  const handleSave = async (regenerate: boolean) => {
    const payload = {
      keyThemes: parseList(themesInput),
      targetAudience: audience,
      contentMix: {
        Informational: Number(informational) || 0,
        Inspirational: Number(inspirational) || 0,
        Entertaining: Number(entertaining) || 0,
        Promotional: Number(promotional) || 0,
      },
      kpis: parseList(kpisInput),
    } as const;

    updatePrefsMutation.mutate(payload, {
      onSuccess: () => {
        if (regenerate) {
          // Fire and forget; UI will refetch via existing polling
          void apiClient.refreshContentStrategy();
          toast({
            title: "Regenerating 7‑day plan",
            description: "Updating your calendar with the latest preferences.",
          });
        }
        setOpen(false);
      },
    });
  };

  if (!summary) return null;

  const total =
    (Number(informational) || 0) +
    (Number(inspirational) || 0) +
    (Number(entertaining) || 0) +
    (Number(promotional) || 0);

  return (
    <Card className="mb-8">
      <CardHeader className="flex flex-row items-start justify-between gap-2">
        <div>
          <CardTitle className="gradient-text">
            Content Strategy Summary
          </CardTitle>
          <CardDescription>
            Your high-level plan for the upcoming week.
          </CardDescription>
        </div>
        <Dialog open={open} onOpenChange={setOpen}>
          <Button variant="outline" size="sm" onClick={() => setOpen(true)}>
            Edit
          </Button>
          <DialogContent className="sm:max-w-lg">
            <DialogHeader>
              <DialogTitle>Edit Strategy Summary</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label htmlFor="themes">Key Themes</Label>
                <Input
                  id="themes"
                  placeholder="e.g., Coastal Living, Travel"
                  value={themesInput}
                  onChange={(e) => setThemesInput(e.target.value)}
                />
                <p className="text-xs text-muted-foreground mt-1">
                  Separate with commas or new lines.
                </p>
              </div>
              <div>
                <Label htmlFor="audience">Target Audience</Label>
                <Textarea
                  id="audience"
                  value={audience}
                  onChange={(e) => setAudience(e.target.value)}
                  rows={3}
                />
              </div>
              <div>
                <Label>Content Mix (must total ~100%)</Label>
                <div className="grid grid-cols-2 gap-3 mt-2">
                  <div>
                    <Label className="text-xs">Informational %</Label>
                    <Input
                      type="number"
                      value={informational}
                      onChange={(e) => setInformational(Number(e.target.value))}
                    />
                  </div>
                  <div>
                    <Label className="text-xs">Inspirational %</Label>
                    <Input
                      type="number"
                      value={inspirational}
                      onChange={(e) => setInspirational(Number(e.target.value))}
                    />
                  </div>
                  <div>
                    <Label className="text-xs">Entertaining %</Label>
                    <Input
                      type="number"
                      value={entertaining}
                      onChange={(e) => setEntertaining(Number(e.target.value))}
                    />
                  </div>
                  <div>
                    <Label className="text-xs">Promotional %</Label>
                    <Input
                      type="number"
                      value={promotional}
                      onChange={(e) => setPromotional(Number(e.target.value))}
                    />
                  </div>
                </div>
                <div
                  className={`text-xs mt-1 ${total === 100 ? "text-muted-foreground" : "text-destructive"}`}
                >
                  Total: {total}%{" "}
                  {total !== 100 ? "(will be gently balanced)" : ""}
                </div>
              </div>
              <div>
                <Label htmlFor="kpis">KPIs</Label>
                <Input
                  id="kpis"
                  placeholder="e.g., Engagement Rate, Reach, Follower Growth"
                  value={kpisInput}
                  onChange={(e) => setKpisInput(e.target.value)}
                />
                <p className="text-xs text-muted-foreground mt-1">
                  Separate with commas or new lines.
                </p>
              </div>
            </div>
            <DialogFooter className="sm:justify-between gap-2">
              <div className="flex items-center gap-2">
                <Button
                  variant="secondary"
                  onClick={() => clearPrefsMutation.mutate()}
                  disabled={clearPrefsMutation.isLoading}
                >
                  Reset
                </Button>
              </div>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  onClick={() => handleSave(false)}
                  disabled={prefsLoading || updatePrefsMutation.isLoading}
                >
                  Save
                </Button>
                <Button
                  onClick={() => handleSave(true)}
                  disabled={prefsLoading || updatePrefsMutation.isLoading}
                >
                  Save & Regenerate
                </Button>
              </div>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </CardHeader>
      <CardContent className="space-y-6">
        <div>
          <h4 className="font-semibold mb-2">Key Themes</h4>
          <div className="flex flex-wrap gap-2">
            {summary.keyThemes.map((theme: string, index: number) => (
              <Badge key={index} variant="secondary">
                {theme}
              </Badge>
            ))}
          </div>
        </div>
        <div>
          <h4 className="font-semibold mb-2">Target Audience</h4>
          <p className="text-sm text-muted-foreground break-words">
            {summary.targetAudience}
          </p>
        </div>
        <div>
          <h4 className="font-semibold mb-2">Content Mix</h4>
          <div className="flex items-center gap-4 flex-wrap">
            {Object.entries(summary.contentMix).map(([key, value]) => (
              <div key={key} className="flex items-center">
                <span className="text-sm font-medium mr-2">{key}:</span>
                <span className="text-sm text-primary font-semibold">
                  {value as number}%
                </span>
              </div>
            ))}
          </div>
        </div>
        <div>
          <h4 className="font-semibold mb-2">
            Key Performance Indicators (KPIs)
          </h4>
          <ul className="list-disc pl-5 space-y-1 text-sm text-muted-foreground">
            {summary.kpis.map((kpi: string, index: number) => (
              <li key={index}>{kpi}</li>
            ))}
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function ContentDiscoveryTab({
  setPreviewContentId,
}: {
  setPreviewContentId: (id: string | null) => void;
}) {
  // Selected day for Day Focus view
  const [selectedDayIndex, setSelectedDayIndex] = useState(0);
  // Keyboard navigation for desktop
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === "ArrowRight") {
        setSelectedDayIndex((prev) =>
          Math.min((data?.calendar?.length ?? 1) - 1, prev + 1),
        );
      } else if (e.key === "ArrowLeft") {
        setSelectedDayIndex((prev) => Math.max(0, prev - 1));
      }
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, []);
  const location = useLocation();
  const highlightedPostId = location.state?.highlightedPostId;
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [summaryOpen, setSummaryOpen] = useState<boolean>(
    !(window.innerWidth < 768),
  );
  useEffect(() => {
    setSummaryOpen(!isMobile);
  }, [isMobile]);

  const [feedbackInfo, setFeedbackInfo] = useState<{
    post: any;
    type: "neutral" | "dislike";
  } | null>(null);
  const [postedInfo, setPostedInfo] = useState<{
    post: any;
    type: "love" | "like";
  } | null>(null);

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const { data, isLoading, error, refetch } = useQuery(
    ["contentStrategy"],
    () => apiClient.generateContentStrategy(),
    {
      refetchInterval: (data: any) => {
        if (
          [
            "GENERATING",
            "PENDING",
            "FETCHING_DATA",
            "GENERATING_CALENDAR",
          ].includes(data?.status)
        ) {
          return 5000;
        }
        return false;
      },
    },
  );

  // Optimal times for badges in week chips
  const { data: optimalTimesForWeek } = useQuery(
    ["optimalPostingTimes", "week"],
    () => apiClient.getOptimalPostingTimes({}),
    { staleTime: 5 * 60 * 1000 },
  );
  const getBestTimeForDay = (dayName: string): string | null => {
    const key = (dayName || "").toLowerCase().slice(0, 3);
    const slots = (optimalTimesForWeek?.optimalTimes ?? []).filter((s: any) =>
      (s.dayName ?? "").toLowerCase().startsWith(key),
    );
    const slot = slots[0] ?? (optimalTimesForWeek?.optimalTimes ?? [])[0];
    return slot?.time ?? null;
  };

  const { mutate: refreshStrategyMutation, isLoading: isRefreshingStrategy } =
    useMutation({
      mutationFn: () => apiClient.refreshContentStrategy(),
      onSuccess: () => {
        refetch();
        toast({
          title: "Content strategy being generated",
          description:
            "Your content strategy is being refreshed and will be available shortly.",
        });
      },
      onError: (error: Error) => {
        toast({
          title: "Failed to refresh strategy",
          description:
            error instanceof Error
              ? error.message
              : "An unknown error occurred.",
          variant: "destructive",
        });
      },
    });

  const { mutate: resetStrategyMutation, isLoading: isResettingStrategy } =
    useMutation({
      mutationFn: () => apiClient.resetContentStrategyStatus(),
      onSuccess: () => {
        refetch();
        toast({
          title: "Content strategy reset",
          description: "You can now generate a new strategy.",
        });
      },
      onError: (error: Error) => {
        toast({
          title: "Failed to reset strategy",
          description:
            error instanceof Error
              ? error.message
              : "An unknown error occurred.",
          variant: "destructive",
        });
      },
    });

  const generateContentMutation = useMutation<
    inferRPCOutputType<"generateContentFromRecommendation">,
    unknown,
    inferRPCInputType<"generateContentFromRecommendation">
  >(apiClient.generateContentFromRecommendation, {
    onSuccess: (data) => {
      setPreviewContentId(
        (data as { taskId: string; contentId: string }).contentId,
      );
      queryClient.invalidateQueries(queryKeys.generatedContent());
    },
    onError: (error) => {
      toast({
        title: "Failed to generate content",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const submitFeedbackMutation = useMutation({
    mutationFn: apiClient.submitRecommendationFeedback,
    onSuccess: () => {
      toast({
        title: `Feedback submitted!`,
        description: `Thanks for your feedback. We're now generating fresh insights based on it.`,
      });
      refreshStrategyMutation();
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to submit feedback",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Per-day engagement tactics state
  const [dayTacticsMap, setDayTacticsMap] = useState<Record<number, string[]>>(
    {},
  );
  const pendingDayIndexRef = useRef<number | null>(null);
  const dayTacticsMutation = useMutation(
    apiClient.generatePostEngagementTactics,
    {
      onSuccess: (res: any) => {
        const idx = pendingDayIndexRef.current;
        const tactics: string[] = Array.isArray(res?.tactics)
          ? res.tactics
          : [];
        if (idx !== null) {
          setDayTacticsMap((prev) => ({ ...prev, [idx]: tactics }));
        }
        pendingDayIndexRef.current = null;
      },
      onError: (error: unknown) => {
        pendingDayIndexRef.current = null;
        toast({
          title: "Couldn't get tactics",
          description:
            error instanceof Error ? error.message : "Try again in a moment.",
          variant: "destructive",
        });
      },
    },
  );

  const requestTacticsForDay = (idx: number) => {
    const day = (data as any)?.calendar?.[idx];
    if (!day) return;
    const first = (day.posts ?? [])[0];
    const parts: string[] = [];
    if (first?.title) parts.push(String(first.title));
    if (first?.contentBrief) parts.push(String(first.contentBrief));
    if (first?.caption) parts.push(String(first.caption));
    if (first?.text) parts.push(String(first.text));
    const text = parts.join("\n").slice(0, 2000);
    if (!text) {
      toast({
        title: "No draft to analyze",
        description: "Add a post for this day first, or pick another day.",
      });
      return;
    }
    const platform =
      first?.platform ||
      (Array.isArray(first?.platforms) ? first.platforms[0] : undefined);
    pendingDayIndexRef.current = idx;
    dayTacticsMutation.mutate({ text, platform } as any);
  };

  if (isLoading) {
    return <LoadingSpinner className="py-12" />;
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTitle>Error Loading Strategy</AlertTitle>
        <AlertDescription>{(error as Error).message}</AlertDescription>
      </Alert>
    );
  }

  const isGenerating = [
    "GENERATING",
    "PENDING",
    "FETCHING_DATA",
    "GENERATING_CALENDAR",
  ].includes(data?.status);

  if (!data || data.status === "NONE" || isGenerating) {
    const getGeneratingMessage = () => {
      switch (data?.status) {
        case "PENDING":
          return "Queued for generation...";
        case "FETCHING_DATA":
          return "Analyzing your latest social data...";
        case "GENERATING_CALENDAR":
          return "Building your 7-day content plan...";
        case "GENERATING":
        default:
          return "Generating Strategy...";
      }
    };

    return (
      <EmptyState
        icon={
          isGenerating ? (
            <RefreshCw className="h-12 w-12 animate-spin" />
          ) : (
            <Sparkles className="h-12 w-12" />
          )
        }
        title={
          isGenerating
            ? getGeneratingMessage()
            : "Generate Your Content Strategy"
        }
        description={
          isGenerating
            ? "This may take a few moments. The page will update automatically."
            : "Get started by generating your personalized AI-powered content strategy."
        }
      >
        {!isGenerating && (
          <Button
            onClick={() => refreshStrategyMutation()}
            disabled={isRefreshingStrategy}
          >
            {isRefreshingStrategy ? (
              <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Sparkles className="mr-2 h-4 w-4" />
            )}
            Generate Strategy Now
          </Button>
        )}
        {isGenerating && (
          <Button
            variant="outline"
            className="mt-4"
            onClick={() => resetStrategyMutation()}
            disabled={isResettingStrategy}
          >
            {isResettingStrategy ? (
              <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
            ) : null}
            Cancel
          </Button>
        )}
      </EmptyState>
    );
  }

  if (data.status === "FAILED") {
    return (
      <EmptyState
        icon={<XCircle className="h-12 w-12 text-destructive" />}
        title="Strategy Generation Failed"
        description={
          (data as { error?: string }).error ||
          "There was an error generating your content strategy."
        }
      >
        <Button
          onClick={() => refreshStrategyMutation()}
          disabled={isRefreshingStrategy}
        >
          {isRefreshingStrategy ? "Retrying..." : "Try Again"}
        </Button>
      </EmptyState>
    );
  }

  if (!("calendar" in data) || !("strategySummary" in data)) {
    return (
      <EmptyState
        icon={<XCircle className="h-12 w-12 text-destructive" />}
        title="Incomplete Strategy Data"
        description="The content strategy data is incomplete. Please try refreshing."
      >
        <Button
          onClick={() => refreshStrategyMutation()}
          disabled={isRefreshingStrategy}
        >
          {isRefreshingStrategy ? "Refreshing..." : "Refresh Strategy"}
        </Button>
      </EmptyState>
    );
  }

  return (
    <div className={`${isMobile ? "space-y-4" : "space-y-8"}`}>
      <div
        className={`flex items-center gap-2 ${isMobile ? "justify-between" : "justify-end gap-4"}`}
      >
        {data.updatedAt && (
          <p
            className={`text-muted-foreground break-words ${isMobile ? "text-xs flex-1" : "text-sm"}`}
          >
            {isMobile
              ? `Updated: ${new Date(data.updatedAt).toLocaleDateString()}`
              : `Last updated: ${formatDate(data.updatedAt)}`}
          </p>
        )}
        <Button
          variant="outline"
          size={isMobile ? "sm" : "default"}
          onClick={() => refreshStrategyMutation()}
          disabled={isRefreshingStrategy}
        >
          {isRefreshingStrategy ? (
            <RefreshCw
              className={`animate-spin ${isMobile ? "mr-1 h-3 w-3" : "mr-2 h-4 w-4"}`}
            />
          ) : (
            <RefreshCw className={isMobile ? "mr-1 h-3 w-3" : "mr-2 h-4 w-4"} />
          )}
          {isMobile ? "Refresh" : "Refresh Strategy"}
        </Button>
      </div>

      <Collapsible open={summaryOpen} onOpenChange={setSummaryOpen}>
        <div className="flex items-center justify-between py-1">
          <h2 className="text-sm font-medium text-muted-foreground">
            Content Strategy Summary
          </h2>
          <CollapsibleTrigger asChild>
            <Button variant="ghost" size="sm" className="h-8">
              {summaryOpen ? "Hide" : "Show"}
            </Button>
          </CollapsibleTrigger>
        </div>
        <CollapsibleContent>
          <StrategySummary summary={data.strategySummary} />
        </CollapsibleContent>
      </Collapsible>

      {/* Week Overview Bar */}
      <div className="sticky top-0 z-20 bg-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="overflow-x-auto pb-2 snap-x snap-mandatory px-1">
          <div className="flex gap-2 min-w-max py-2">
            {data.calendar.map((day: any, idx: number) => {
              const date = new Date(day.date);
              const isActive = idx === selectedDayIndex;
              const firstPost = day.posts?.[0];
              const scores = (day.posts ?? []).map(
                (p: any) => Number(p?.viralityScore) || 0,
              );
              const top = scores.length ? Math.max(...scores) : null;
              const count = (day.posts?.length ?? 0) as number;
              return (
                <button
                  key={idx}
                  onClick={(e) => {
                    setSelectedDayIndex(idx);
                    try {
                      (e.currentTarget as HTMLButtonElement).scrollIntoView({
                        behavior: "smooth",
                        inline: "center",
                        block: "nearest",
                      });
                    } catch (error) {
                      void error;
                    }
                  }}
                  className={`rounded-xl border px-3 py-2 text-left transition-colors min-w-[120px] touch-manipulation snap-start ${
                    isActive
                      ? "border-primary ring-2 ring-primary/40 bg-primary/10"
                      : count === 0
                        ? "border-dashed border-border bg-secondary/20"
                        : top && top >= 8
                          ? "bg-gradient-to-tr from-amber-100 to-rose-100 dark:from-amber-900/20 dark:to-rose-900/10 border-amber-300/50"
                          : "bg-secondary/10 border-border"
                  }`}
                >
                  <div className="flex items-center gap-2">
                    <span className="text-xs font-semibold">
                      {day.dayOfWeek}
                    </span>
                    <span className="text-[10px] text-muted-foreground">
                      {date.toLocaleDateString("en-US", {
                        month: "short",
                        day: "numeric",
                      })}
                    </span>
                    <span
                      className={`h-2 w-2 rounded-full ${firstPost ? "bg-emerald-500" : "bg-muted-foreground/50"}`}
                    />
                  </div>
                  {firstPost && (
                    <div className="mt-1">
                      <div className="text-[11px] font-medium line-clamp-1">
                        {firstPost.title}
                      </div>
                      <div className="text-[10px] text-muted-foreground line-clamp-1">
                        {firstPost.format}
                      </div>
                      <div className="flex items-center gap-1 mt-1">
                        {top ? (
                          <span className="text-[10px] px-1.5 py-0.5 rounded-full bg-primary/10 text-primary">
                            🔥 {top}/10
                          </span>
                        ) : null}
                        {(() => {
                          const bt = getBestTimeForDay(day.dayOfWeek);
                          return bt ? (
                            <span className="text-[10px] px-1.5 py-0.5 rounded-full bg-emerald-50 text-emerald-700 border border-emerald-200 dark:bg-emerald-950 dark:text-emerald-300 dark:border-emerald-800">
                              ⏱ {bt}
                            </span>
                          ) : null;
                        })()}
                        {firstPost?.platform ||
                        (Array.isArray(firstPost?.platforms) &&
                          firstPost.platforms[0]) ? (
                          <span className="text-[10px] px-1.5 py-0.5 rounded-full bg-accent text-foreground/80">
                            {(firstPost.platform as string) ||
                              (Array.isArray(firstPost?.platforms)
                                ? firstPost.platforms[0]
                                : "")}
                          </span>
                        ) : null}
                      </div>
                    </div>
                  )}
                </button>
              );
            })}
          </div>
        </div>
      </div>

      {/* Day Focus View */}
      {data.calendar[selectedDayIndex] && (
        <Card className="overflow-hidden">
          <CardHeader className="p-0">
            {(() => {
              const d = data.calendar[selectedDayIndex];
              const scores = (d.posts ?? []).map(
                (p: any) => Number(p?.viralityScore) || 0,
              );
              const top = scores.length ? Math.max(...scores) : null;
              const first = d.posts?.[0];
              const platform =
                first?.platform ||
                (Array.isArray(first?.platforms)
                  ? first.platforms[0]
                  : undefined);
              const bestTime = getBestTimeForDay(d.dayOfWeek);
              return (
                <div
                  className={`p-4 sm:p-5 relative ${top && top >= 8 ? "bg-gradient-to-r from-amber-100 to-rose-100 dark:from-amber-900/20 dark:to-rose-900/10" : "bg-secondary/10"}`}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-semibold text-base sm:text-lg">
                        {d.dayOfWeek}
                      </h3>
                      <p className="text-sm text-muted-foreground">
                        {new Date(d.date).toLocaleDateString("en-US", {
                          month: "short",
                          day: "numeric",
                        })}
                      </p>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="ghost"
                        size={isMobile ? "sm" : "icon"}
                        onClick={() =>
                          setSelectedDayIndex((i) => Math.max(0, i - 1))
                        }
                        disabled={selectedDayIndex === 0}
                        aria-label="Previous day"
                      >
                        ‹
                      </Button>
                      <Button
                        variant="ghost"
                        size={isMobile ? "sm" : "icon"}
                        onClick={() =>
                          setSelectedDayIndex((i) =>
                            Math.min(data.calendar.length - 1, i + 1),
                          )
                        }
                        disabled={selectedDayIndex === data.calendar.length - 1}
                        aria-label="Next day"
                      >
                        ›
                      </Button>
                    </div>
                  </div>
                  <div className="flex flex-wrap items-center gap-2 mt-3">
                    {top ? (
                      <span className="text-[11px] px-2 py-0.5 rounded-full bg-primary/10 text-primary">
                        🔥 Top score {top}/10
                      </span>
                    ) : null}
                    {bestTime ? (
                      <span className="text-[11px] px-2 py-0.5 rounded-full bg-emerald-50 text-emerald-700 border border-emerald-200 dark:bg-emerald-950 dark:text-emerald-300 dark:border-emerald-800">
                        ⏱ Best time {bestTime}
                      </span>
                    ) : null}
                    {platform ? (
                      <span className="text-[11px] px-2 py-0.5 rounded-full bg-accent text-foreground/80">
                        {platform}
                      </span>
                    ) : null}
                    <span className="text-[11px] px-2 py-0.5 rounded-full bg-muted text-muted-foreground">
                      {d.posts?.length ?? 0} post
                      {(d.posts?.length ?? 0) === 1 ? "" : "s"}
                    </span>
                  </div>
                  <div className="flex items-center gap-2 mt-3">
                    <Button
                      size={isMobile ? "sm" : "default"}
                      variant="outline"
                      onClick={() => requestTacticsForDay(selectedDayIndex)}
                      disabled={
                        dayTacticsMutation.isLoading &&
                        pendingDayIndexRef.current === selectedDayIndex
                      }
                    >
                      {dayTacticsMutation.isLoading &&
                      pendingDayIndexRef.current === selectedDayIndex
                        ? "Generating tactics…"
                        : dayTacticsMap[selectedDayIndex]?.length
                          ? "Regenerate tactics"
                          : "Get tactics"}
                    </Button>
                    <a href="/schedule" className="inline-flex">
                      <Button
                        size={isMobile ? "sm" : "default"}
                        variant="secondary"
                      >
                        Open Schedule
                      </Button>
                    </a>
                  </div>
                </div>
              );
            })()}
          </CardHeader>
          <CardContent className="space-y-3">
            {data.calendar[selectedDayIndex].dailyRationale && (
              <p className="text-sm text-muted-foreground p-3 bg-muted/30 rounded-md">
                {data.calendar[selectedDayIndex].dailyRationale}
              </p>
            )}

            <div className="space-y-2">
              {data.calendar[selectedDayIndex].posts?.length ? (
                data.calendar[selectedDayIndex].posts.map((post: any) => (
                  <PostCard
                    key={post.id}
                    post={post}
                    highlighted={post.id === highlightedPostId}
                    dayIndex={selectedDayIndex}
                    onGenerate={(updated) =>
                      generateContentMutation.mutate({
                        recommendation: updated,
                      })
                    }
                    isGenerating={
                      generateContentMutation.isLoading &&
                      generateContentMutation.variables?.recommendation.id ===
                        post.id
                    }
                    onFeedback={(p, feedbackType) => {
                      if (feedbackType === "love" || feedbackType === "like") {
                        setPostedInfo({ post: p, type: feedbackType });
                      } else {
                        setFeedbackInfo({ post: p, type: feedbackType });
                      }
                    }}
                  />
                ))
              ) : (
                <div className="text-sm text-muted-foreground">
                  No posts suggested for this day.
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Day-specific Engagement Tactics */}
      <Card>
        <CardHeader className={isMobile ? "pb-3" : ""}>
          <div className="flex items-center justify-between">
            <CardTitle className={isMobile ? "text-base" : "text-lg"}>
              Engagement Tactics for{" "}
              {data.calendar[selectedDayIndex]?.dayOfWeek}
            </CardTitle>
            <Button
              size={isMobile ? "sm" : "default"}
              variant="outline"
              disabled={
                dayTacticsMutation.isLoading &&
                pendingDayIndexRef.current === selectedDayIndex
              }
              onClick={() => requestTacticsForDay(selectedDayIndex)}
            >
              {dayTacticsMutation.isLoading &&
              pendingDayIndexRef.current === selectedDayIndex
                ? "Generating..."
                : dayTacticsMap[selectedDayIndex]?.length
                  ? "Regenerate"
                  : "Generate"}
            </Button>
          </div>
        </CardHeader>
        <CardContent className={isMobile ? "pt-0" : ""}>
          {dayTacticsMutation.isLoading &&
            pendingDayIndexRef.current === selectedDayIndex && (
              <div className="text-sm text-muted-foreground">
                Analyzing your draft and best times…
              </div>
            )}
          {dayTacticsMap[selectedDayIndex]?.length ? (
            <ul
              className={`list-disc pl-5 space-y-2 ${isMobile ? "text-sm" : "text-sm"}`}
            >
              {(dayTacticsMap[selectedDayIndex] ?? []).map((tactic, index) => (
                <li key={index} className={isMobile ? "leading-relaxed" : ""}>
                  {tactic}
                </li>
              ))}
            </ul>
          ) : (
            <div className="text-sm text-muted-foreground">
              Get a focused checklist of actions tailored to this day's top post
              and platforms.
            </div>
          )}
        </CardContent>
      </Card>
      {feedbackInfo && (
        <FeedbackDialog
          isOpen={!!feedbackInfo}
          onOpenChange={(isOpen) => !isOpen && setFeedbackInfo(null)}
          feedbackType={feedbackInfo.type}
          onSubmit={(feedbackData) => {
            submitFeedbackMutation.mutate({
              recommendationId: feedbackInfo.post.id,
              source: "content-strategy",
              feedbackType: feedbackInfo.type,
              ...feedbackData,
            });
            setFeedbackInfo(null);
          }}
        />
      )}
      {postedInfo && (
        <IPostedThisDialog
          isOpen={!!postedInfo}
          onOpenChange={(isOpen) => !isOpen && setPostedInfo(null)}
          post={postedInfo.post}
          onSubmit={() => {
            submitFeedbackMutation.mutate({
              recommendationId: postedInfo.post.id,
              source: "content-strategy",
              feedbackType: postedInfo.type,
            });
            setPostedInfo(null);
          }}
        />
      )}
    </div>
  );
}

const PostCard = ({
  post,
  onGenerate,
  isGenerating,
  onFeedback,
  highlighted,
  dayIndex,
}: {
  post: any;
  onGenerate: (post: any) => void;
  isGenerating: boolean;
  onFeedback: (
    post: any,
    feedbackType: "love" | "like" | "neutral" | "dislike",
  ) => void;
  highlighted?: boolean;
  dayIndex: number;
}) => {
  const cardRef = useRef<HTMLDivElement>(null);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [showQuickFeedback, setShowQuickFeedback] = useState<
    null | "neutral" | "dislike"
  >(null);
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [feedbackComment, setFeedbackComment] = useState("");
  const [isEditing, setIsEditing] = useState(false);
  const [editTitle, setEditTitle] = useState<string>(post.title ?? "");
  const [editBrief, setEditBrief] = useState<string>(post.contentBrief ?? "");
  useEffect(() => {
    setEditTitle(post.title ?? "");
    setEditBrief(post.contentBrief ?? "");
  }, [post?.id]);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const regenerateDayMutation = useMutation<
    inferRPCOutputType<"regenerateStrategyDay">,
    unknown,
    inferRPCInputType<"regenerateStrategyDay">
  >(apiClient.regenerateStrategyDay, {
    onSuccess: () => {
      queryClient.invalidateQueries(["contentStrategy"]);
      toast({
        title: "Day regenerated",
        description: "The plan for this day has been updated.",
      });
      setIsEditing(false);
    },
    onError: (error: any) => {
      toast({
        title: "Could not regenerate day",
        description: (error as Error)?.message || "Please try again.",
        variant: "destructive",
      });
    },
  });

  const quickFeedbackOptionsDislike = [
    "Not relevant to my brand",
    "Tone is off",
    "Topic is uninteresting",
    "Content is inaccurate",
    "Already posted something similar",
    "Other",
  ];
  const quickFeedbackOptionsNeutral = [
    "It's good, but not great",
    "I'd change a few things",
    "Not the right time for this",
    "Missing some key information",
    "Too generic",
    "Other",
  ];

  const submitQuickFeedbackMutation = useMutation(
    apiClient.submitRecommendationFeedback,
    {
      onSuccess: () => {
        toast({
          title: "Feedback submitted!",
          description: "Thanks—future suggestions will be smarter.",
        });
        setShowQuickFeedback(null);
        setSelectedTags([]);
        setFeedbackComment("");
      },
      onError: (error: Error) => {
        toast({
          title: "Failed to submit feedback",
          description: error.message,
          variant: "destructive",
        });
      },
    },
  );

  const handleQuickFeedbackSubmit = () => {
    if (!showQuickFeedback) return;
    submitQuickFeedbackMutation.mutate({
      recommendationId: post.id,
      source: "content-strategy",
      feedbackType: showQuickFeedback,
      feedbackTags: selectedTags,
      feedbackComment,
    });
  };

  const openQuickFeedback = (type: "neutral" | "dislike") => {
    setShowQuickFeedback(type);
    setSelectedTags([]);
    setFeedbackComment("");
  };

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  useEffect(() => {
    if (highlighted && cardRef.current) {
      cardRef.current.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  }, [highlighted]);

  return (
    <Card
      ref={cardRef}
      className={`bg-card/50 hover:bg-card/80 transition-colors duration-200 flex flex-col justify-between ${highlighted ? "border-primary ring-2 ring-primary ring-offset-2" : ""}`}
    >
      <div>
        <CardHeader className={isMobile ? "p-3 pb-2" : "p-3"}>
          <div
            className={`flex items-start gap-2 ${isMobile ? "flex-col" : "justify-between"}`}
          >
            <CardTitle
              className={`font-bold leading-tight ${isMobile ? "text-sm" : "text-sm"}`}
            >
              {post.title}
            </CardTitle>
            <Badge
              variant="secondary"
              className={`text-xs h-fit ${isMobile ? "self-start" : ""}`}
            >
              {post.format}
            </Badge>
          </div>
        </CardHeader>
        <CardContent
          className={`text-muted-foreground space-y-2 ${isMobile ? "p-3 pt-0 text-xs" : "p-3 pt-0 text-xs"}`}
        >
          <div className="flex items-center justify-between gap-2">
            <p className="text-xs text-muted-foreground line-clamp-2">
              {post.contentBrief}
            </p>
            <Button
              variant="ghost"
              size="sm"
              className="h-7 px-2"
              onClick={() => setDetailsOpen((o) => !o)}
            >
              <span className="flex items-center gap-1 text-xs">
                {detailsOpen ? "Hide details" : "Show details"}
                {detailsOpen ? (
                  <ChevronUp className="h-3 w-3" />
                ) : (
                  <ChevronDown className="h-3 w-3" />
                )}
              </span>
            </Button>
          </div>
          {detailsOpen && (
            <div className="space-y-2 pt-2">
              <div>
                <span className="text-foreground font-medium text-xs">
                  Brief:
                </span>
                <p className="text-xs leading-relaxed mt-1">
                  {post.contentBrief}
                </p>
              </div>
              <div>
                <span className="text-foreground font-medium text-xs">
                  Why this works:
                </span>
                <p className="text-xs leading-relaxed mt-1">{post.rationale}</p>
              </div>
              <div>
                <span className="text-foreground font-medium text-xs">
                  Tactics:
                </span>
                <p className="text-xs leading-relaxed mt-1">{post.cta}</p>
              </div>
              {post.trendingTopics && post.trendingTopics.length > 0 && (
                <div>
                  <span className="text-foreground font-medium text-xs">
                    Trending Topics:
                  </span>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {post.trendingTopics.map((topic: string, index: number) => (
                      <Badge
                        key={index}
                        variant="outline"
                        className="text-xs px-2 py-0.5 bg-orange-50 text-orange-700 border-orange-200 dark:bg-orange-950 dark:text-orange-300 dark:border-orange-800"
                      >
                        {topic}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
              {post.viralInsights && post.viralInsights.length > 0 && (
                <div>
                  <span className="text-foreground font-medium text-xs">
                    Viral Insights:
                  </span>
                  <div className="space-y-1 mt-1">
                    {post.viralInsights.map(
                      (insight: string, index: number) => (
                        <div
                          key={index}
                          className="text-xs p-2 bg-blue-50 border border-blue-200 rounded-md text-blue-700 dark:bg-blue-950 dark:text-blue-300 dark:border-blue-800"
                        >
                          {insight}
                        </div>
                      ),
                    )}
                  </div>
                </div>
              )}
            </div>
          )}
          <div className="flex items-center justify-between pt-2">
            <div className="flex items-center gap-2">
              <Switch
                id={`quick-edit-${post.id}`}
                checked={isEditing}
                onCheckedChange={setIsEditing}
              />
              <Label htmlFor={`quick-edit-${post.id}`} className="text-xs">
                Quick edit
              </Label>
            </div>
          </div>
          {isEditing && (
            <div className="space-y-2 pt-2">
              <div className="space-y-1">
                <Label className="text-xs">Title</Label>
                <Input
                  value={editTitle}
                  onChange={(e) => setEditTitle(e.target.value)}
                  className="h-8 text-xs"
                />
              </div>
              <div className="space-y-1">
                <Label className="text-xs">Brief</Label>
                <Textarea
                  value={editBrief}
                  onChange={(e) => setEditBrief(e.target.value)}
                  className="text-xs"
                />
              </div>
            </div>
          )}
          <div
            className={`flex items-center gap-2 pt-2 ${isMobile ? "justify-center" : ""}`}
          >
            <div className="flex items-center gap-1 bg-primary/10 px-2 py-1 rounded-full">
              <TrendingUp className="h-3 w-3 text-primary" />
              <span className="text-xs font-medium">
                Score: {post.viralityScore}/10
              </span>
            </div>
          </div>
        </CardContent>
      </div>
      <CardFooter
        className={`mt-auto ${isMobile ? "p-3 pt-2 flex-col gap-3" : "p-3 flex flex-wrap gap-2 items-center justify-between"}`}
      >
        <Button
          size={isMobile ? "default" : "sm"}
          variant="outline"
          className={`text-xs font-medium ${isMobile ? "w-full h-9" : "h-7"}`}
          onClick={() => {
            const t = editTitle?.trim() ?? "";
            const b = editBrief?.trim() ?? "";
            if (!t || !b) {
              toast({
                title: "Please fill in title and brief before generating.",
              });
              return;
            }
            const updated = {
              ...post,
              title: editTitle,
              contentBrief: editBrief,
            };
            onGenerate(updated);
          }}
          disabled={isGenerating}
        >
          {isGenerating ? (
            <RefreshCw
              className={`animate-spin ${isMobile ? "mr-2 h-4 w-4" : "h-3 w-3 mr-1"}`}
            />
          ) : (
            <Sparkles className={isMobile ? "mr-2 h-4 w-4" : "h-3 w-3 mr-1"} />
          )}
          Generate Content
        </Button>
        <Button
          size={isMobile ? "default" : "sm"}
          variant="ghost"
          className={`text-xs font-medium ${isMobile ? "w-full h-9" : "h-7"}`}
          onClick={() => {
            const t = (editTitle ?? post.title ?? "").trim();
            const b = (editBrief ?? post.contentBrief ?? "").trim();
            regenerateDayMutation.mutate({
              dayIndex,
              basePost: {
                id: post.id,
                title: t,
                contentBrief: b,
                format: post.format,
                pillar: post.pillar,
                targetPlatforms: post.targetPlatforms,
                trendingTopics: post.trendingTopics,
                viralInsights: post.viralInsights,
              },
            });
          }}
          disabled={regenerateDayMutation.isLoading}
        >
          {regenerateDayMutation.isLoading ? (
            <RefreshCw
              className={`animate-spin ${isMobile ? "mr-2 h-4 w-4" : "h-3 w-3 mr-1"}`}
            />
          ) : null}
          Regenerate Day
        </Button>

        <div
          className={`flex gap-1 ${isMobile ? "justify-center w-full" : ""}`}
        >
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="icon"
                  variant="ghost"
                  className={`hover:text-red-500 ${isMobile ? "h-8 w-8" : "h-7 w-7"}`}
                  onClick={() => onFeedback(post, "love")}
                >
                  <Heart className={isMobile ? "h-4 w-4" : "h-4 w-4"} />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Love this!</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="icon"
                  variant="ghost"
                  className={`hover:text-green-500 ${isMobile ? "h-8 w-8" : "h-7 w-7"}`}
                  onClick={() => onFeedback(post, "like")}
                >
                  <ThumbsUp className={isMobile ? "h-4 w-4" : "h-4 w-4"} />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>I like this</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="icon"
                  variant="ghost"
                  className={`hover:text-yellow-500 ${isMobile ? "h-8 w-8" : "h-7 w-7"}`}
                  onClick={() => openQuickFeedback("neutral")}
                >
                  <Meh className={isMobile ? "h-4 w-4" : "h-4 w-4"} />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>It's okay</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="icon"
                  variant="ghost"
                  className={`hover:text-gray-500 ${isMobile ? "h-8 w-8" : "h-7 w-7"}`}
                  onClick={() => openQuickFeedback("dislike")}
                >
                  <ThumbsDown className={isMobile ? "h-4 w-4" : "h-4 w-4"} />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Not for me</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>

        {showQuickFeedback && (
          <div className={`w-full ${isMobile ? "mt-3" : "mt-2"}`}>
            <div className="p-2 border rounded-lg bg-secondary/20">
              <div className="flex flex-wrap gap-2 mb-2">
                {(showQuickFeedback === "dislike"
                  ? quickFeedbackOptionsDislike
                  : quickFeedbackOptionsNeutral
                ).map((option) => (
                  <Button
                    key={option}
                    size="sm"
                    variant={
                      selectedTags.includes(option) ? "secondary" : "outline"
                    }
                    className="rounded-full h-7 text-xs"
                    onClick={() =>
                      setSelectedTags((prev) =>
                        prev.includes(option)
                          ? prev.filter((t) => t !== option)
                          : [...prev, option],
                      )
                    }
                  >
                    {selectedTags.includes(option) && (
                      <Check className="h-3 w-3 mr-1" />
                    )}
                    {option}
                  </Button>
                ))}
              </div>
              <Textarea
                placeholder="Tell us more... (optional)"
                value={feedbackComment}
                onChange={(e) => setFeedbackComment(e.target.value)}
                className="text-xs"
              />
              <div className="flex items-center gap-2 mt-2">
                <Button
                  size="sm"
                  onClick={handleQuickFeedbackSubmit}
                  disabled={submitQuickFeedbackMutation.isLoading}
                  className="h-8"
                >
                  {submitQuickFeedbackMutation.isLoading ? (
                    <RefreshCw className="h-4 w-4 animate-spin mr-1" />
                  ) : null}
                  Submit
                </Button>
                <Button
                  size="sm"
                  variant="ghost"
                  className="h-8"
                  onClick={() => setShowQuickFeedback(null)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        )}
      </CardFooter>
    </Card>
  );
};

function AuthLayout({
  title,
  description,
  children,
}: {
  title: string;
  description: string;
  children: React.ReactNode;
}) {
  return (
    <div className="w-full min-h-screen grid grid-cols-1 lg:grid-cols-2">
      <div className="hidden lg:flex flex-col items-center justify-center bg-secondary/30 p-12 text-center">
        <div className="flex items-center gap-3 mb-4">
          <div className="h-12 w-12 flex items-center justify-center bg-primary rounded-lg text-primary-foreground shadow-md">
            <MessageSquare className="h-7 w-7" />
          </div>
          <span className="text-3xl font-bold gradient-text">SocialWave</span>
        </div>
        <h2 className="text-3xl font-bold mt-4">
          From Insight to Impact, Efficiently.
        </h2>
        <p className="text-muted-foreground mt-2 max-w-md">
          Join thousands of creators and brands who use SocialWave to automate,
          analyze, and amplify their social media presence.
        </p>
      </div>
      <div className="flex items-center justify-center p-6 sm:p-12">
        <div className="max-w-md w-full mx-auto">
          <div className="text-center mb-8 lg:hidden">
            <div className="flex items-center justify-center gap-3 mb-4">
              <div className="h-10 w-10 flex items-center justify-center bg-primary rounded-lg text-primary-foreground shadow-md">
                <MessageSquare className="h-6 w-6" />
              </div>
              <span className="text-2xl font-bold gradient-text">
                SocialWave
              </span>
            </div>
          </div>
          <div className="text-center mb-6">
            <h1 className="text-3xl font-bold">{title}</h1>
            <p className="text-muted-foreground mt-2">{description}</p>
          </div>
          {children}
        </div>
      </div>
    </div>
  );
}

function LoginPage() {
  const auth = useAuth();
  const [email, setEmail] = useState("");
  const [accessCode, setAccessCode] = useState("");
  const [isCodeValid, setIsCodeValid] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleAccessCodeSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (accessCode === "12345") {
      setIsCodeValid(true);
      toast({
        title: "Access granted",
        description: "Please proceed with your login.",
      });
    } else {
      toast({
        title: "Invalid access code",
        description: "Please enter the correct access code to continue.",
        variant: "destructive",
      });
    }
  };

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await auth.signIn({ provider: "AC1", email });
      toast({
        title: "Check your email",
        description: "We've sent a magic link to your email address.",
      });
    } catch (error) {
      void error;
      toast({
        title: "Login Failed",
        description: "Please check your email and try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthLayout
      title={!isCodeValid ? "Access Required" : "Welcome Back"}
      description={
        !isCodeValid
          ? "Please enter the access code to continue."
          : "Sign in to access your SocialWave dashboard."
      }
    >
      {!isCodeValid ? (
        <form onSubmit={handleAccessCodeSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="accessCode">Access Code</Label>
            <Input
              id="accessCode"
              type="text"
              placeholder="Enter access code"
              value={accessCode}
              onChange={(e) => setAccessCode(e.target.value)}
              required
              className="h-12"
            />
          </div>
          <Button
            type="submit"
            className="w-full h-14 md:h-12 text-base md:text-sm font-medium transition-all duration-200 active:scale-95"
          >
            Verify Access Code
          </Button>
        </form>
      ) : (
        <>
          <form onSubmit={handleSignIn} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="you@example.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="h-12"
              />
            </div>
            <Button
              type="submit"
              className="w-full h-14 md:h-12 text-base md:text-sm font-medium transition-all duration-200 active:scale-95"
              disabled={isLoading}
            >
              {isLoading && <RefreshCw className="mr-2 h-4 w-4 animate-spin" />}
              Sign In with Email
            </Button>
          </form>
          <div className="relative my-6">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Or continue with
              </span>
            </div>
          </div>
          <Button
            variant="outline"
            className="w-full h-12"
            onClick={() => auth.signIn({ provider: "GOOGLE" })}
          >
            <GoogleIcon />
            Sign In with Google
          </Button>
        </>
      )}
      <div className="mt-6 text-center text-sm">
        Don't have an account?{" "}
        <Link
          to="/signup"
          className="font-semibold text-primary hover:underline"
        >
          Sign Up
        </Link>
      </div>
    </AuthLayout>
  );
}

function SignUpPage() {
  const auth = useAuth();
  const [email, setEmail] = useState("");
  const [accessCode, setAccessCode] = useState("");
  const [isCodeValid, setIsCodeValid] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleAccessCodeSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (accessCode === "12345") {
      setIsCodeValid(true);
      toast({
        title: "Access granted",
        description: "Please proceed with your sign up.",
      });
    } else {
      toast({
        title: "Invalid access code",
        description: "Please enter the correct access code to continue.",
        variant: "destructive",
      });
    }
  };

  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await auth.signIn({ provider: "AC1", email });
      toast({
        title: "Check your email",
        description:
          "We've sent a magic link to your email address to complete sign up.",
      });
    } catch (error) {
      void error;
      toast({
        title: "Sign Up Failed",
        description: "An error occurred. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthLayout
      title={!isCodeValid ? "Access Required" : "Create an Account"}
      description={
        !isCodeValid
          ? "Please enter the access code to continue."
          : "Join SocialWave and supercharge your social media."
      }
    >
      {!isCodeValid ? (
        <form onSubmit={handleAccessCodeSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="accessCode">Access Code</Label>
            <Input
              id="accessCode"
              type="text"
              placeholder="Enter access code"
              value={accessCode}
              onChange={(e) => setAccessCode(e.target.value)}
              required
              className="h-12"
            />
          </div>
          <Button
            type="submit"
            className="w-full h-14 md:h-12 text-base md:text-sm font-medium transition-all duration-200 active:scale-95"
          >
            Verify Access Code
          </Button>
        </form>
      ) : (
        <>
          <form onSubmit={handleSignUp} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="you@example.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="h-12"
              />
            </div>
            <Button
              type="submit"
              className="w-full h-14 md:h-12 text-base md:text-sm font-medium transition-all duration-200 active:scale-95"
              disabled={isLoading}
            >
              {isLoading && <RefreshCw className="mr-2 h-4 w-4 animate-spin" />}
              Sign Up with Email
            </Button>
          </form>
          <div className="relative my-6">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Or continue with
              </span>
            </div>
          </div>
          <Button
            variant="outline"
            className="w-full h-12"
            onClick={() => auth.signIn({ provider: "GOOGLE" })}
          >
            <GoogleIcon />
            Sign Up with Google
          </Button>
        </>
      )}
      <div className="mt-6 text-center text-sm">
        Already have an account?{" "}
        <Link
          to="/login"
          className="font-semibold text-primary hover:underline"
        >
          Log In
        </Link>
      </div>
    </AuthLayout>
  );
}

export default App;

function ViralThreadTagManager({ threadId }: { threadId: string }) {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [newTag, setNewTag] = useState("");

  const { data: allTags } = useQuery(
    ["viralThreadTags"],
    apiClient.listViralThreadTags,
  );
  const { data: thread } = useQuery(["viralThread", threadId], () =>
    apiClient.getViralThread({ threadId }),
  );

  const threadTagIds = new Set(thread?.tags?.map((t: any) => t.tagId) || []);

  const addTagMutation = useMutation(apiClient.addTagToViralThread, {
    onSuccess: (_, variables) => {
      const tagName = allTags?.find((t) => t.id === variables.tagId)?.name;
      toast({ title: `Tag "${tagName || "New"}" applied` });
      queryClient.invalidateQueries({
        queryKey: queryKeys.viralThread(threadId),
      });
      queryClient.invalidateQueries({ queryKey: queryKeys.viralThreads() });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to add tag",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const removeTagMutation = useMutation(apiClient.removeTagFromViralThread, {
    onSuccess: (_, variables) => {
      const tagName = allTags?.find((t) => t.id === variables.tagId)?.name;
      toast({ title: `Tag "${tagName || "New"}" removed` });
      queryClient.invalidateQueries({
        queryKey: queryKeys.viralThread(threadId),
      });
      queryClient.invalidateQueries({ queryKey: queryKeys.viralThreads() });
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to remove tag",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const createTagMutation = useMutation(apiClient.createViralThreadTag, {
    onSuccess: (newTagData) => {
      toast({ title: `Tag "${newTagData.name}" created.` });
      queryClient.invalidateQueries({ queryKey: queryKeys.viralThreadTags() });
      addTagMutation.mutate({ threadId: threadId, tagId: newTagData.id });
      setNewTag("");
    },
    onError: (error: Error) => {
      toast({
        title: "Failed to create tag",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button size="sm" variant="outline">
          <Tag className="h-4 w-4 mr-2" />
          Manage Tags
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56">
        <DropdownMenuLabel>Apply Tags</DropdownMenuLabel>
        <DropdownMenuSeparator />
        <div className="max-h-40 overflow-y-auto px-1">
          {allTags?.map((tag) => (
            <DropdownMenuCheckboxItem
              key={tag.id}
              checked={threadTagIds.has(tag.id)}
              onCheckedChange={(checked) => {
                if (checked) {
                  addTagMutation.mutate({ threadId: threadId, tagId: tag.id });
                } else {
                  removeTagMutation.mutate({
                    threadId: threadId,
                    tagId: tag.id,
                  });
                }
              }}
            >
              {tag.name}
            </DropdownMenuCheckboxItem>
          ))}
        </div>
        <DropdownMenuSeparator />
        <div className="p-2">
          <Input
            placeholder="Create new tag..."
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter" && newTag.trim()) {
                createTagMutation.mutate({ name: newTag.trim() });
              }
            }}
          />
        </div>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

function SchedulePostDialog({
  isOpen,
  onOpenChange,
  item,
  sourceType,
  onSchedule,
  isScheduling,
}: {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  item: any;
  sourceType: "GENERATED_CONTENT" | "VIRAL_THREAD" | "VIDEO";
  onSchedule: (data: {
    content: string;
    platform: string;
    accountId: string;
    pageId?: string;
    scheduledAt: Date;
    sourceType: string;
    sourceId: string;
    imageUrl?: string;
  }) => void;
  isScheduling: boolean;
}) {
  const { data: accounts } = useQuery({
    queryKey: ["accounts"],
    queryFn: apiClient.getConnectedAccounts,
  });
  const [selectedAccountId, setSelectedAccountId] = useState<string | null>(
    null,
  );
  const [selectedPageId, setSelectedPageId] = useState<string | null>(null);
  const [scheduledAt, setScheduledAt] = useState<Date | undefined>(undefined);
  const [usingBestTime, setUsingBestTime] = useState(false);
  const [draftContent, setDraftContent] = useState("");
  const [draftImageUrl, setDraftImageUrl] = useState<string | undefined>(
    undefined,
  );
  const [includeImage, setIncludeImage] = useState(true);

  const selectedAccount = accounts?.find((acc) => acc.id === selectedAccountId);
  const facebookPages =
    selectedAccount?.platform === "facebook" ? selectedAccount.pages : [];
  const isConnectedAccount = !!(
    selectedAccount?.accessToken && selectedAccount.accessToken.trim() !== ""
  );

  // Fetch conflicts when date/account changes
  const { data: conflicts, isFetching: conflictsLoading } = useQuery({
    queryKey: [
      "schedulingConflicts",
      selectedAccountId,
      selectedPageId,
      selectedAccount?.platform,
      scheduledAt?.toISOString(),
    ],
    queryFn: () =>
      apiClient.getSchedulingConflicts({
        scheduledAt: scheduledAt!.toISOString(),
        platform: selectedAccount!.platform,
        accountId: selectedAccount!.id,
        conflictWindowMinutes: 30,
      }),
    enabled: !!selectedAccount && !!scheduledAt,
  });

  // Helper to compute next date for a given day/time string
  const getNextDateForSlot = (dayName: string, timeLabel: string) => {
    const dayIndexMap: Record<string, number> = {
      Sunday: 0,
      Monday: 1,
      Tuesday: 2,
      Wednesday: 3,
      Thursday: 4,
      Friday: 5,
      Saturday: 6,
    };
    const targetDow = dayIndexMap[dayName] ?? new Date().getDay();

    const timeMatch = timeLabel.match(/^(\d{1,2})(?::(\d{2}))?\s*(AM|PM)$/i);
    let hours = 9;
    let minutes = 0;
    if (timeMatch) {
      const h = parseInt(timeMatch[1]!, 10);
      const m = timeMatch[2] ? parseInt(timeMatch[2], 10) : 0;
      const ampm = timeMatch[3]?.toUpperCase();
      hours = (h % 12) + (ampm === "PM" ? 12 : 0);
      minutes = m;
    }

    const now = new Date();
    const result = new Date(now);
    const diff = (targetDow - now.getDay() + 7) % 7;
    result.setDate(now.getDate() + diff);
    result.setHours(hours, minutes, 0, 0);
    if (result <= now) {
      // If time has already passed today, push to next week
      result.setDate(result.getDate() + 7);
    }
    return result;
  };

  const getOptimalTimes = useMutation(apiClient.getOptimalPostingTimes);

  useEffect(() => {
    if (isOpen && accounts && accounts.length > 0 && !selectedAccountId) {
      setSelectedAccountId(accounts[0]!.id);
    }
  }, [isOpen, accounts, selectedAccountId]);

  useEffect(() => {
    if (selectedAccount?.platform === "facebook" && facebookPages.length > 0) {
      setSelectedPageId(facebookPages[0]?.id || null);
    } else {
      setSelectedPageId(null);
    }
  }, [selectedAccountId, selectedAccount, facebookPages]);

  useEffect(() => {
    if (!isOpen) return;
    let text = "";
    let img: string | undefined = undefined;
    if (sourceType === "GENERATED_CONTENT") {
      if ((item as any).type === "IMAGE") {
        text = (item as any).title || "";
        img = (item as any).content;
      } else {
        text = (item as any).content || "";
      }
    } else if (sourceType === "VIRAL_THREAD") {
      try {
        text = (item as any).tweets.map((t: any) => t.content).join("\n\n");
      } catch (error) {
        void error;
        text = (item as any)?.content || "";
      }
    } else if (sourceType === "VIDEO") {
      text = `${(item as any).title || ""}\n\nWatch the video: ${(item as any).content || ""}`;
    }
    setDraftContent(text ?? "");
    setDraftImageUrl(img);
    setIncludeImage(!!img);
  }, [isOpen, item, sourceType]);

  const handleSchedule = () => {
    if (!selectedAccount || !scheduledAt) return;

    const contentText = draftContent.trim();
    const imageUrl: string | undefined = includeImage
      ? draftImageUrl
      : undefined;

    onSchedule({
      content: contentText,
      platform: selectedAccount.platform,
      accountId: selectedAccount.id,
      pageId: selectedPageId || undefined,
      scheduledAt,
      sourceType,
      sourceId: item.id,
      imageUrl,
    });
  };

  return (
    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>
            Schedule{" "}
            {sourceType === "GENERATED_CONTENT"
              ? "Content"
              : sourceType === "VIRAL_THREAD"
                ? "Thread"
                : "Video"}
          </AlertDialogTitle>
          <AlertDialogDescription>
            Schedule this{" "}
            {sourceType === "GENERATED_CONTENT"
              ? "content"
              : sourceType === "VIRAL_THREAD"
                ? "thread"
                : "video"}{" "}
            to be posted later.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <div className="space-y-4 py-4">
          <Card>
            <CardContent className="p-4 space-y-3">
              <div className="space-y-2">
                <Label htmlFor="edit-content">Edit content</Label>
                <Textarea
                  id="edit-content"
                  value={draftContent}
                  onChange={(e) => setDraftContent(e.target.value)}
                  className="min-h-[120px]"
                />
              </div>
              {draftImageUrl && (
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="include-image">Include image</Label>
                    <Switch
                      id="include-image"
                      checked={includeImage}
                      onCheckedChange={(v) => setIncludeImage(!!v)}
                    />
                  </div>
                  {includeImage && (
                    <img
                      src={draftImageUrl}
                      alt="Post image"
                      className="rounded-md border max-h-60 object-contain"
                    />
                  )}
                </div>
              )}
            </CardContent>
          </Card>
          {(!accounts || !hasOAuthConnections(accounts)) && (
            <Card className="border-dashed">
              <CardHeader>
                <CardTitle>No connected accounts</CardTitle>
                <CardDescription>
                  Connect a network to schedule directly, or copy your post to
                  paste manually.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex flex-wrap gap-2">
                  <TwitterOAuthButton />
                  <InstagramOAuthButton />
                  <FacebookOAuthButton />
                  <LinkedInOAuthButton />
                  <YouTubeOAuthButton />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="quick-copy">Quick copy</Label>
                  <Textarea
                    id="quick-copy"
                    readOnly
                    value={`${draftContent}${includeImage && draftImageUrl ? "\n\nImage: " + draftImageUrl : ""}`}
                    className="min-h-[100px]"
                  />
                  <div className="flex justify-end">
                    <Button
                      variant="secondary"
                      onClick={() =>
                        copy(
                          `${draftContent}${includeImage && draftImageUrl ? "\n\nImage: " + draftImageUrl : ""}`,
                        )
                      }
                    >
                      <Copy className="h-4 w-4 mr-2" /> Copy
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          <div className="space-y-2">
            <Label htmlFor="account-select">Select Account</Label>
            <select
              id="account-select"
              value={selectedAccountId || ""}
              onChange={(e) => setSelectedAccountId(e.target.value)}
              className="w-full p-2 border rounded-md bg-background"
            >
              {accounts?.map((acc) => (
                <option key={acc.id} value={acc.id}>
                  {acc.name} ({acc.platform})
                </option>
              ))}
            </select>
          </div>
          {selectedAccount?.platform === "facebook" &&
            facebookPages.length > 0 && (
              <div className="space-y-2">
                <Label htmlFor="page-select">Select Facebook Page</Label>
                <select
                  id="page-select"
                  value={selectedPageId || ""}
                  onChange={(e) => setSelectedPageId(e.target.value)}
                  className="w-full p-2 border rounded-md bg-background"
                >
                  {facebookPages.map((page: any) => (
                    <option key={page.id} value={page.id}>
                      {page.pageName}
                    </option>
                  ))}
                </select>
              </div>
            )}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="schedule-time">Schedule Time</Label>
              <Button
                variant="outline"
                size="sm"
                disabled={!selectedAccount || usingBestTime}
                onClick={async () => {
                  if (!selectedAccount) return;
                  try {
                    setUsingBestTime(true);
                    const res = await getOptimalTimes.mutateAsync({
                      platform: selectedAccount.platform,
                    });
                    const slot = res?.optimalTimes?.[0];
                    if (slot) {
                      const nextDate = getNextDateForSlot(
                        slot.dayName,
                        slot.time,
                      );
                      setScheduledAt(nextDate);
                    }
                  } finally {
                    setUsingBestTime(false);
                  }
                }}
                className="h-8"
              >
                {usingBestTime ? (
                  <>
                    <RefreshCw className="h-3 w-3 mr-2 animate-spin" /> Using
                    Best Time
                  </>
                ) : (
                  <>
                    <Target className="h-3 w-3 mr-2" /> Use Best Time
                  </>
                )}
              </Button>
            </div>
            <Input
              id="schedule-time"
              type="datetime-local"
              value={
                scheduledAt
                  ? new Date(
                      scheduledAt.getTime() -
                        scheduledAt.getTimezoneOffset() * 60000,
                    )
                      .toISOString()
                      .slice(0, 16)
                  : ""
              }
              onChange={(e) => setScheduledAt(new Date(e.target.value))}
            />
            {selectedAccount && scheduledAt && (
              <div className="mt-1">
                {conflictsLoading ? (
                  <div className="text-xs text-muted-foreground flex items-center gap-2">
                    <RefreshCw className="h-3 w-3 animate-spin" /> Checking for
                    conflicts...
                  </div>
                ) : conflicts?.hasConflicts ? (
                  <Alert className="mt-2">
                    <AlertTriangle className="h-4 w-4" />
                    <AlertTitle>Potential conflicts</AlertTitle>
                    <AlertDescription>
                      {conflicts.conflicts.length} scheduled post
                      {conflicts.conflicts.length !== 1 ? "s" : ""} within 30
                      minutes.
                      {conflicts.suggestedTimes &&
                        conflicts.suggestedTimes.length > 0 && (
                          <div className="mt-2 flex flex-wrap gap-2">
                            {conflicts.suggestedTimes.map(
                              (t: string | Date, i: number) => {
                                const dt = new Date(t as any);
                                const label = dt.toLocaleString(undefined, {
                                  weekday: "short",
                                  hour: "numeric",
                                  minute: "2-digit",
                                });
                                return (
                                  <Button
                                    key={i}
                                    variant="secondary"
                                    size="sm"
                                    onClick={() => setScheduledAt(dt)}
                                    className="h-7 text-xs"
                                  >
                                    {label}
                                  </Button>
                                );
                              },
                            )}
                          </div>
                        )}
                    </AlertDescription>
                  </Alert>
                ) : (
                  <div className="text-xs text-green-600">
                    No conflicts detected
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction
            onClick={handleSchedule}
            disabled={
              !selectedAccountId ||
              !scheduledAt ||
              (selectedAccount?.platform === "facebook" && !selectedPageId) ||
              !isConnectedAccount ||
              isScheduling ||
              (sourceType === "VIDEO" && !item.content.startsWith("http"))
            }
          >
            {isScheduling && (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            )}
            Confirm Schedule
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

function RepurposeThreadDialog({
  isOpen,
  onOpenChange,
  threadId,
  onRepurpose,
}: {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  threadId: string;
  onRepurpose: (input: {
    threadId: string;
    platform:
      | "linkedin"
      | "facebook"
      | "instagram"
      | "twitter"
      | "tiktok"
      | "youtube"
      | "pinterest"
      | "reddit"
      | "medium"
      | "blog";
  }) => void;
}) {
  const [platform, setPlatform] = React.useState<
    | "linkedin"
    | "facebook"
    | "instagram"
    | "twitter"
    | "tiktok"
    | "youtube"
    | "pinterest"
    | "reddit"
    | "medium"
    | "blog"
  >(
    (typeof window !== "undefined" &&
      (localStorage.getItem("lastRepurposePlatform") as any)) ||
      "linkedin",
  );

  const choose = (p: typeof platform) => {
    setPlatform(p);
    try {
      if (typeof window !== "undefined")
        localStorage.setItem("lastRepurposePlatform", p);
    } catch (error) {
      void error;
    }
  };

  const recommended = ["linkedin", "instagram", "tiktok"] as const;
  const allPlatforms = [
    { key: "linkedin", label: "LinkedIn", hint: "Post" },
    { key: "instagram", label: "Instagram", hint: "Caption" },
    { key: "tiktok", label: "TikTok", hint: "Script/Caption" },
    { key: "twitter", label: "Twitter/X", hint: "Post" },
    { key: "youtube", label: "YouTube", hint: "Title/Desc" },
    { key: "facebook", label: "Facebook", hint: "Post" },
    { key: "pinterest", label: "Pinterest", hint: "Pin" },
    { key: "reddit", label: "Reddit", hint: "Post" },
    { key: "medium", label: "Medium", hint: "Intro" },
    { key: "blog", label: "Blog", hint: "Outline" },
  ] as const;

  return (
    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Repurpose Thread</AlertDialogTitle>
          <AlertDialogDescription>
            Choose a destination. We’ll adapt structure, tone, and length for
            the platform while staying on‑brand.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <div className="space-y-3 py-2">
          <div>
            <p className="text-xs font-medium mb-2">Recommended</p>
            <div className="grid grid-cols-3 gap-2">
              {recommended.map((p) => (
                <Button
                  key={p}
                  variant={platform === p ? "default" : "secondary"}
                  size="sm"
                  className="h-9"
                  onClick={() => choose(p as any)}
                >
                  {allPlatforms.find((ap) => ap.key === p)!.label}
                </Button>
              ))}
            </div>
          </div>
          <div>
            <p className="text-xs font-medium mb-2">All platforms</p>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
              {allPlatforms.map((ap) => (
                <Button
                  key={ap.key}
                  variant={platform === ap.key ? "default" : "outline"}
                  size="sm"
                  className="h-9 justify-between"
                  onClick={() => choose(ap.key as any)}
                >
                  <span>{ap.label}</span>
                  <span className="text-[10px] text-muted-foreground">
                    {ap.hint}
                  </span>
                </Button>
              ))}
            </div>
          </div>
        </div>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction
            onClick={() => {
              onRepurpose({ threadId, platform });
              onOpenChange(false);
            }}
          >
            Repurpose
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

function FeedbackDialog({
  isOpen,
  onOpenChange,
  onSubmit,
  feedbackType,
}: {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  feedbackType: "neutral" | "dislike";
  onSubmit: (feedback: {
    feedbackTags: string[];
    feedbackComment: string;
  }) => void;
}) {
  const { toast } = useToast();
  const [feedbackTags, setFeedbackTags] = useState<string[]>([]);
  const [feedbackComment, setFeedbackComment] = useState("");

  const title =
    feedbackType === "dislike"
      ? "Why wasn't this helpful?"
      : "What are your thoughts on this?";
  const description =
    feedbackType === "dislike"
      ? "Your feedback helps our AI learn your brand and improve future suggestions."
      : "Your feedback helps us understand your preferences better.";

  useEffect(() => {
    // Reset state when dialog is re-opened for a new post
    if (isOpen) {
      setFeedbackTags([]);
      setFeedbackComment("");
    }
  }, [isOpen]);

  const handleTagToggle = (tag: string) => {
    setFeedbackTags((prev) =>
      prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag],
    );
  };

  const handleSubmit = () => {
    onSubmit({ feedbackTags, feedbackComment });
  };

  const feedbackOptions =
    feedbackType === "dislike"
      ? [
          "Not relevant to my brand",
          "Tone is off",
          "Topic is uninteresting",
          "Content is inaccurate",
          "Already posted something similar",
          "Other",
        ]
      : [
          "It's good, but not great",
          "I'd change a few things",
          "Not the right time for this",
          "Missing some key information",
          "Too generic",
          "Other",
        ];

  return (
    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>{title}</AlertDialogTitle>
          <AlertDialogDescription>{description}</AlertDialogDescription>
        </AlertDialogHeader>
        <div className="space-y-4 py-4">
          <div className="flex flex-wrap gap-2">
            {feedbackOptions.map((option) => (
              <Button
                key={option}
                variant={
                  feedbackTags.includes(option) ? "secondary" : "outline"
                }
                size="sm"
                onClick={() => handleTagToggle(option)}
                className="rounded-full"
              >
                {feedbackTags.includes(option) && (
                  <Check className="h-4 w-4 mr-2" />
                )}
                {option}
              </Button>
            ))}
          </div>
          <Textarea
            placeholder="Tell us more... (optional)"
            value={feedbackComment}
            onChange={(e) => setFeedbackComment(e.target.value)}
          />
        </div>
        <AlertDialogFooter>
          <Button
            variant="ghost"
            onClick={() => {
              // Logic to generate new suggestion would go here
              toast({
                title: "Request noted!",
                description:
                  "We'll work on generating a new suggestion for this slot.",
              });
              onOpenChange(false);
            }}
          >
            Generate New Suggestion
          </Button>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction onClick={handleSubmit}>
            Submit Feedback
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

function IPostedThisDialog({
  isOpen,
  onOpenChange,
  onSubmit,
  post,
}: {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onSubmit: () => void;
  post: any;
}) {
  const { toast } = useToast();

  return (
    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Did you post this content?</AlertDialogTitle>
          <AlertDialogDescription>
            Confirming helps our AI learn which suggestions are most effective.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <Card className="bg-secondary/20 border-secondary/50">
          <CardContent className="p-4 text-sm">
            <p className="font-semibold">{post.title || post.text}</p>
            <p className="text-muted-foreground mt-1 line-clamp-3">
              {post.contentBrief}
            </p>
          </CardContent>
        </Card>
        <AlertDialogFooter>
          <AlertDialogCancel>Not yet</AlertDialogCancel>
          <AlertDialogAction
            onClick={() => {
              onSubmit();
              toast({
                title: "Great!",
                description: "We've logged that this content was posted.",
              });
            }}
          >
            Yes, I posted it!
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

function SavedInsightsTab({
  savedInsights,
  onRemove,
  isRemoving,
  onGenerate,
  isGenerating,
}: {
  savedInsights: any[];
  onRemove: (id: string) => void;
  isRemoving: boolean;
  onGenerate: (insight: any) => void;
  isGenerating: boolean;
}) {
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  if (savedInsights.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-12 px-4">
        <div className="rounded-full bg-muted p-6 mb-4">
          <Bookmark className="h-8 w-8 text-muted-foreground" />
        </div>
        <h3 className="text-lg font-semibold mb-2">No Saved Ideas Yet</h3>{" "}
        <p className="text-muted-foreground text-center max-w-md">
          Save your favorite insights from trending insights or viral potential
          to build your personal collection of content ideas.
        </p>
        <div className="mt-6 p-4 bg-muted/50 rounded-lg border border-dashed">
          <p className="text-sm text-muted-foreground text-center">
            💡 <strong>Tip:</strong> Look for the bookmark icon on trending
            topics and viral content to save them here!
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header with improved typography */}
      <div className="flex items-center justify-between border-b pb-4">
        <div>
          <h3 className="text-xl font-bold tracking-tight">Saved Ideas</h3>
          <p className="text-sm text-muted-foreground mt-1">
            {savedInsights.length}{" "}
            {savedInsights.length === 1 ? "insight" : "insights"} in your
            collection
          </p>
        </div>
      </div>

      {/* Improved grid layout with better spacing */}
      <div
        className={`grid gap-6 ${
          isMobile ? "grid-cols-1" : "grid-cols-1 xl:grid-cols-2"
        }`}
      >
        {savedInsights.map((insight) => (
          <Card
            key={insight.id}
            className="group hover:shadow-md transition-all duration-200 border-l-4 border-l-primary/20"
          >
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-primary/10">
                    {insight.type === "trending_topic" ? (
                      <TrendingUp className="h-4 w-4 text-primary" />
                    ) : (
                      <Zap className="h-4 w-4 text-primary" />
                    )}
                  </div>
                  <div>
                    <Badge
                      variant={
                        insight.type === "trending_topic"
                          ? "default"
                          : "secondary"
                      }
                      className="text-xs font-medium"
                    >
                      {insight.type === "trending_topic"
                        ? "Trending Topic"
                        : "Viral Potential"}
                    </Badge>
                    <p className="text-xs text-muted-foreground mt-1">
                      Saved{" "}
                      {new Date(insight.createdAt).toLocaleDateString("en-US", {
                        month: "short",
                        day: "numeric",
                        year:
                          new Date(insight.createdAt).getFullYear() !==
                          new Date().getFullYear()
                            ? "numeric"
                            : undefined,
                      })}
                    </p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onRemove(insight.id)}
                  disabled={isRemoving}
                  className="h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
                >
                  {isRemoving ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <X className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </CardHeader>

            <CardContent className="space-y-4">
              {/* Content preview with better typography */}
              <div>
                <h4 className="font-semibold text-base mb-2 leading-tight">
                  {insight.type === "trending_topic"
                    ? insight.data.topic
                    : insight.data.content?.substring(0, 80) +
                      (insight.data.content?.length > 80 ? "..." : "")}
                </h4>
                {insight.data.description && (
                  <p className="text-sm text-muted-foreground leading-relaxed line-clamp-3">
                    {insight.data.description}
                  </p>
                )}
              </div>

              {/* Metadata with improved visual hierarchy */}
              {insight.type === "trending_topic" &&
                (insight.data.category || insight.data.viralScore) && (
                  <div className="flex flex-wrap items-center gap-2 pt-2 border-t border-border/50">
                    {insight.data.category && (
                      <Badge variant="outline" className="text-xs">
                        {insight.data.category}
                      </Badge>
                    )}
                    {insight.data.viralScore && (
                      <div className="flex items-center gap-1">
                        <div className="w-2 h-2 rounded-full bg-green-500"></div>
                        <span className="text-xs text-muted-foreground">
                          Viral Score: {insight.data.viralScore}/100
                        </span>
                      </div>
                    )}
                  </div>
                )}

              {/* Action button with improved styling */}
              <div className="pt-2">
                <Button
                  size="sm"
                  onClick={() => onGenerate(insight)}
                  disabled={isGenerating}
                  className="w-full h-9 font-medium"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Sparkles className="mr-2 h-4 w-4" />
                      Generate Content
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

function LinkedInOAuthCallback() {
  const navigate = useNavigate();
  const location = useLocation();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const handleCallback = async () => {
      try {
        const urlParams = new URLSearchParams(location.search);
        const code = urlParams.get("code");
        const state = urlParams.get("state");
        const error = urlParams.get("error");

        if (error) {
          throw new Error(`LinkedIn OAuth error: ${error}`);
        }

        if (!code) {
          throw new Error("No authorization code received from LinkedIn");
        }

        if (!state) {
          throw new Error("No state parameter received from LinkedIn");
        }

        await apiClient.handleLinkedInOAuthCallback({ code, state });

        // Redirect to settings page with success message
        navigate("/settings?platform=linkedin&status=success");
      } catch (callbackError: any) {
        console.error("LinkedIn OAuth callback error:", callbackError);
        setError(
          callbackError instanceof Error
            ? callbackError.message
            : "Failed to complete LinkedIn authentication",
        );
      }
    };

    handleCallback();
  }, [location.search, navigate]);

  if (error) {
    return (
      <div className="flex h-screen items-center justify-center bg-background">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="h-12 w-12 text-destructive mx-auto mb-4" />
            <h2 className="text-lg font-semibold mb-2">
              Authentication Failed
            </h2>
            <p className="text-muted-foreground mb-4">{error}</p>
            <Button onClick={() => navigate("/settings")} variant="outline">
              Return to Settings
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex h-screen items-center justify-center bg-background">
      <Card className="w-full max-w-md">
        <CardContent className="p-6 text-center">
          <RefreshCw className="h-12 w-12 animate-spin text-primary mx-auto mb-4" />
          <h2 className="text-lg font-semibold mb-2">Connecting LinkedIn</h2>
          <p className="text-muted-foreground">
            Please wait while we complete your LinkedIn authentication...
          </p>
        </CardContent>
      </Card>
    </div>
  );
}

function SchedulerCalendarView({
  scheduledPosts,
  isLoading,
  selectedPosts,
  onSelectPost,
  onDeletePost,
  isDeletingPost,
  onScheduleForDay,
  density = "comfortable",
  expandAllDetails = false,
}: {
  scheduledPosts: any[];
  isLoading: boolean;
  selectedPosts: string[];
  onSelectPost: (postId: string) => void;
  onDeletePost: (postId: string) => void;
  isDeletingPost: boolean;
  onScheduleForDay?: (date: Date) => void;
  density?: "compact" | "comfortable";
  expandAllDetails?: boolean;
}) {
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [currentWeekStart, setCurrentWeekStart] = useState(() => {
    const today = new Date();
    const dayOfWeek = today.getDay();
    const startOfWeek = new Date(today);
    startOfWeek.setDate(today.getDate() - dayOfWeek);
    return startOfWeek;
  });

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // Generate 7 days starting from currentWeekStart
  const weekDays = Array.from({ length: 7 }, (_, index) => {
    const date = new Date(currentWeekStart);
    date.setDate(currentWeekStart.getDate() + index);
    return date;
  });

  const today = new Date();
  const initialFocusIndex = Math.min(
    6,
    Math.max(
      0,
      Math.floor(
        (today.getTime() - currentWeekStart.getTime()) / (24 * 60 * 60 * 1000),
      ),
    ),
  );
  const [focusedDayIndex, setFocusedDayIndex] =
    useState<number>(initialFocusIndex);
  useEffect(() => {
    const idx = Math.min(
      6,
      Math.max(
        0,
        Math.floor(
          (new Date().getTime() - currentWeekStart.getTime()) /
            (24 * 60 * 60 * 1000),
        ),
      ),
    );
    setFocusedDayIndex(idx);
  }, [currentWeekStart]);

  const touchRef = useRef<{ startX: number; startY: number; active: boolean }>({
    startX: 0,
    startY: 0,
    active: false,
  });
  const onTouchStart = (e: React.TouchEvent) => {
    if (!isMobile) return;
    const t = e.touches && e.touches.length > 0 ? e.touches[0] : undefined;
    if (!t) return;
    touchRef.current = { startX: t.clientX, startY: t.clientY, active: true };
  };
  const onTouchEnd = (e: React.TouchEvent) => {
    if (!isMobile || !touchRef.current.active) return;
    const ct =
      e.changedTouches && e.changedTouches.length > 0
        ? e.changedTouches[0]
        : undefined;
    if (!ct) return;
    const dx = ct.clientX - touchRef.current.startX;
    const dy = ct.clientY - touchRef.current.startY;
    touchRef.current.active = false;
    if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 50) {
      if (dx < 0) {
        if (focusedDayIndex < 6) setFocusedDayIndex((i) => Math.min(6, i + 1));
        else {
          setFocusedDayIndex(0);
          navigateWeek("next");
        }
      } else {
        if (focusedDayIndex > 0) setFocusedDayIndex((i) => Math.max(0, i - 1));
        else {
          setFocusedDayIndex(6);
          navigateWeek("prev");
        }
      }
    }
  };

  // Group posts by day
  const postsByDay = scheduledPosts.reduce(
    (acc, post) => {
      const postDate = new Date(post.scheduledAt);
      const dayKey = postDate.toDateString();
      if (!acc[dayKey]) {
        acc[dayKey] = [];
      }
      acc[dayKey].push(post);
      return acc;
    },
    {} as Record<string, any[]>,
  );

  const weeklyGoal = 7;
  const postsThisWeek = weekDays.reduce(
    (sum, d) => sum + (postsByDay[d.toDateString()]?.length || 0),
    0,
  );
  const progressPct = Math.round(
    Math.min(100, (postsThisWeek / Math.max(1, weeklyGoal)) * 100),
  );
  const gapDays = weekDays
    .filter((d) => (postsByDay[d.toDateString()]?.length || 0) === 0)
    .map((d) => d.toLocaleDateString("en-US", { weekday: "short" }));
  const [insightsOpen, setInsightsOpen] = useState(false);
  const optimalTimesMutation = useMutation(apiClient.getOptimalPostingTimes);

  const navigateWeek = (direction: "prev" | "next") => {
    const newWeekStart = new Date(currentWeekStart);
    newWeekStart.setDate(
      currentWeekStart.getDate() + (direction === "next" ? 7 : -7),
    );
    setCurrentWeekStart(newWeekStart);
  };

  const goToToday = () => {
    const today = new Date();
    const dayOfWeek = today.getDay();
    const startOfWeek = new Date(today);
    startOfWeek.setDate(today.getDate() - dayOfWeek);
    setCurrentWeekStart(startOfWeek);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center py-8">
        <LoadingSpinner />
      </div>
    );
  }

  // Show calendar even when there are no scheduled posts. Previously returned an EmptyState here.
  // Users can now see the weekly grid with "No posts scheduled" placeholders and quick schedule actions.

  return (
    <div className="space-y-4">
      {/* Calendar Navigation */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigateWeek("prev")}
            className="touch-manipulation active:scale-95 transition-transform"
          >
            <ChevronLeft className="h-4 w-4" />
            {!isMobile && "Previous"}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={goToToday}
            className="touch-manipulation active:scale-95 transition-transform"
          >
            Today
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigateWeek("next")}
            className="touch-manipulation active:scale-95 transition-transform"
          >
            {!isMobile && "Next"}
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
        <div className="text-sm text-muted-foreground">
          {currentWeekStart.toLocaleDateString("en-US", {
            month: "long",
            day: "numeric",
          })}{" "}
          -{" "}
          {new Date(
            currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000,
          ).toLocaleDateString("en-US", {
            month: "long",
            day: "numeric",
            year: "numeric",
          })}
        </div>
      </div>

      {/* Week Overview */}
      <div className="rounded-lg border bg-card">
        <div className="p-3 flex items-center justify-between gap-3">
          <div className="flex-1">
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium">This week</span>
              {postsThisWeek >= weeklyGoal && (
                <Badge variant="secondary">Goal met</Badge>
              )}
            </div>
            <div className="flex items-center gap-3 mt-2">
              <div className="w-full">
                <div className="flex items-center justify-between text-xs mb-1">
                  <span>
                    {postsThisWeek}/{weeklyGoal} posts
                  </span>
                  <span>{progressPct}%</span>
                </div>
                <Progress value={progressPct} className="h-2" />
              </div>
              <Button
                variant="outline"
                size="sm"
                className="h-8"
                onClick={() => setInsightsOpen((v) => !v)}
              >
                {insightsOpen ? "Hide" : "Insights"}
              </Button>
            </div>
          </div>
        </div>
        <div className="px-3 pb-3">
          <div className="flex gap-2 overflow-x-auto no-scrollbar py-1">
            {weekDays.map((day, idx) => {
              const count = postsByDay[day.toDateString()]?.length || 0;
              const isFocused = idx === focusedDayIndex;
              const isToday = day.toDateString() === new Date().toDateString();
              return (
                <Button
                  key={idx}
                  size="sm"
                  variant={isFocused ? "default" : "ghost"}
                  className="h-9 md:h-8 flex-shrink-0 rounded-full"
                  onClick={() => setFocusedDayIndex(idx)}
                >
                  <span className="mr-2 text-xs">
                    {day.toLocaleDateString("en-US", { weekday: "short" })}
                  </span>
                  <Badge
                    variant={count > 0 ? "secondary" : "outline"}
                    className="text-[10px] px-1.5 py-0"
                  >
                    {count}
                  </Badge>
                  {isToday && (
                    <span className="ml-2 w-1.5 h-1.5 rounded-full bg-primary inline-block" />
                  )}
                </Button>
              );
            })}
          </div>
        </div>
        {insightsOpen && (
          <div className="px-3 pb-3">
            <div className="bg-muted/40 rounded-md p-3">
              <div className="text-sm font-medium mb-2">Weekly insights</div>
              <div className="text-xs text-muted-foreground mb-3">
                {gapDays.length > 0
                  ? `Gaps: ${gapDays.join(", ")}`
                  : "No gaps this week 🎉"}
              </div>
              <div className="flex items-center gap-2">
                <Button
                  size="sm"
                  variant="outline"
                  className="h-8"
                  disabled={optimalTimesMutation.isLoading}
                  onClick={() => optimalTimesMutation.mutate({})}
                >
                  {optimalTimesMutation.isLoading
                    ? "Checking…"
                    : "Next best time"}
                </Button>
                {optimalTimesMutation.data?.optimalTimes?.[0] && (
                  <Badge variant="secondary">
                    {optimalTimesMutation.data.optimalTimes[0].dayName} at{" "}
                    {optimalTimesMutation.data.optimalTimes[0].time}
                  </Badge>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Calendar Grid */}
      {isMobile ? (
        <div className="-mx-4 px-4">
          <div
            className="flex gap-3 overflow-x-auto no-scrollbar snap-x snap-mandatory touch-pan-x"
            onTouchStart={onTouchStart}
            onTouchEnd={onTouchEnd}
          >
            {weekDays.map((day, dayIndex) => {
              const dayKey = day.toDateString();
              const dayPosts = postsByDay[dayKey] || [];
              const isToday = day.toDateString() === new Date().toDateString();

              return (
                <motion.div
                  key={dayIndex}
                  className="snap-start flex-shrink-0 min-w-[300px] max-w-[360px]"
                  initial={{ opacity: 0, x: 40 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.25 }}
                >
                  <Card
                    className={`overflow-hidden ${isToday ? "ring-2 ring-primary/20" : ""} transition-all duration-200 hover:shadow-md touch-manipulation`}
                  >
                    <CardHeader
                      className="pb-3 bg-secondary/10 cursor-pointer"
                      onClick={() => onScheduleForDay && onScheduleForDay(day)}
                    >
                      <div className="flex items-center justify-between min-h-[44px]">
                        <div>
                          <h3
                            className={`font-semibold text-sm ${isToday ? "text-primary" : ""}`}
                          >
                            {day.toLocaleDateString("en-US", {
                              weekday: "long",
                            })}
                            {isToday && " (Today)"}
                          </h3>
                          <p className="text-xs text-muted-foreground">
                            {day.toLocaleDateString("en-US", {
                              month: "short",
                              day: "numeric",
                            })}
                          </p>
                        </div>
                        <Badge variant="outline" className="text-xs">
                          {dayPosts.length} post
                          {dayPosts.length !== 1 ? "s" : ""}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="pt-3">
                      {dayPosts.length > 0 ? (
                        <div className="space-y-2">
                          {dayPosts.map((post) => (
                            <ScheduledPostCard
                              key={post.id}
                              post={post}
                              isSelected={selectedPosts.includes(post.id)}
                              onSelect={() => onSelectPost(post.id)}
                              onDelete={() => onDeletePost(post.id)}
                              isDeleting={isDeletingPost}
                              compact={density === "compact"}
                              expandAllDetails={expandAllDetails}
                            />
                          ))}
                        </div>
                      ) : (
                        <div className="text-center py-4">
                          <p className="text-xs text-muted-foreground mb-2">
                            No posts scheduled
                          </p>
                          {onScheduleForDay && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => onScheduleForDay(day)}
                              className="text-xs h-10 touch-manipulation active:scale-95 transition-transform"
                            >
                              <Plus className="h-4 w-4 mr-1" />
                              Schedule
                            </Button>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
              );
            })}
          </div>
        </div>
      ) : (
        <div className="-mx-4 overflow-x-auto md:overflow-visible">
          <motion.div
            className="grid grid-cols-1 gap-px bg-border overflow-hidden rounded-lg border border-border md:grid-cols-7 w-full max-w-full min-w-[980px] snap-x md:snap-none snap-mandatory"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3, delay: 0.1 }}
          >
            {weekDays.map((day, dayIndex) => {
              const dayKey = day.toDateString();
              const dayPosts = postsByDay[dayKey] || [];
              const isToday = day.toDateString() === new Date().toDateString();

              return (
                <div
                  key={dayIndex}
                  className={`flex flex-col bg-background snap-start ${isToday ? "ring-2 ring-primary/20" : ""}`}
                >
                  <div
                    className={`p-4 border-b ${isToday ? "bg-primary/10" : "bg-secondary/20"}`}
                    onClick={() => onScheduleForDay && onScheduleForDay(day)}
                  >
                    <p
                      className={`font-semibold text-center text-sm ${isToday ? "text-primary" : ""}`}
                    >
                      {day.toLocaleDateString("en-US", { weekday: "short" })}
                      {isToday && " (Today)"}
                    </p>
                    <p className="text-xs text-muted-foreground text-center">
                      {day.toLocaleDateString("en-US", {
                        month: "short",
                        day: "numeric",
                      })}
                    </p>
                  </div>
                  <div className="p-3 space-y-2 flex-1 min-h-[220px]">
                    {dayPosts.length > 0 ? (
                      dayPosts.map((post) => (
                        <ScheduledPostCard
                          key={post.id}
                          post={post}
                          isSelected={selectedPosts.includes(post.id)}
                          onSelect={() => onSelectPost(post.id)}
                          onDelete={() => onDeletePost(post.id)}
                          isDeleting={isDeletingPost}
                          compact={density === "compact"}
                          expandAllDetails={expandAllDetails}
                        />
                      ))
                    ) : (
                      <div className="text-center py-6">
                        <p className="text-xs text-muted-foreground mb-2">
                          No posts scheduled
                        </p>
                        {onScheduleForDay && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => onScheduleForDay(day)}
                            className="text-xs h-10"
                          >
                            <Plus className="h-4 w-4 mr-1" />
                            Schedule
                          </Button>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </motion.div>
        </div>
      )}
    </div>
  );
}

function ScheduledPostCard({
  post,
  isSelected,
  onSelect,
  onDelete,
  isDeleting,
  compact = false,
  expandAllDetails,
}: {
  post: any;
  isSelected: boolean;
  onSelect: () => void;
  onDelete: () => void;
  isDeleting: boolean;
  compact?: boolean;
  expandAllDetails?: boolean;
}) {
  const postTime = new Date(post.scheduledAt).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    hour12: true,
  });
  const { toast } = useToast();
  const [showInsights, setShowInsights] = useState(false);
  useEffect(() => {
    if (typeof expandAllDetails === "boolean") {
      setShowInsights(expandAllDetails);
    }
  }, [expandAllDetails]);

  const getPlatformIcon = (platform: string) => {
    switch (platform.toLowerCase()) {
      case "twitter":
        return <MessageCircle className="h-3 w-3" />;
      case "facebook":
        return <Facebook className="h-3 w-3" />;
      case "instagram":
        return <Camera className="h-3 w-3" />;
      case "linkedin":
        return <Linkedin className="h-3 w-3" />;
      case "youtube":
        return <Video className="h-3 w-3" />;
      default:
        return <MessageSquare className="h-3 w-3" />;
    }
  };

  // On-demand intelligence (keeps ACU usage controlled)
  const predictMutation = useMutation(apiClient.predictViralScoreWithLearning);
  const optimalTimesMutation = useMutation(apiClient.getOptimalPostingTimes);
  const optimizationsMutation = useMutation(apiClient.getContentOptimizations);

  const potentialPercent = Math.round(
    ((predictMutation.data as any)?.viralScore ?? 0) * 100,
  );

  const computeFreshness = (scheduledAt: string | Date, data: any) => {
    try {
      if (!data?.optimalTimes || !Array.isArray(data.optimalTimes)) return 0;
      const dt = new Date(scheduledAt);
      const dayName = dt.toLocaleDateString("en-US", { weekday: "long" });
      const hour = dt.getHours();
      // Find best slot for that day
      const sameDaySlots = data.optimalTimes.filter(
        (s: any) => s.dayName === dayName,
      );
      const slot = sameDaySlots[0] || data.optimalTimes[0];
      if (!slot) return 0;
      // slot.time like "3:00 PM" -> parse hour
      const match = /^(\d{1,2}):(\d{2})\s*(AM|PM)$/i.exec(slot.time || "");
      if (!match)
        return Math.round((slot.score ?? slot.confidence ?? 0.6) * 100);
      let slotHour = parseInt(match![1] as string, 10) % 12;
      if (match![3]!.toUpperCase() === "PM") slotHour += 12;
      const diff = Math.abs(slotHour - hour);
      // Map hour diff to freshness (0h -> 100, 1h -> 85, 2h -> 70, 3h -> 55, >=4h -> 40)
      const table = [100, 85, 70, 55];
      const base = diff <= 3 ? (table[diff] ?? 40) : 40;
      // Blend with slot.score if exists
      const slotScore = Math.round(
        (slot.score ?? slot.confidence ?? 0.6) * 100,
      );
      return Math.round((base + slotScore) / 2);
    } catch (error) {
      void error;
      return 0;
    }
  };

  const freshnessPercent = optimalTimesMutation.data
    ? computeFreshness(post.scheduledAt, optimalTimesMutation.data)
    : undefined;

  return (
    <div
      className={`group border rounded-lg transition-all duration-200 hover:shadow-sm ${
        isSelected
          ? "ring-2 ring-primary/50 bg-primary/5"
          : "bg-background hover:bg-accent/50"
      } ${compact ? "p-2" : "p-3"}`}
    >
      <div className="flex items-start gap-2">
        <Checkbox
          checked={isSelected}
          onCheckedChange={onSelect}
          className="mt-0.5"
        />
        <div className="flex-1 min-w-0">
          <div className="flex items-center gap-2 mb-1">
            <div className="flex items-center gap-1 text-muted-foreground">
              {getPlatformIcon(post.platform)}
              <span className="text-xs capitalize">{post.platform}</span>
            </div>
            <Badge
              variant={
                post.status === "POSTED"
                  ? "default"
                  : post.status === "FAILED"
                    ? "destructive"
                    : "secondary"
              }
              className="text-xs px-1.5 py-0.5"
            >
              {post.status}
            </Badge>
          </div>
          <p
            className={`text-sm font-medium line-clamp-2 mb-1 ${compact ? "text-xs" : ""}`}
          >
            {post.content.substring(0, compact ? 60 : 100)}...
          </p>
          <div className="flex items-center justify-between">
            <p className="text-xs text-muted-foreground">{postTime}</p>
            <Button
              variant="ghost"
              size="sm"
              className="h-6 px-2 text-xs"
              onClick={() => setShowInsights((v) => !v)}
            >
              {showInsights ? "Hide" : "Insights"}
            </Button>
          </div>
          {showInsights && (
            <div className="mt-2 space-y-2">
              {/* Potential meter */}
              <div className="flex items-center gap-2">
                <span className="text-xs text-muted-foreground min-w-[64px]">
                  Potential
                </span>
                {predictMutation.isLoading ? (
                  <div className="flex items-center gap-2 text-xs text-muted-foreground">
                    <RefreshCw className="h-3 w-3 animate-spin" />
                    Checking...
                  </div>
                ) : predictMutation.data ? (
                  <div className="flex-1 flex items-center gap-2">
                    <div className="w-full h-1.5 bg-muted rounded-full overflow-hidden">
                      <div
                        className="h-full bg-blue-500 rounded-full"
                        style={{ width: `${Math.max(2, potentialPercent)}%` }}
                      />
                    </div>
                    <span className="text-xs font-medium w-10 text-right">
                      {potentialPercent}%
                    </span>
                  </div>
                ) : (
                  <Button
                    variant="outline"
                    size="xs"
                    onClick={() =>
                      predictMutation.mutate({
                        content: String(post.content || ""),
                        platform: String(
                          post.platform || "generic",
                        ).toLowerCase(),
                        contentType: String(
                          post.platform || "post",
                        ).toLowerCase(),
                      })
                    }
                    className="h-6 text-xs"
                  >
                    Check
                  </Button>
                )}
              </div>

              {/* Freshness score */}
              <div className="flex items-center gap-2">
                <span className="text-xs text-muted-foreground min-w-[64px]">
                  Freshness
                </span>
                {optimalTimesMutation.isLoading ? (
                  <div className="flex items-center gap-2 text-xs text-muted-foreground">
                    <RefreshCw className="h-3 w-3 animate-spin" />
                    Checking...
                  </div>
                ) : freshnessPercent !== undefined ? (
                  <div className="flex-1 flex items-center gap-2">
                    <div className="w-full h-1.5 bg-muted rounded-full overflow-hidden">
                      <div
                        className={`h-full rounded-full ${freshnessPercent >= 75 ? "bg-green-500" : freshnessPercent >= 55 ? "bg-yellow-500" : "bg-red-500"}`}
                        style={{ width: `${Math.max(2, freshnessPercent)}%` }}
                      />
                    </div>
                    <span className="text-xs font-medium w-10 text-right">
                      {freshnessPercent}%
                    </span>
                  </div>
                ) : (
                  <Button
                    variant="outline"
                    size="xs"
                    onClick={() =>
                      optimalTimesMutation.mutate({
                        platform:
                          String(post.platform || "").toLowerCase() ||
                          undefined,
                      })
                    }
                    className="h-6 text-xs"
                  >
                    Check
                  </Button>
                )}
              </div>

              {/* One-tap fixes */}
              <div className="flex items-center gap-2 pt-1">
                <Button
                  variant="outline"
                  size="xs"
                  disabled={optimalTimesMutation.isLoading}
                  onClick={() => {
                    optimalTimesMutation.mutate(
                      {
                        platform:
                          String(post.platform || "").toLowerCase() ||
                          undefined,
                      },
                      {
                        onSuccess: (data: any) => {
                          const next = data?.optimalTimes?.[0];
                          if (next) {
                            toast({
                              title: "Timing suggestion ready",
                              description: `Try ${next.dayName} at ${next.time} for higher reach`,
                            });
                          } else {
                            toast({ title: "No timing suggestions yet" });
                          }
                        },
                        onError: () =>
                          toast({ title: "Couldn't fetch timing suggestions" }),
                      },
                    );
                  }}
                  className="h-6 text-xs"
                >
                  Fix timing
                </Button>
                <Button
                  variant="outline"
                  size="xs"
                  disabled={optimizationsMutation.isLoading}
                  onClick={() =>
                    optimizationsMutation.mutate(
                      {
                        contentType: String(
                          post.platform || "post",
                        ).toLowerCase(),
                        timeframe: "week",
                      },
                      {
                        onSuccess: () =>
                          toast({
                            title: "Smart tweaks ready",
                            description: "See optimization tips in Analytics.",
                          }),
                        onError: () =>
                          toast({ title: "Couldn't fetch optimization tips" }),
                      },
                    )
                  }
                  className="h-6 text-xs"
                >
                  Fix copy
                </Button>
              </div>
            </div>
          )}
        </div>
        <div className="flex items-center gap-1">
          <Button
            variant="ghost"
            size="sm"
            onClick={onDelete}
            disabled={isDeleting}
            className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0"
          >
            <Trash2 className="h-3 w-3" />
          </Button>
        </div>
      </div>
    </div>
  );
}

function SchedulerPage() {
  const [activeTab, setActiveTab] = useState("schedule");
  const [selectedPosts, setSelectedPosts] = useState<string[]>([]);
  const [viewMode, setViewMode] = useState<"list" | "calendar">("calendar");
  const mainContentRef = useRef<HTMLDivElement | null>(null);
  useEffect(() => {
    if (viewMode === "calendar" && mainContentRef.current) {
      try {
        mainContentRef.current.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      } catch (error) {
        void error;
      }
    }
  }, [viewMode]);
  const [density, setDensity] = useState<"compact" | "comfortable">(
    "comfortable",
  );
  const [expandAll, setExpandAll] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [filterPlatform, setFilterPlatform] = useState<string>("all");
  const [filterStatus, setFilterStatus] = useState<string>("all");
  const [showBulkActions, setShowBulkActions] = useState(false);
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const [previewContentId, setPreviewContentId] = useState<string | null>(null);
  const [showPlan, setShowPlan] = useState(true);

  const { data: connectedAccounts, isLoading: accountsLoading } =
    useConnectedAccounts();

  // Pull to refresh functionality for mobile
  const handleRefresh = useCallback(async () => {
    await queryClient.invalidateQueries({ queryKey: ["scheduledPosts"] });
    await queryClient.invalidateQueries({ queryKey: ["schedulerStats"] });
    await queryClient.invalidateQueries({ queryKey: ["optimalPostingTimes"] });
  }, [queryClient]);

  // Enable pull-to-refresh gesture
  usePullToRefresh(handleRefresh);

  // Enhanced queries with filters
  const { data: scheduledPosts, isLoading } = useQuery({
    queryKey: ["scheduledPosts", searchQuery, filterPlatform, filterStatus],
    queryFn: () =>
      apiClient.searchScheduledPosts({
        query: searchQuery,
        filters: {
          platform: filterPlatform === "all" ? undefined : filterPlatform,
          status:
            filterStatus === "all"
              ? undefined
              : (filterStatus as "FAILED" | "PENDING" | "POSTED"),
        },
        limit: 100,
      }),
  });

  const { data: schedulerStats } = useQuery({
    queryKey: ["schedulerStats"],
    queryFn: () => apiClient.getScheduledPostsStats(),
  });

  // Advanced analytics queries
  const { data: optimalTimes } = useQuery({
    queryKey: ["optimalPostingTimes", filterPlatform],
    queryFn: () =>
      apiClient.getOptimalPostingTimes({
        platform: filterPlatform === "all" ? undefined : filterPlatform,
      }),
    enabled: activeTab === "analytics",
  });

  // Remove conflicts query for now - it needs specific post data
  // const conflicts = null;

  // Mutations
  const deleteMutation = useMutation(apiClient.deleteScheduledPost, {
    onSuccess: () => {
      toast({ title: "Post unscheduled successfully!" });
      queryClient.invalidateQueries(["scheduledPosts"]);
      queryClient.invalidateQueries(["schedulerStats"]);
    },
    onError: (error) => {
      toast({
        title: "Failed to unschedule post",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const bulkDeleteMutation = useMutation(apiClient.bulkDeleteScheduledPosts, {
    onSuccess: () => {
      toast({ title: "Posts unscheduled successfully!" });
      setSelectedPosts([]);
      setShowBulkActions(false);
      queryClient.invalidateQueries(["scheduledPosts"]);
      queryClient.invalidateQueries(["schedulerStats"]);
    },
    onError: (error) => {
      toast({
        title: "Failed to unschedule posts",
        description:
          error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      });
    },
  });

  const bulkRescheduleMutation = useMutation(
    apiClient.bulkRescheduleByTimeOffset,
    {
      onSuccess: () => {
        toast({ title: "Posts rescheduled successfully!" });
        setSelectedPosts([]);
        setShowBulkActions(false);
        queryClient.invalidateQueries(["scheduledPosts"]);
      },
      onError: (error) => {
        toast({
          title: "Failed to reschedule posts",
          description:
            error instanceof Error
              ? error.message
              : "An unknown error occurred.",
          variant: "destructive",
        });
      },
    },
  );

  const handleSelectPost = (postId: string) => {
    setSelectedPosts((prev) =>
      prev.includes(postId)
        ? prev.filter((id) => id !== postId)
        : [...prev, postId],
    );
  };

  // const handleSelectAll = () => {
  //   if (selectedPosts.length === (scheduledPosts?.posts?.length || 0)) {
  //     setSelectedPosts([]);
  //   } else {
  //     setSelectedPosts(scheduledPosts?.posts?.map((p) => p.id) || []);
  //   }
  // };

  const handleBulkDelete = () => {
    if (selectedPosts.length > 0) {
      bulkDeleteMutation.mutate({ postIds: selectedPosts });
    }
  };

  const handleBulkReschedule = (offsetHours: number) => {
    if (selectedPosts.length > 0) {
      bulkRescheduleMutation.mutate({
        postIds: selectedPosts,
        offsetMinutes: offsetHours * 60,
      });
    }
  };

  const handleScheduleForDay = (date: Date) => {
    // Navigate to create page with pre-filled date
    const dateParam = date.toISOString().split("T")[0];
    window.location.href = `/create?date=${dateParam}`;
  };

  if (accountsLoading) {
    return (
      <div className="flex justify-center py-8">
        <LoadingSpinner />
      </div>
    );
  }

  if (!connectedAccounts || connectedAccounts.length === 0) {
    return (
      <EmptyState
        title="No Connected Accounts"
        description="Connect your social media accounts to schedule and manage your posts."
      >
        <Button asChild>
          <Link to="/settings">Go to Settings</Link>
        </Button>
      </EmptyState>
    );
  }

  return (
    <div
      className="space-y-4 sm:space-y-6 overscroll-y-contain pb-28 sm:pb-8"
      style={{ paddingBottom: "calc(env(safe-area-inset-bottom, 0px) + 5rem)" }}
    >
      {/* Enhanced Mobile-Responsive Header */}
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3">
          <div className="space-y-1">
            <h1 className="text-lg sm:text-3xl font-bold gradient-text">
              Scheduler
            </h1>
            <p className="hidden sm:block text-base text-muted-foreground">
              Manage your scheduled posts across all platforms
            </p>
          </div>
        </div>

        {/* Mobile-First Tab Navigation */}
        <div className="space-y-3 sticky top-16 sm:top-20 z-30 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80 py-1.5 sm:py-2">
          <div className="flex flex-col sm:flex-row sm:items-center gap-3">
            {/* Main Tabs */}
            <div className="flex w-full sm:w-auto bg-muted p-1 rounded-lg">
              {/* 7-Day Plan first */}
              <Button
                variant={
                  activeTab === "schedule" && showPlan ? "default" : "ghost"
                }
                size="sm"
                onClick={() => {
                  setActiveTab("schedule");
                  setShowPlan(true);
                }}
                className="flex-1 sm:flex-none h-9 sm:h-8 text-xs sm:text-sm"
              >
                <Calendar className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                <span className="hidden sm:inline">7‑Day Plan</span>
                <span className="sm:hidden">Plan</span>
              </Button>
              {/* Schedule second */}
              <Button
                variant={
                  activeTab === "schedule" && !showPlan ? "default" : "ghost"
                }
                size="sm"
                onClick={() => {
                  setActiveTab("schedule");
                  setShowPlan(false);
                }}
                className="flex-1 sm:flex-none h-9 sm:h-8 text-xs sm:text-sm"
              >
                <Clock className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                <span className="hidden sm:inline">Schedule</span>
                <span className="sm:hidden">Posts</span>
              </Button>
              {/* Analytics removed */}
            </div>
            {/* View Mode Toggle - Only show for schedule tab */}
            {activeTab === "schedule" && !showPlan && (
              <div className="flex w-full sm:w-auto bg-muted p-1 rounded-lg">
                <Button
                  variant={viewMode === "list" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("list")}
                  className="flex-1 sm:flex-none h-9 sm:h-8 text-xs sm:text-sm"
                >
                  <Menu className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                  <span className="hidden sm:inline">List</span>
                  <span className="sm:hidden">List</span>
                </Button>
                <Button
                  variant={viewMode === "calendar" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("calendar")}
                  className="flex-1 sm:flex-none h-9 sm:h-8 text-xs sm:text-sm"
                >
                  <Calendar className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                  <span className="hidden sm:inline">Calendar</span>
                  <span className="sm:hidden">Cal</span>
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Tab Content */}
      {false ? (
        <div className="space-y-6">
          {/* Stats Overview */}
          {schedulerStats && (
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-muted-foreground">
                        Total Scheduled
                      </p>
                      <p className="text-2xl font-bold">
                        {schedulerStats?.total ?? 0}
                      </p>
                    </div>
                    <Clock className="h-8 w-8 text-blue-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-muted-foreground">Posted</p>
                      <p className="text-2xl font-bold text-green-600">
                        {schedulerStats?.posted ?? 0}
                      </p>
                    </div>
                    <CheckCircle className="h-8 w-8 text-green-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-muted-foreground">Pending</p>
                      <p className="text-2xl font-bold text-yellow-600">
                        {schedulerStats?.pending ?? 0}
                      </p>
                    </div>
                    <Clock className="h-8 w-8 text-yellow-500" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-muted-foreground">Failed</p>
                      <p className="text-2xl font-bold text-red-600">
                        {schedulerStats?.failed ?? 0}
                      </p>
                    </div>
                    <AlertCircle className="h-8 w-8 text-red-500" />
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Optimal Posting Times */}
          {optimalTimes && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5 text-blue-500" />
                    Best Times to Post
                  </CardTitle>
                  <CardDescription>
                    Based on your audience engagement patterns
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {optimalTimes?.bestHours?.slice(0, 3).map((hour, index) => (
                      <div
                        key={index}
                        className="flex items-center justify-between p-3 bg-muted rounded-lg"
                      >
                        <div className="flex items-center gap-3">
                          <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
                            <span className="text-sm font-semibold text-blue-600">
                              #{index + 1}
                            </span>
                          </div>
                          <div>
                            <p className="font-medium">{hour.time}</p>
                            <p className="text-sm text-muted-foreground">
                              {hour.engagementRate}% engagement rate
                            </p>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="w-16 h-2 bg-gray-200 rounded-full overflow-hidden">
                            <div
                              className="h-full bg-blue-500 rounded-full"
                              style={{ width: `${hour.confidence}%` }}
                            />
                          </div>
                          <p className="text-xs text-muted-foreground mt-1">
                            {Math.round(hour.confidence)}% confidence
                          </p>
                        </div>
                      </div>
                    )) || (
                      <p className="text-center text-muted-foreground py-4">
                        No optimal times data available yet
                      </p>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Calendar className="h-5 w-5 text-green-500" />
                    Best Days to Post
                  </CardTitle>
                  <CardDescription>
                    Days with highest audience activity
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {optimalTimes?.bestDays?.slice(0, 3).map((day, index) => (
                      <div
                        key={index}
                        className="flex items-center justify-between p-3 bg-muted rounded-lg"
                      >
                        <div className="flex items-center gap-3">
                          <div className="w-8 h-8 rounded-full bg-green-100 flex items-center justify-center">
                            <span className="text-sm font-semibold text-green-600">
                              #{index + 1}
                            </span>
                          </div>
                          <div>
                            <p className="font-medium">{day.dayName}</p>
                            <p className="text-sm text-muted-foreground">
                              {day.engagementRate}% engagement rate
                            </p>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="w-16 h-2 bg-gray-200 rounded-full overflow-hidden">
                            <div
                              className="h-full bg-green-500 rounded-full"
                              style={{ width: `${day.confidence}%` }}
                            />
                          </div>
                          <p className="text-xs text-muted-foreground mt-1">
                            {Math.round(day.confidence)}% confidence
                          </p>
                        </div>
                      </div>
                    )) || (
                      <p className="text-center text-muted-foreground py-4">
                        No optimal days data available yet
                      </p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Optimal Time Slots */}
          {optimalTimes?.optimalTimes && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Zap className="h-5 w-5 text-purple-500" />
                  Recommended Time Slots
                </CardTitle>
                <CardDescription>
                  Perfect combinations of day and time for maximum engagement
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {(optimalTimes?.optimalTimes ?? []).map((slot, index) => (
                    <div
                      key={index}
                      className="p-4 border rounded-lg hover:bg-muted/50 transition-colors"
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <div className="w-6 h-6 rounded-full bg-purple-100 flex items-center justify-center">
                            <span className="text-xs font-semibold text-purple-600">
                              #{index + 1}
                            </span>
                          </div>
                          <span className="font-medium">{slot.dayName}</span>
                        </div>
                        <Badge variant="outline">{slot.time}</Badge>
                      </div>
                      <div className="space-y-1">
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">Score:</span>
                          <span className="font-medium">
                            {Math.round(slot.score * 100)}%
                          </span>
                        </div>
                        <div className="w-full h-1.5 bg-gray-200 rounded-full overflow-hidden">
                          <div
                            className="h-full bg-purple-500 rounded-full"
                            style={{ width: `${slot.confidence}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Insights */}
          {optimalTimes?.insights && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Lightbulb className="h-5 w-5 text-yellow-500" />
                  Scheduling Insights
                </CardTitle>
                <CardDescription>
                  AI-powered recommendations to improve your posting strategy
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {(optimalTimes?.insights ?? []).map((insight, index) => (
                    <div
                      key={index}
                      className="flex gap-3 p-4 bg-muted rounded-lg"
                    >
                      <div className="flex-shrink-0">
                        {insight.type === "peak_hour" && (
                          <Clock className="h-5 w-5 text-blue-500" />
                        )}
                        {insight.type === "best_day" && (
                          <Calendar className="h-5 w-5 text-green-500" />
                        )}
                        {insight.type === "platform_specific" && (
                          <Target className="h-5 w-5 text-purple-500" />
                        )}
                      </div>
                      <div className="flex-1">
                        <h4 className="font-medium">{insight.title}</h4>
                        <p className="text-sm text-muted-foreground mt-1">
                          {insight.description}
                        </p>
                        {insight.actionable && (
                          <Badge variant="secondary" className="mt-2">
                            Actionable
                          </Badge>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Data Quality */}
          {optimalTimes?.dataQuality && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-gray-500" />
                  Data Quality
                </CardTitle>
                <CardDescription>
                  Information about the data used for these recommendations
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <p className="text-2xl font-bold">
                      {optimalTimes?.dataQuality?.totalPosts ?? 0}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      Total Posts Analyzed
                    </p>
                  </div>
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <p className="text-lg font-bold">
                      {(optimalTimes as any)?.dataQuality?.dateRange?.from
                        ? new Date(
                            (optimalTimes as any).dataQuality.dateRange.from,
                          ).toLocaleDateString()
                        : "N/A"}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      Analysis Start Date
                    </p>
                  </div>
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <p className="text-lg font-bold">
                      {(optimalTimes as any)?.dataQuality?.dateRange?.to
                        ? new Date(
                            (optimalTimes as any).dataQuality.dateRange.to,
                          ).toLocaleDateString()
                        : "N/A"}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      Analysis End Date
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* No Data State */}
          {!optimalTimes && (
            <Card>
              <CardContent className="p-8 text-center">
                <BarChart3 className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">
                  No Analytics Data Available
                </h3>
                <p className="text-muted-foreground mb-4">
                  We need more posting data to generate optimal timing
                  recommendations.
                </p>
                <p className="text-sm text-muted-foreground">
                  Keep posting content and check back later for personalized
                  insights!
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      ) : (
        <div className="space-y-6">
          {showPlan && (
            <>
              <ContentDiscoveryTab setPreviewContentId={setPreviewContentId} />
              {previewContentId && (
                <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
                  <div className="bg-background border border-border rounded-none sm:rounded-lg shadow-2xl w-full max-w-full sm:max-w-4xl h-[90vh] sm:h-auto overflow-auto">
                    <InlineContentPreview
                      contentId={previewContentId}
                      onClose={() => setPreviewContentId(null)}
                    />
                  </div>
                </div>
              )}
            </>
          )}
          {/* Mobile-Responsive Quick Stats */}
          {!showPlan && schedulerStats && (
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4">
              <Card className="hover:shadow-md transition-shadow">
                <CardContent className="p-3 sm:p-4">
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <p className="text-xs sm:text-sm text-muted-foreground truncate">
                        Total Scheduled
                      </p>
                      <p className="text-base sm:text-2xl font-bold">
                        {schedulerStats?.total ?? 0}
                      </p>
                    </div>
                    <Clock className="h-5 w-5 sm:h-8 sm:w-8 text-blue-500 flex-shrink-0" />
                  </div>
                </CardContent>
              </Card>

              <Card className="hover:shadow-md transition-shadow">
                <CardContent className="p-3 sm:p-4">
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <p className="text-xs sm:text-sm text-muted-foreground">
                        Posted
                      </p>
                      <p className="text-lg sm:text-2xl font-bold text-green-600">
                        {schedulerStats?.posted ?? 0}
                      </p>
                    </div>
                    <CheckCircle className="h-5 w-5 sm:h-8 sm:w-8 text-green-500 flex-shrink-0" />
                  </div>
                </CardContent>
              </Card>

              <Card className="hover:shadow-md transition-shadow">
                <CardContent className="p-3 sm:p-4">
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <p className="text-xs sm:text-sm text-muted-foreground">
                        Pending
                      </p>
                      <p className="text-lg sm:text-2xl font-bold text-yellow-600">
                        {schedulerStats?.pending ?? 0}
                      </p>
                    </div>
                    <Clock className="h-5 w-5 sm:h-8 sm:w-8 text-yellow-500 flex-shrink-0" />
                  </div>
                </CardContent>
              </Card>

              <Card className="hover:shadow-md transition-shadow">
                <CardContent className="p-3 sm:p-4">
                  <div className="flex items-center justify-between">
                    <div className="min-w-0 flex-1">
                      <p className="text-xs sm:text-sm text-muted-foreground">
                        Failed
                      </p>
                      <p className="text-lg sm:text-2xl font-bold text-red-600">
                        {schedulerStats?.failed ?? 0}
                      </p>
                    </div>
                    <AlertCircle className="h-5 w-5 sm:h-8 sm:w-8 text-red-500 flex-shrink-0" />
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Conflicts Alert */}
          {false && (
            <Alert className="border-yellow-200 bg-yellow-50">
              <AlertTriangle className="h-4 w-4 text-yellow-600" />
              <AlertTitle className="text-yellow-800">
                Scheduling Conflicts Detected
              </AlertTitle>
              <AlertDescription className="text-yellow-700">
                0 posts have potential scheduling conflicts.
                <Button
                  variant="link"
                  className="p-0 h-auto text-yellow-800 underline"
                  asChild
                >
                  <Link to="#conflicts">Review conflicts</Link>
                </Button>
              </AlertDescription>
            </Alert>
          )}

          {/* Scheduling Activation Controls */}
          <Card className={showPlan ? "hidden" : undefined}>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-5 w-5 text-blue-500" />
                Scheduling Controls
              </CardTitle>
              <CardDescription>
                Quick actions to schedule and manage your content
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <Button
                  variant="outline"
                  className="h-auto p-4 flex flex-col items-center gap-2"
                  asChild
                >
                  <Link to="/create">
                    <Plus className="h-5 w-5 sm:h-6 sm:w-6" />
                    <div className="text-center">
                      <div className="font-medium">Create & Schedule</div>
                      <div className="text-xs text-muted-foreground">
                        New content
                      </div>
                    </div>
                  </Link>
                </Button>

                <Button
                  variant="outline"
                  className="h-auto p-4 flex flex-col items-center gap-2"
                  asChild
                >
                  <Link to="/discover">
                    <Lightbulb className="h-5 w-5 sm:h-6 sm:w-6" />
                    <div className="text-center">
                      <div className="font-medium">Schedule from Ideas</div>
                      <div className="text-xs text-muted-foreground">
                        Content strategy
                      </div>
                    </div>
                  </Link>
                </Button>

                {optimalTimes?.optimalTimes &&
                  optimalTimes.optimalTimes.length > 0 && (
                    <Button
                      variant="outline"
                      className="h-auto p-4 flex flex-col items-center gap-2 relative"
                      onClick={() => {
                        const nextOptimalTime = optimalTimes.optimalTimes[0];
                        if (nextOptimalTime) {
                          toast({
                            title: "Optimal Time Suggested",
                            description: `Best time to post: ${nextOptimalTime.dayName} at ${nextOptimalTime.time}`,
                          });
                        }
                      }}
                    >
                      <Target className="h-5 w-5 sm:h-6 sm:w-6" />
                      <div className="text-center">
                        <div className="font-medium">Use Optimal Time</div>
                        <div className="text-xs text-muted-foreground">
                          AI recommended
                        </div>
                      </div>
                      <Badge
                        variant="secondary"
                        className="absolute -top-1 -right-1 text-xs px-1.5 py-0.5"
                      >
                        AI
                      </Badge>
                    </Button>
                  )}

                <Button
                  variant="outline"
                  className="h-auto p-4 flex flex-col items-center gap-2"
                  onClick={() => {
                    const today = new Date();
                    const nextHour = new Date(today.getTime() + 60 * 60 * 1000);
                    toast({
                      title: "Quick Schedule Available",
                      description: `Schedule for next hour: ${nextHour.toLocaleTimeString("en-US", { hour: "numeric", minute: "2-digit", hour12: true })}`,
                    });
                  }}
                >
                  <Clock className="h-5 w-5 sm:h-6 sm:w-6" />
                  <div className="text-center">
                    <div className="font-medium">Quick Schedule</div>
                    <div className="text-xs text-muted-foreground">
                      Next hour
                    </div>
                  </div>
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Filters and Search */}
          <Card className={showPlan ? "hidden" : undefined}>
            <CardContent className="p-3 md:p-4">
              <div className="space-y-3 md:space-y-0 md:flex md:flex-row md:gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search posts..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10 h-10 md:h-10 text-sm md:text-sm transition-all duration-200 active:scale-95"
                    />
                  </div>
                </div>

                <div className="flex gap-2 md:gap-3">
                  <Select
                    value={filterPlatform}
                    onValueChange={setFilterPlatform}
                  >
                    <SelectTrigger className="flex-1 md:w-[140px] h-10 md:h-10 text-sm md:text-sm transition-all duration-200 active:scale-95">
                      <SelectValue placeholder="Platform" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Platforms</SelectItem>
                      <SelectItem value="twitter">Twitter</SelectItem>
                      <SelectItem value="facebook">Facebook</SelectItem>
                      <SelectItem value="instagram">Instagram</SelectItem>
                      <SelectItem value="linkedin">LinkedIn</SelectItem>
                      <SelectItem value="youtube">YouTube</SelectItem>
                    </SelectContent>
                  </Select>

                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger className="flex-1 md:w-[120px] h-10 md:h-10 text-sm md:text-sm transition-all duration-200 active:scale-95">
                      <SelectValue placeholder="Status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="PENDING">Pending</SelectItem>
                      <SelectItem value="POSTED">Posted</SelectItem>
                      <SelectItem value="FAILED">Failed</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {selectedPosts.length > 0 && (
                  <Button
                    variant="outline"
                    onClick={() => setShowBulkActions(!showBulkActions)}
                    className="w-full md:w-auto h-10 md:h-10 text-sm md:text-sm touch-manipulation transition-all duration-200 active:scale-95"
                  >
                    <Settings className="h-4 w-4 mr-2 md:hidden" />
                    Bulk Actions ({selectedPosts.length})
                  </Button>
                )}
              </div>

              {/* Bulk Actions */}
              {showBulkActions && selectedPosts.length > 0 && (
                <div className="mt-3 p-3 md:p-4 bg-muted rounded-lg transition-all duration-200 ease-in-out">
                  <div className="grid grid-cols-2 md:flex md:flex-wrap gap-2 md:gap-3">
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={handleBulkDelete}
                      disabled={bulkDeleteMutation.isLoading}
                      className="h-10 touch-manipulation transition-all duration-150 active:scale-95"
                    >
                      <Trash2 className="h-4 w-4 mr-2" />
                      <span className="hidden sm:inline">Delete Selected</span>
                      <span className="sm:hidden">Delete</span>
                    </Button>

                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleBulkReschedule(1)}
                      disabled={bulkRescheduleMutation.isLoading}
                      className="h-10 touch-manipulation transition-all duration-150 active:scale-95"
                    >
                      <Clock className="h-4 w-4 mr-1 md:mr-2" />
                      +1 Hour
                    </Button>

                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleBulkReschedule(24)}
                      disabled={bulkRescheduleMutation.isLoading}
                      className="h-10 touch-manipulation transition-all duration-150 active:scale-95"
                    >
                      <Clock className="h-4 w-4 mr-1 md:mr-2" />
                      +1 Day
                    </Button>

                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleBulkReschedule(-1)}
                      disabled={bulkRescheduleMutation.isLoading}
                      className="h-10 touch-manipulation transition-all duration-150 active:scale-95"
                    >
                      <Clock className="h-4 w-4 mr-1 md:mr-2" />
                      -1 Hour
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Main Content */}
          {viewMode === "list" ? (
            <div
              className={`${showPlan ? "hidden" : ""} space-y-3 md:space-y-4`}
            >
              {isLoading ? (
                <div className="flex justify-center py-8">
                  <LoadingSpinner />
                </div>
              ) : scheduledPosts?.posts && scheduledPosts.posts.length > 0 ? (
                <div className="space-y-2 md:space-y-3">
                  {scheduledPosts.posts.map((post) => (
                    <Card
                      key={post.id}
                      className="p-3 md:p-4 transition-all duration-150 hover:shadow-md active:scale-[0.99] touch-manipulation"
                    >
                      <div className="flex items-start md:items-center justify-between gap-3">
                        <div className="flex items-start md:items-center space-x-3 flex-1 min-w-0">
                          <Checkbox
                            checked={selectedPosts.includes(post.id)}
                            onCheckedChange={() => handleSelectPost(post.id)}
                            className="mt-1 md:mt-0 touch-manipulation"
                          />
                          <div className="flex-1 min-w-0">
                            <p className="font-medium text-sm md:text-base line-clamp-2 md:line-clamp-1">
                              {post.content.substring(0, 100)}...
                            </p>
                            <p className="text-xs md:text-sm text-muted-foreground mt-1">
                              {post.platform} •{" "}
                              {new Date(post.scheduledAt).toLocaleString(
                                "en-US",
                                {
                                  month: "short",
                                  day: "numeric",
                                  hour: "numeric",
                                  minute: "2-digit",
                                  hour12: true,
                                },
                              )}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2 flex-shrink-0">
                          <Badge
                            variant={
                              post.status === "POSTED"
                                ? "default"
                                : post.status === "FAILED"
                                  ? "destructive"
                                  : "secondary"
                            }
                            className="text-xs"
                          >
                            {post.status}
                          </Badge>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() =>
                              deleteMutation.mutate({ postId: post.id })
                            }
                            disabled={deleteMutation.isLoading}
                            className="h-8 w-8 p-0 touch-manipulation transition-all duration-150 active:scale-95"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>
              ) : (
                <Card className="p-6 md:p-8">
                  <EmptyState
                    title="No Scheduled Posts"
                    description="You haven't scheduled any posts yet."
                  />
                </Card>
              )}
            </div>
          ) : (
            <div
              ref={mainContentRef}
              className={`${showPlan ? "hidden" : ""} transition-all duration-200 ease-in-out`}
            >
              <div className="flex items-center justify-between bg-muted/50 rounded-lg p-2 mb-2">
                <div className="flex items-center gap-1">
                  <Button
                    variant={density === "comfortable" ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setDensity("comfortable")}
                    className="h-8"
                  >
                    Comfortable
                  </Button>
                  <Button
                    variant={density === "compact" ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setDensity("compact")}
                    className="h-8"
                  >
                    Compact
                  </Button>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  className="h-8"
                  onClick={() => setExpandAll((v) => !v)}
                >
                  {expandAll ? "Collapse All" : "Expand All"}
                </Button>
              </div>
              <SchedulerCalendarView
                scheduledPosts={scheduledPosts?.posts || []}
                isLoading={isLoading}
                selectedPosts={selectedPosts}
                onSelectPost={handleSelectPost}
                onDeletePost={(postId) => deleteMutation.mutate({ postId })}
                isDeletingPost={deleteMutation.isLoading}
                onScheduleForDay={handleScheduleForDay}
                density={density}
                expandAllDetails={expandAll}
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
}

